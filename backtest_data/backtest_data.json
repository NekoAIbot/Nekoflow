{
    "call_of_duty": [],
    "cod_mobile": [],
    "cod_warzone": [],
    "apex_legends": [],
    "fortnite": [],
    "pubg_mobile": [],
    "league_of_legends": [],
    "dota2": [],
    "overwatch": [
        {
            "video_id": "60ItHLz5WEA",
            "title": "Alan Walker - Faded",
            "description": "Walkerworld 2.0, Out Now   https://www.youtube.com/playlist?list=OLAK5uy_l46zNi3aDC0_GKPOMxL8ESxkAhiW-Hb2w Thanks ...",
            "published_at": "2015-12-04T07:00:30Z",
            "channel_name": "Overwatch",
            "transcript": "[Music] [Applause] you were the shadow to my light did you feel another star you Fade Away afraid our a is out of sight want to see your I li where are you now where are you [Music] now where are you now was it all in my fantasy where are you now were you only imaginary where are you now I'm never see never see where are you now another another the dream the monsters running wide inside of me I'm [Music] F feel so lost I'm fed I'm fading so lost I'm fing the shallow Waters never what I needed I'm Letting Go a deeper dive Eternal Silence of the sea and Brea a li where are you now where are [Music] you under the bright the F night you set the heart on fire where are you now where are now where where are you [Music] now Under the Sea Under the SE where are you now another dream the monsters roing wide inside of me I'm fed I so lost I'm feeling I'm fing so lost I'm [Music] feeling"
        },
        {
            "video_id": "1-xGerv5FOk",
            "title": "Alan Walker - Alone",
            "description": "Walkerworld 2.0, Out Now   https://www.youtube.com/playlist?list=OLAK5uy_l46zNi3aDC0_GKPOMxL8ESxkAhiW-Hb2w ...",
            "published_at": "2016-12-02T07:59:01Z",
            "channel_name": "Overwatch",
            "transcript": "[Music] lost in your [Music] M I want to know am I Ling my mind never let me go if this night is not forever at least we are together I know I'm not alone I know I'm not alone anywhere whenever a part but still together I know I'm not alone I know I'm not [Music] alone I know I'm not alone I know I'm not alone conscious mind I'm wide awake want to feel one last time take my pain away if this night is not forever at least we are together I know I'm not alone I know I'm not alone anywhere whenever a part we're still together I know I'm not alone I know I'm not alone I know I'm not [Music] alone I know I'm not alone I'm not alone I'm not alone I'm not I'm not alone I'm not alone I'm not alone I'm not alone I'm not alone"
        },
        {
            "video_id": "wJnBTPUQS5A",
            "title": "Alan Walker - The Spectre",
            "description": "Walkerworld 2.0, Out Now   https://www.youtube.com/playlist?list=OLAK5uy_l46zNi3aDC0_GKPOMxL8ESxkAhiW-Hb2w Neon ...",
            "published_at": "2017-09-15T07:02:57Z",
            "channel_name": "Overwatch",
            "transcript": "ALAN WALKER - THE SPECTRE \u266a Hello, hello \u266a \u266a Can you hear me \u266a \u266a As I scream your name \u266a \u266a Hello, hello \u266a \u266a Do you need me \u266a \u266a Before I fade away \u266a \u266a Is this a place that I call home \u266a \u266a To find what I've become \u266a \u266a Walk along the path unknown \u266a \u266a We live, we love, we lie \u266a \u266a Deep in the dark \u266a \u266a I don't need the light \u266a \u266a There's a ghost inside me \u266a \u266a It all belongs to the other side \u266a \u266a We live, we love, we lie \u266a \u266a Hello, hello \u266a \u266a Nice to meet you \u266a \u266a Voice inside my head \u266a \u266a Hello, hello \u266a \u266a I believe you \u266a \u266a How can I forget \u266a \u266a Is this a place that I call home \u266a \u266a To find what I've become \u266a \u266a Walk along the path unknown \u266a \u266a We live, we love, we lie \u266a \u266a Deep in the dark \u266a \u266a I don't need the light \u266a \u266a There's a ghost inside me \u266a \u266a It all belongs to the other side \u266a \u266a We live, we love, we lie \u266a \u266a We live, we love, we lie \u266a"
        },
        {
            "video_id": "M-P4QBt-FWw",
            "title": "Alan Walker - Darkside (feat. Au/Ra and Tomine Harket)",
            "description": "Walkerworld 2.0, Out Now   https://www.youtube.com/playlist?list=OLAK5uy_l46zNi3aDC0_GKPOMxL8ESxkAhiW-Hb2w ...",
            "published_at": "2018-07-27T07:00:04Z",
            "channel_name": "Overwatch",
            "transcript": "[Music] when not in love we share No stories just something in your eyes don't be afraid the Shadows know me let's Leave the World Behind take me through the night falling to the dark sh we don't need the light we live all the dark side I see it let's feel it while we're still young and fearless let go of the L falling the dark sh [Music] falling the dark side the [Music] dark go of the leg fall into the dark Beneath The Sky it's black as diamonds we're running out of time Don't Wait For Truth to come and bl us let's just believe the LI believe it I see it I know that you can't feel it no secrets worth keeping so for me like I'm dreaming take me through the night fall into the dark shy we don't need the light we live on the dark shy I see it let's feel it while we're still young and fearless let go of the light fall into the dark shine fall into the dark [Music] Shine the dark side [Music] let go of the leg falling to the dark sh the [Music] take me through the night falling to the dark we don't leave the we live all the dark side I see let's feel it while we're still young and feel it let go of the L fall into the dark [Music] oh [Music]"
        },
        {
            "video_id": "2i2khp_npdE",
            "title": "Alan Walker - Sing Me To Sleep",
            "description": "Walkerworld 2.0, Out Now   https://www.youtube.com/playlist?list=OLAK5uy_l46zNi3aDC0_GKPOMxL8ESxkAhiW-Hb2w ...",
            "published_at": "2016-06-02T22:01:50Z",
            "channel_name": "Overwatch",
            "transcript": "wait a second let me catch my breath remind me how it feels to hear your voice your lips are moving like can hear a thing living life as if we had a choice anywhere any time I would do anything for you anything for you yesterday got away Melo stuck inside your head i s in every breath sing me S Now sing me S AR you sa me S now sa me [Music] remember me now time cannot erase I can hear your Whispers in my mind I've become what you cannot embrace our memory will be my la sing me sing now sing me S you sing me sleep now say me sleep [Music] time I day time day [Music] day time I day time day day hey [Applause] [Music]"
        }
    ],
    "valorant": [],
    "esports_news": [],
    "gamer_guides": [],
    "indie_games": [],
    "retro_gaming": [],
    "mobile_gaming": [],
    "pc_gaming": [
        {
            "video_id": "fIHH5-HVS9o",
            "title": "Justice League Official Comic-Con Trailer (2017) - Ben Affleck Movie",
            "description": "Get Tickets - http://www.fandango.com/justiceleaguepartone_190732/movieoverview?cmp=MCYT_YouTube_Desc READ ...",
            "published_at": "2016-07-23T19:42:07Z",
            "channel_name": "PC Gamer",
            "transcript": "There is a... ...stranger... ...who comes to this village from the sea. He comes in the winter when people are hungry. Brings fish. He comes on the king tide. That was last night. Talk. I believe that an enemy is coming. From far away. I'm looking for warriors. This stranger. Others like him. I'm building an alliance to defend us. It's very important that I see this man. Barry Allen. Bruce Wayne. You said that like it explains why there's a total stranger sitting in the dark in my second favorite chair. He said he'll fight with us? More or less. More more or more less? Probably more less. He said no. He said no. Look, man. I don't know who you are. But whoever you're looking for... So you're fast? That feels like an oversimplification. I'm putting together a team. People with special abilities. You see, I believe enemies are coming... Stop right there. I'm in. You are? Just like that? Yeah. I.... ...I need... ...friends. Great. Can I keep this? I heard about you. Didn't think you were real. I'm real when it's useful. Arthur Curry. I hear you can talk to fish."
        },
        {
            "video_id": "Tf4sa0BVJVw",
            "title": "Max Steel Official Trailer 1 (2016) - Superhero Movie",
            "description": "Starring: Ben Winchell, Maria Bello, and Andy Garcia Max Steel Official Trailer 1 (2016) - Superhero Movie The adventures of ...",
            "published_at": "2016-08-31T22:52:41Z",
            "channel_name": "PC Gamer",
            "transcript": "We're home Max Fresh start. Fresh start number 9... No more moving around, i promise. And we have a new student Mr.... McGrath Max Mcgrath. You're not Jim Macgrath's son, \nare you ? Why does averybody in this town know more about dad than i do  ? You knew my dad ? I need to Know. About his work. You're father was working to find  a way to harness energy. Beyond anything than mankind has ever attempted. He was right on the edge of a breaktrough. What's happening to me ? Hum... Max ? AAAAAAAAAAAH! No ! stay back ! My Name is Steel ! What ? You Speak english ?! Max ? My mum is coming ! Is \"my mum\" dangerous ? Nooo, no ! Come on.. You gotta clean... you gotta clean in here bud. Did you do this to me ? No Max, your father gave you these powers I'm just here to show you how to use them Let's get started ! Max you can use your energy in many different ways You can run faster Be stronger And i haven't even shown you the best part yet. What ? AAAAAAH This is awesome. You're welcome. Max Sophia You're ok ? Yeah ! I'm just really late for my  uuuuh.... ... my Zumba class The girl appears to cause increases in heart rate\nperhaps you should avoid contact. Perhaps you should shut up. See ? She has made you angry. The Ultralinks are here to destroy the earth And your energy is the only thing that can stop them. Time to suit up.\nCOMING IN HARD MAX ! I can't believe i'm doing this. You have to learn to control these powers. Go right Let's go... left No let's just go straight then Go Go Run faster ! SO MUCH FASTER Your father believed he could save the world It's up to you now Max. Steel now go turbo!! You ok ? Yeah A few more bruises than usual."
        },
        {
            "video_id": "dKi5XoeTN0k",
            "title": "Fast &amp; Furious 6 Official Trailer #1 (2013) - Vin Diesel Movie HD",
            "description": "Subscribe to TRAILERS: http://bit.ly/sxaw6h Subscribe to COMING SOON: http://bit.ly/H2vZUn Like us on ...",
            "published_at": "2013-02-05T16:59:07Z",
            "channel_name": "PC Gamer",
            "transcript": "[Music] this is 100 million buys huh it wasn't that hard to find you Toretto wasn't hiding last week it seemed a highly coordinated drivers took been an entire military convoy you know real was my last job I know you didn't do it but you're gonna help me take down the team I did and why is that been chasing this crew across 12 countries this was taken a week ago it's impossible I need your help Dom I need your team I don't smell baby oil you keep running your piehole you're gonna smell an ass-kicking you got the best crew in the world standing right in funny give them a reason this day our targets Owen Shaw former SpecOps soldier for years they've been running jobs in Europe there's a most recent jobs that graduated them to a whole new level the loss of life is unthinkable I'm offering you a chance to make your family whole again you get as close to Letty and we'll get you Shaw and you give us full Parsons all the way around I can't promise you that that's the deal taking away [Music] the DAR we're not dealing with cops with drug dealers I've never seen this before yo its Co when you buy it makes you predictable and our line of work predictable means vulnerable I can reach out and break you whenever I want you believe in goes maybe the Letty we once knew is gone you don't turn it back deeper than I do [Music] gasps they got a take we talk of vehicular warfare this is not what we do"
        },
        {
            "video_id": "MxCRgtdAuBo",
            "title": "Focus Official Trailer #1 (2015) - Will Smith, Margot Robbie Movie HD",
            "description": "Subscribe to TRAILERS: http://bit.ly/sxaw6h Subscribe to COMING SOON: http://bit.ly/H2vZUn Like us on FACEBOOK: ...",
            "published_at": "2014-10-09T23:29:58Z",
            "channel_name": "PC Gamer",
            "transcript": "*Song playing That's what you get when you hire a con man.  I can convince anyone of anything.  You see there's a science to getting people to trust you.  I want in.  With your current skill set, you don't.  Maybe... you could teach me.  In your room...  That is so bad.  Is it?  Does it feel sexy on your face?  A little.  It does? Okay let's go.    We're about thirty strong.  Everybody gets a percentage.  Make it quick and get out.  Who's the girl? She's our intern.  You hittin' that?  I'm right here.  No Farhad, I'm not hitting that.  You should hit that.  We never drop the con.  Never break.  Where are the black people!? I got this.  What?  Oh! Oh, sorry.  Congratulations. You're a criminal.  You might be one of the best I've ever seen.  So what about the big con? I thought you were all big time.  You mean the one where we make so much money we all retire.   This needs to be discrete. No holes.  You seem trustworthy, but you don't know me.  Is he your mark?  That's fantastic.  He's not a guy you want to cross.  All of it.  1.1 million. Nicky, that is my money too.  For now, you make things interesting.  There's no room for heart in this game.  It'll get you killed.  How does that feel? Wooow There's two kinds of people in this world.  There's hammers.... and nails.  You decide which one you want to be. "
        },
        {
            "video_id": "k397HRbTtWI",
            "title": "The Boss Baby Official Trailer 1 (2017) - Alec Baldwin Movie",
            "description": "Starring: Alec Baldwin, Lisa Kudrow, and Steve Buscemi The Boss Baby Official Trailer 1 (2017) - Alec Baldwin Movie Watch more ...",
            "published_at": "2016-12-15T14:17:09Z",
            "channel_name": "PC Gamer",
            "transcript": "\u266b Flo Rida - My House The Templetons were making plans for their newest addition. *whip* What the... *looks through binoculars* Tim! Meet your new brother. *in slow motion* But this baby *slaps* has other plans. We babies are having a crisis, babies aren't getting as much love as we used to. Behold our mortal enemy! Puppies! Awww! No! That's exactly the problem! \ud83c\udfb5Welcome to my house.\ud83c\udfb5 Have you learned anything? A, B, C, D- No, what have you learned about puppies? *laughing* Hehe! Puppies! No, Jimbo! Puppies are evil! Staci, read back the notes. I can't read. What's it say? *rattle shaking* Boss, parents!! Ohhh! It's like their having their own little meeting. *babies laughing* Who wants dessert? This is so humiliating... You've got the right baby for this job, I know how important this mission is to the company. Mission? You can talk! Aaah! Poop duty!! Ahh! *toy gun firing* I've got to deal with the K.I.D Who are you? I'm on a mission. There's not enough love to go around. My job is to find out why. Now give me a double espresso, and see if there's some place around here with decent sushi. I'd kill for a spicy tuna roll around about now. Mom! Dad! The baby can talk! This is war! *toy gun firing* *explosion* Oh, yeah! Let go you little... Look, the kids are finally getting along. That's nice. *clanks* If I don't succeed with this mission, I will live here forever with you! Okay, I will help you. But just to get rid of you. Deal! Here comes the choo-choo train. No! No! They're watching. Choo-choo. Okay... Choo-choo on that. How do we get past the guard? I've never been so humiliated in my life! *farts* - I don't wear nautical!\n- You're putting this thing on! - What have you done to me?\n- What's all the racket? Isn't he adorable? Ohhhh! I've got one for you too! - What??\n- Bummer. - What??\n- Bummer. DreamWorks\nTHE\nBOSS\nBABY"
        }
    ],
    "console_gaming": [],
    "streaming": [],
    "reaction": [],
    "prank": [],
    "challenge": [],
    "short_film": [],
    "book_review": [],
    "literature": [],
    "instrumental": [],
    "cover_music": [],
    "original_music": [],
    "movie_review": [],
    "tv_review": [],
    "tutorial": [
        {
            "video_id": "rfscVS0vtbw",
            "title": "Learn Python - Full Course for Beginners [Tutorial]",
            "description": "This course will give you a full introduction into all of the core concepts in python. Follow along with the videos and you'll be a ...",
            "published_at": "2018-07-11T18:00:42Z",
            "channel_name": "freeCodeCamp",
            "transcript": "In this course, I'm going to teach you everything you need to know to get started programming in Python. Now, Python is one of the most popular programming languages out there. And it's by far one of the most sought after for jobs. And so if you're trying to get a job or you're trying to, you know, automate your life, or you're trying to write awesome scripts to do a bunch of different things, then Python's for you. Honestly, more and more developers every day are moving their projects over to Python because it's such a powerful and it's such an easy to use language. A lot of programming languages out there just aren't very beginner friendly. There's a lot of syntax. There's a lot of like little things that if you get wrong, the program will yell at you. Python is the complete opposite of that. You basically just type out what you want to do and Python does it. It's that simple. There's not a whole lot of syntax to learn. The learning curve is literally zero. You jump in, you can start writing your first program in seconds. In this course, I'm going to teach you guys everything you need to know to get started in Python. I designed this course, especially for Python. And each lesson has been specially designed with examples that will help you along the way with so many people starting to learn Python. The question isn't, why should you learn Python? The question is, why shouldn't you? And I think for a lot of people, the reason they might not want to learn Python is because they're intimidated or they're afraid that it's going to be too hard. Trust me, I am going to hold your hand through this entire course. We're going to talk about all the core concepts in Python. We're going to look at everything you need to know to start programming in Python and start being confident and start writing scripts and start writing programs that are awesome and doing cool things in your life. Anyway, I'm super pumped to be teaching you guys Python. I can't wait to get started in this course. And I hope you guys stick around and follow along with the course and learn this amazing programming language. In this tutorial, I'm going to show you guys how to install Python onto your computer. And we're also going to install a text editor that we can use to write our Python programs in. So the first order of business is to actually install Python on your computer. So what we want to do is head over to our web browser. And you want to go over here to this page, it's just www.python.org forward slash downloads. And on this page, there's going to be two buttons down here. And it's just going to say download Python 3.6.3. And at least that's the version that I have right now or download Python 2.7.1.4. So here's the thing about Python, there's actually two major versions of Python that are in use currently. There's Python two, and there's Python three. So you can see over here, this is like 2.7.1.4. Basically, any Python two version we would just refer to as like Python two. And here's like the latest Python three version. And so there's these two versions that you can download. And the first thing we have to decide is which version do we want to download. And here's the basic difference, Python two is a legacy version of Python, which basically means that it's like an old version, and it's not being like actively maintained or supported like officially by Python anymore. Python three is like the future of Python. It's like the newest version. It's the one that's getting actively maintained and supported. And so there's pros and cons to picking either one. A lot of people will say like Python two has been around longer. And so there's more like libraries, there's basically just more Python code written in Python two. So therefore, like there's a few more things that you can do in Python two, then you can do in Python three. But then again, Python two is not supported. And you know, five or 10 years from now, probably no one's going to be using it. Python three, like I said, is like the future of Python. It's the newest version. It's the one that, you know, is sort of being maintained going forward. So for the purposes of this tutorial, I'm going to be teaching you guys Python three. So we're going to want to download Python three. Now here's the thing, like, if you learn Python three, or you learn Python two, the differences aren't very big. There are a few differences in like some syntax and just some, you know, little things here and there. But if you learn Python three, you'll be able to jump right in and code in Python two as well. Don't let anyone, you know, tell you that you have to learn one or the other, we're going to learn Python three just because it's I think probably the best for a beginner to learn. And so that's the one that we want to download. So I'm just going to click download Python three. And we're going to go ahead and download this version. And when that's done downloading, I'm just going to head down to my downloads folder. And you'll see here, we just have this file, I'm just going to double click. And we get this like Python installer. So I'm just going to click through here. And we'll be able to install Python three on our computer. All right, when that's done installing, we can just close out of this and we should be good to go. So now we have Python three installed on our computer. The next step is we need to choose a text editor. So we're going to be writing a bunch of code. So we're going to need some, you know, environment or some program that we can write all that code in. And really, you can write Python in any text editor, you could write it in like notepad or text edit, it doesn't really matter. But there are special text editors that are designed just for writing Python code. And these are called IDEs. And that stands for integrated development environment. It's basically just a special environment where we can, you know, run and execute our Python code. And it'll, you know, basically, like tell us how we're doing. So if we're, you know, if we write something that's wrong, or we have errors, it'll kind of point us in the right direction of what we need to do to fix that stuff. So in this course, we're going to be using an IDE. And one of my favorites, and one of the most popular IDEs for Python is called pie charm. So I'm over here on this website, it's called jetbrains.com forward slash pie charm. And this is the IDE that we're going to be using in this course. So I'm just going to come over here and click this big download now button. And we'll go ahead and download this pie charm program. Alright, so I'm getting this page over here. You can see there's two versions of pie charm. One is a professional version, and that one's like paid, so you have to pay for it. But then there's this community version down here, and that's free and open source. So I'm just going to download this one. And this should have everything we need to get started using Python. Alright, when that finishes downloading, I'm just going to pull that up in my downloads folder. And again, we can just sort of run this guy. And I'm on a Mac. So I'm going to have to drag it over to my applications folder. Alright, so we now have pie charm. And we have Python three installed on our computer. So we're ready to start programming in Python. And this tutorial, we're going to create our first Python program. And we're going to be able to run it and see how everything works. The first thing I want to do is open up pie charm. So pie charm was the IDE, the integrated development environment that we downloaded in the last tutorial. So I'm just going to go ahead and search for it on my computer. And I can just open it up. And when we first open up pie charm, we should basically just get a window prompting us to create a project. So you can see that down here. Actually, the first thing I want to do though is come over here to configure. And I'm just going to click on preferences. And I actually want to change the appearance. So I'm going to go ahead and give this a theme. So I just went over here to appearance and behavior, appearance. And I'm going to change the theme to dark. Just because I think it's a little bit easier to use and look at. But you don't have to do that if you don't want to. And so down here, I'm just going to click create new project. And it's going to give us this little window right here. So I can just name my project. And I'm just going to name this draft. And then there's this other option down here where it says interpreter. Now, what we want to select is Python version three. So if I click down here, you'll notice that there's a couple different options. So I'm on a Mac computer. And by default, Mac has Python version two installed on it. If you're on a Windows machine, I'm not sure if it does. But in this tutorial, we're going to be using Python three. So you want to make sure that you have Python three selected as the interpreter. Otherwise, you might not be able to fully follow along with what we're doing in this video. So now I'm just going to come down here and click create. And this is going to go ahead and create our project for us. All right, so now we have our Python project up and running. And I want to show you guys how we can create our first Python program. So over here in this draft folder, and this is just that project that we created, I'm just going to right click and I'm going to say new. And I'm going to come down and click Python file. So we want to create a new Python file, this will be our first Python program. And I can just give this a name. So why don't we just call this app? And I'm just going to click okay. All right, so now we have our first Python file open. And we can just start typing in some Python. So I want to show you guys just a very basic Python program. And this is just going to be a hello world program. So we're just going to print something out onto the screen. So what I want to do is I want to type out PRINT print. And I want to type in open and closed parentheses. Now inside of this parentheses, we can make some quotation marks. And inside of the quotation marks, I'm just going to type out hello world. So this is like a very basic Python program. And what this is going to do is it's just going to print out hello world onto the screen. And so now what I can do is I can actually run this file and we're actually getting a little error here. It wants us to create a new line at the end of the file. And so now in order to run our Python program, I'm just going to come up here to the top. And I'm just going to click run. And we'll click this run button right here. And now we'll see what happens. So it's asking me what I want to run. I can just click app. And down here at the bottom, you'll notice that we have this text that just got printed out hello world. And so whatever I print, or whatever I put inside of this print statement is going to get printed out down below in the console. So as long as you're getting that print statement to work, then you've actually written your first Python program. And as we go through forward in the course, we're going to be writing all sorts of awesome Python programs. And we're going to be doing all sorts of cool stuff. In this tutorial, I want to talk to you about writing a basic Python program. So we're going to write just a very simple Python program. We're going to look at how we can go ahead and write our programs, we're going to talk about how our programs are getting executed by Python. And we're also going to draw out a little shape onto the screen. So this is going to be pretty cool. I'm excited to talk to you guys about just the bare basics of Python, and really just sort of give you an introduction. So over here, we have our basic text editor. And so any of the Python code that I write inside of this file is actually going to get executed by Python. So this Python file has a bunch of Python code inside of it. And basically what we're doing when we're programming in Python is we're just giving the computer a set of instructions. Right, that's really what programming is, it's just like we're specifying a set of instructions. And the computer is going to go off and execute those instructions that we give it. And so the more complex the instructions we give to the computer, the more complex the tasks the computer can carry out. So I want to show you guys how we can use some Python instructions or some Python code in order to draw out a shape onto the screen. So I'm actually going to draw out a little triangle. So over here, we can actually print something out onto the screen and Python using something called print statements. So I can just type out print. And inside of these parentheses, I can just type some quotation marks and inside the quotation marks, we can put whatever we want to print out onto the screen. So I'm going to copy this and I'm actually going to make a few of these little print statements. And we're going to actually draw a shape. So we're going to draw like a triangle type shape. So down here, I'm just going to draw a forward slash. And then up here, I'll make a space and we'll do another forward slash. Here, we'll make two spaces, we'll do another forward slash. And over here, we're going to make three spaces and a forward slash. And now I'm going to draw like vertical bars going all the way down. And actually, we can do some underscores here as well. That'd be kind of cool. All right, so now we have our triangle looking shape and you can see it looks kind of like a right triangle. So I can save my file. And I can either come up here to run and click run app. Or if you're using PyCharm, you can also just come over here and click this play button. And when I click the play button, I want you to notice what happens down here. So down here, we have this little window and this is called the console. And basically, the console is just a place where Python is going to output some information. So when we use this print statement, we're basically telling Python like, Hey, can you print something out onto the console? So there's a lot of situations where we're going to want to see what's going on in our code. And we can use that print statement and print things out to the console. And we can basically like have a little window into what our program is doing. In our case, we're just going to be printing out this triangle onto the console. So I'm going to come over here and click this play button. And you'll see down here, we're actually printing out that triangle. So mission accomplished, we were able to print out our shape. So I could really draw any shape I wanted as long as I was able to specify it inside of these print statements. So essentially, what Python's doing when I click that play button, is it's going into this file and it's looking at all of these instructions in order. So the first thing it does is it goes to this instruction, and it says, okay, they want me to draw out these like little forward slash in this vertical bar onto the screen. Once it does that, it goes down to this instruction, it says, okay, they want me to print something out again. When it prints that out, it goes down to this instruction, etc. So Python is actually going to execute the lines of code that we write in order. So the order in which I write the instructions matters a lot. So for example, if I was to take this last line here, and put it up here at the top. Now when I save the file, instead of just drawing out that triangle, it's going to draw out this little upside down bottom thing at the top, and then the rest of the triangle down here. So the order of the instructions actually matters a lot. So this is basically how your Python programs are going to go. As we go through this course, we're going to learn more and more of these little lines. So here, we're just using this little print function, basically, it just prints something out onto the screen. There's a bunch of little things like this that we can learn as we go through, we'll learn more and more instructions that we can give to the computer. But in this lesson, I just want to kind of show you guys the basics, right? We can essentially just define these little instructions for the computer, and the computer will execute them in order. In this tutorial, I want to talk to you guys about using variables in Python. Now in Python, you're going to be dealing with a lot of data. So a lot of times in our program, we're going to be working with all types of information and data and values. And sometimes that data can be difficult to manage. So in Python, we have this thing called a variable. And it's basically just a container, where we can store certain data values. And when we use a variable, when we put those data values inside containers, it makes it a lot easier for us to work with and manage all of the different data inside of our programs. So variables are extremely helpful. And it's sort of like a core topic in Python that you're really going to want to know in master. So in this tutorial, I'm going to teach you guys everything you need to know to get started with variables, we're going to look at what they are, why they're useful, and we'll look at the different types of variables and the different types of data that we can store inside of variables. But over here in my Python file, I just have a very simple program. And it's basically just printing some text out onto the screen. And so this is actually a little story that I wrote. It says there once was a man named George, he was 70 years old. He really liked the name George, but didn't like being 70. So this is a valid Python program. I could go ahead and run this program. And you'll see down here in the console, everything prints out and it looks great. So we have an awesome little Python program here. But let's say that inside of our story, I wanted to change the character's name. So instead of naming the character George, let's say I wanted to name the character John. Well, I'm going to have to go through and I'm going to have to manually change the name George to the name John at every place inside of this story where it's mentioned. So I'm going to have to go over here and I'll say, okay, John, I'm going to have to manually change that. And then, okay, down here, we're gonna have to again, manually type in John and change it to John. So in order to change the character's name, I had to manually go in and change it in both places. And now let's say, okay, maybe we want to change the character's name age also. So in addition to changing the name, we also want to change the age, let's make them a little bit younger. So why don't we say John is going to be 35. And so you'll see here, I had to come here and manually change the age and then come down here and manually change it again. Right. And now that we changed it, like it's going to work, it's going to be updated in our program. But you'll notice that in order to make that change, like I had to look through the entire program, find it where that value was and change it. And this was only with four lines of the story. Imagine if I had a story that was like, thousands of lines long. And we mentioned the character's name and age, like hundreds of times. I mean, I'd have to look through each one of those lines and manually change the character's name. And that is not a very good way for us to do this. And it's really not a good way for us to manage the data in our program, right, the character's name and the age. And so we can actually use a variable in order to store the character's name and the character's age. And when we use that variable, it'll make it a lot easier for us to put the character's name and age inside of our little program here. So I'm going to show you guys how we can create a variable for the character's name and age. And I'm just going to go up here above this print statement. And up here, I want to create a variable. So when we create a variable in Python, we actually need to give Python a couple pieces of information. The first piece of information we need to give Python is the name of the variable. So I need to actually assign a name to this container where we're going to be storing information. And so all I have to do is just type out the name of the variable that I want to create. So I'm going to create a variable called character name. So I'm just going to say character. And I'm going to say underscore name. And so generally, when you're creating a name for a variable in Python, you want to separate different words with an underscore. So I have two words here, and I'm separating them with an underscore. And now what I need to do is I need to put a value inside of this variable. So basically, what I can do is I can just say equals, and over here, I can type a value. So I'm just going to type out the character's name inside of quotation marks. So we're just going to type out john. So now we have a variable for the character's name. And below this character name variable, I want to create another variable called character age. So we're just going to type out character underscore age. And I'm going to set this equal to the character's age, which is 35. So we now have two variables, one representing the character's name and one representing the character's age. So what I can do now is I can replace the character's name inside of the story with this variable. And I'm going to show you guys how to do that. So if we want to put a variable inside of this print statement, I'm actually going to have to do a couple of things. The first thing I'm going to have to do is end off this text in here. So I'm going to have to put a quotation marks here at the end. And you can see I'm basically wrapping this whole thing into a single like quoted line. And now I also have this text over here at the end. So I'm going to have to put a quotation mark here. So now I have a bunch of text here in quotation marks. And then I also have text over here in quotation marks. Now inside of here, instead of saying the character's name, I want to refer to that character name variable. So I'm just going to say plus character underscore name. And I want to say another plus sign. So I basically am saying I want to print out all of this text, plus the value that's stored inside of character name, plus all of this text. And what this will do is actually print out the character's name. We print this. So I'm going to go ahead and run this program. And you'll see down here, and actually let me put a space over here. And we'll run it again. So you can see down here, we still are printing out there once was a man named John. And so what Python is doing is when it executes this line of code, it's coming over here and it's seeing, okay, they want to print out the value inside of character name. So it Python is going to go up here, it's going to get the value. And it's going to insert it inside of there. So I can basically do this for every instance of the character name in my file. So I can, you know, I'll just copy this guy right here. And I can just paste it down here where the character's name is. So I'll paste this. And you can see now we're doing exactly the same thing that we did up there. I can also do this for the character's age. So I'm going to come down here and I'll paste in what we just paste it in. And I'm going to change this instead of character name, we'll change it to character age. And I'm going to do this in one more spot. So we're going to do this over here where we're mentioning the age. And again, I'll just change this to character age. And so now when I run this program, it's going to print out the same story that we were printing out before. But now I don't actually have to type in the character's name and the character's age. I can just refer to this variable. And the cool thing about variables is if I wanted to change the character's name, now all I have to do is change it up here. So I could change the character's name to like Tom or something. And we could also change their age. So I could change the age to be like 50. And now that's going to automatically update throughout our entire story. So when I click this play button, you'll see now we're using the name Tom. And he's 50 years old. So that's where variables can come in handy. And this can be a really awesome way to control and manage the data that's inside of our programs. With variables, you can also modify their values. So for example, let's say that halfway through the story, I wanted to change the character's name. Well, I can just make some new lines over here. And down here, I can actually assign a new value to one of these variables. So I could say like character underscore name. And in order to give it a different value, all I have to do is just say equals, and we'll give it a different value. So let's say halfway through the story, we want to change the character's name to Mike. Well, now when I run on my program, you'll see here in the first part of the story, it says there once was a man named Tom. And in the second part of the story, it's referring to the name as Mike. So I actually updated the variable inside of my program over here. And that's a really awesome way. You know, a lot of times in these programs, you're going to want to be modifying the values of variables. So you can do it just like that. So finally, I want to talk to you guys about the different types of data that we can store inside of these variables. So over here, I have the character name and the character age. And I'm actually storing what are called strings. So a string is basically just plain text, right? So the name Tom, that's just plain text. Down here, these guys are strings as well. So there's a data type in Python called a string, and it's just basically going to store plain text. So, you know, any text that you would have like in a story, or you know, someone's name, you can store inside of a string. There's also another type of data that we can store inside of Python, which is numbers. So in addition to storing text, we can also store numbers. So if I wanted to store a number, for example, let's say we want to store the character age instead of inside of a string, we could store it inside of a number. So I could just type out 50. And when we're storing a number, we don't need these quotation marks, you only need that quotation mark when you're storing a string. So if I want to store a number, I can just write it out like this. And in addition to using whole numbers, I could also use decimal numbers. So I could say like 50.5678213. And Python's going to be able to store that number as well. So you can store all different types of numbers. And we can also store what's called a Boolean value. And a Boolean value is essentially a true or a false value. And there's a lot of instances in programming where we're going to want to represent true or false data. For example, I could have a variable called like is mail. And this would tell me whether or not someone was a male. And in my case, it would be true because I'm a guy, right? So I can actually this needs to be capital. So I could sort of value of either true or false. And actually, if we were naming this in Python, we want to use an underscore. So I would say is underscore mail. And this can be either true or false. So true or false values is maybe not something that you're used to dealing with like in the real world. But in programming, we're going to be using true or false values all the time. They're super important. So like I said, there's three basic types of data that we can work with in Python. There's strings, which is just like plain text numbers, which would be like either decimal numbers or whole numbers like this. And there's true or false values. And these are the basic types of data. I mean, there's a bunch of other types of data that we can use. But I would say 99% of the time as a new user and a new programmer to Python, you're just going to be dealing with these three types of data. So those are the basics of the data and also with variables. And you're going to be using variables all the time in Python. So you definitely want to practice up and get comfortable using them. In this tutorial, I want to talk to you guys about working with strings in Python. Now one of the most common types of data that we're going to be working with in Python is going to be strings. And strings are basically just plain text. So any text that we want to have inside of our program, we can store inside of a string. So I want to talk to you guys about all the cool things we can do with strings. And we're basically just going to get a full introduction into why strings are awesome. So over here, I'm just going to actually print out a string. So I'm just going to say print and inside of these parentheses, I can type out a string. In order to create a string, I need to use quotation marks. So I can make an open and close quotation marks just like that. Now inside of the quotation mark, I can put whatever text I want the string to have. So we could say like, draft Academy. And so now we have a string with the text draft Academy inside of it. So if I run my program, now down here, we're going to print out draft Academy, as you can see. And when we have these strings, there's actually a bunch of cool things that we can do with them. So one thing I could do would be to create a new line inside of the string. So if I want it, I can come over here, and I could say backslash n. And you can see it got highlighted in a different color. And what this is going to do is it's actually going to insert a new line into the string. So now it's going to say draft on one line and Academy on another line. So I'm going to click play. And you'll see down here, we just get draft Academy. In addition to the backslash n, I could also use a backslash quotation mark. So if I wanted to put a quotation mark inside of my string, I can't just put a quotation mark like that, because Python is going to think that I'm trying to end this string. So if I want to include a quotation mark, I can just use this special backslash character. And that's called the escape character. And it basically just tells Python that whatever character comes after it, we want to render literally. So when I say backslash quotation mark, it basically means like, Hey, Python, I want to print out a quotation mark. And so now we'll be able to print out a quotation mark right there. I can also use this to print out a backslash. So if I needed to print out a backslash, I could say backslash. And it'll just print out a normal backslash now. So you can see just like that. So if you want, you can use that backslash to make new lines or print out quotation marks, or you can just use it as a normal backslash. In addition to just typing out a string here, I could also create a string variable. So I could come down here up here, and we can create a variable and we'll just call it phrase. And I'm going to set it equal to draft academy. So I can store this string value inside of a variable called phrase. And then when I want to print out that variable, or I want to access that string variable, I can just type the name of the variable. And you'll see that it's going to print out the value that was stored inside of it. I can also use something called concatenation. And concatenation is basically the process of taking a string and appending another string onto it. So I could come over here and I could say phrase, and I can say plus. And now I can add in another string. So I could say like, is cool. And now this is going to say draft academy is cool. So I'm basically appending another string onto another one, they call that concatenation. And so in addition to doing all that stuff, we can also use special things called functions. And a function is basically just a little block of code that we can run. And it will perform a specific operation for us. So we can use functions to modify our strings. And we can also use functions to get information about our strings. So I'm going to show you guys a couple common functions we can use with these strings. And they're actually going to do awesome stuff. So in order to access one of these functions, I can just say phrase, and then I can say dot. And I'm going to show you guys a function that we can use to convert this string entirely into lower case. So I could just say phrase dot lower. And I'm going to want to type an open and close parentheses. And this will take this phrase, it'll take my string and it'll convert it to lowercase. So you can see now we just have draft academy down here, but it's entirely in lowercase. I could also do the same thing for uppercase. So I could say phrase dot upper. And this will convert the entire string into uppercase. You can see now it's entirely uppercase. So in addition to converting the string into uppercase and lowercase, I could also check to see if a string is entirely uppercase or entirely lowercase. So for example, I could say phrase dot is upper. And this is going to give me back a true or a false value. So it's going to be true. If the string is entirely uppercase, or false, if it's not. And you can see here, we're getting a false value because this is an uppercase. I can also use these functions in combination with each other. So for example, I could say phrase dot upper, and then parentheses. And then after this, I could say dot is upper. And now what it's going to do is it's going to run this upper function, it's going to convert it into uppercase. And then it's going to run this is upper function right after that. And you'll see now we're going to get a true value back because it will have converted the whole thing into uppercase. So you can see now we're getting a true value. So you can use these functions one after another, it can be really useful. And there's a few other ones that I want to show you. So we can also figure out the length of this string. So if I wanted to figure out how many characters were inside of this string, I could just say LEN. And I'm actually going to make an open parentheses. And I'm going to make a closed parentheses. So I'm essentially saying LEN. And this is another function, it's the length function. And inside of this LEN function, I'm actually passing this phrase variable, I'm basically giving the length function this, and it's going to spit out a number. So it'll tell me how many characters are inside of this string. And so you can see here we get 15 because there's 15 characters inside of draft academy. So that's how we can get the length of a string. And that's going to be really useful as we go forward and Python, we can also get individual characters inside of a string. So imagine if I wanted to just grab one of these characters, like imagine if I wanted to figure out what the first character in this string is, we can actually use an open and closed square bracket, just like that. And in here, I can specify the index of the character that I want to grab. So if I wanted to grab the first character in this string, I can put in a zero. So if I say phrase square bracket zero, this is going to give me that capital G. And you can see down here, that's what gets printed out. Now I want to point something out in Python, when we're working with strings, a string gets indexed starting with zero. So you'll notice that in order to access this G, I had to put a zero in here. And that's because in Python, when we use indexes on a string, we start with zero. So if Python is counting the characters, or it's indexing the characters in a string, it's going to start with zero. So it's going to say G is zero, i is one, r is two, a is three. So we would say that G is at position zero in the string, i is at position one, r is at position two, a is at position three, etc. So we start counting at zero. So if I wanted to access the first character in the string, this G, I have to say phrase zero, and that's just a special thing in Python, and actually most programming languages do that. So they'll start with zero. So for example, if I wanted to access this a, I'm going to have to put zero 123. So if I put three inside of here, now we'll be able to access that first a, as you can see, we get an a right here. So this is actually really useful being able to grab a specific character inside of a string, and you're going to be using that a lot as we go forward in Python, there's also another really awesome function that we can use and it's called the index function. And basically what the index function will do is it'll tell us where a specific character or string is located inside of our string. So I could say phrase dot index. And I can actually give this a value. So sometimes when we use these functions in Python, we can actually give them information. So I can give this a value. And we would call this passing a parameter. So I would call a value that I would give to a function a parameter, and you'll hear that word a lot. So for example, I could say inside of here capital G. And now this is going to return the index of the capital G inside of our string. So it should give us back a zero because G is at the zero of index. And you'll see down here that we get a zero because that's where G is. So for example, if I put an a inside of here, like a lowercase a, it should give me 0123, because that's where the first a is inside of this string. So I can click the play button. And you'll see it's giving us a three, you can also put actual words in here. So for example, I could put like Academy in here, or I could even just put like a C A D. And this is going to tell me where this starts inside of my string. So when I click play, it's going to give me an eight because that's where Academy starts right 012345678. If I put something in here that wasn't in the string, so for example, if I put a Z in here, that's not in here, it's actually going to throw an error. So when I play this, you'll see that we get this error down here because Z is not found inside of our program. So that index function, again, can be really useful. And we'll be using that a lot. There's also one more that I want to show you, which is called replace. So we can say phrase dot replace. And in here, I can actually give this to parameters. So I can give this replace function to values that it can use. And the first thing I want to you to give it is what I want to replace. So for example, I could say draft. And then I'm going to put a comma in here. And I want to put in here what I want to replace draft with. So I could just say like elephant. And now instead of saying draft Academy, this is going to print out elephant Academy. So you can see down here, it just says elephant Academy. So this replace function can be really awesome because we can replace certain words or even certain letters inside of our strings with other ones. So those are just some basic ways that we can work with strings inside of Python. And there's a lot of these different functions that we can use with strings. These are some of the most common the ones that I just showed you right now. But if you just do a Google search, you can find all sorts of Python functions that you can try out and use and you know, see what they do. But you definitely want to get comfortable working with strings in Python, because you're going to be working with them a lot. In this tutorial, I want to talk to you about working with numbers in Python. Numbers are one of the most common data types in Python. And any Python program you write is most likely going to be dealing with numbers at some point. So I want to talk to you guys about just the basics of using numbers, we're going to talk about the different types of numbers that we can represent in Python. And I also want to show you guys some awesome functions that we can use with numbers. So we can do certain like mathematical operations, we can do some awesome things with numbers. I'm going to show you guys all of that in this video, it's going to be awesome. So first thing we can do is we can actually just like print out a number. So if I want to write a number in Python, it's really easy. I basically just write the number. So I could say like print two. And this is just going to print the number two out onto the screen. So I can use a whole number like this. I could also use a decimal number. So I could say like 2.0987. And Python is going to be just fine with that. We'll be able to print that out under the screen as well. I can also make numbers negative. So I could make this 2.0987 a negative number. And Python will be able to handle that just fine too. And Python, we can also use basic arithmetic. So I could do things like addition subtraction multiplication. So I could say like three plus four. And now this is going to print this out. Or why don't we say like three plus 4.5. And this will be able to print out the answer. So we get 7.5. And we can do addition, we can do subtraction, we can do division, or we could do like multiplication as well. So you can pretty much do whatever you want inside of Python. And if you want to make more complex mathematical equations, we can also use things to specify order of operations. So I could use parentheses. So for example, if I said three times four plus five, what Python's going to do is it's going to multiply three and four together. So it's going to be 12. And then we'll add five to that. So we should get 17. But let's say that we wanted to change up the order, right? I could actually put a parentheses around four and five. And now it's going to add them first. So it'll add four and five. So we'll get nine, and we'll multiply that times three. So we should end up with 27. So you can see we can use those parentheses to specify order of operations. So I could make like a very complex, a little equation here just by using numbers and parentheses. We can also use one other operation, which is called the modulus operator. So I could say like 10, and use this percent sign, three. And this is actually read 10 mod three. And basically what this is going to do is it's going to take the first number divided by the second number, and it's going to spit out the remainder. So it's basically going to say, okay, 10 divided by three, that's going to be three with a remainder of one. And so this is going to give us the remainder. And you'll see down here, we get one, because that's the remainder of 10 divided by three. And that modulus operator can come in handy quite a bit. We can also store these numbers inside of variables. So we can store them inside of these variable containers. So I could come over here, and I could create a variable called like my underscore num. And we'll just store a value of let's say like five in here. And so I could come down here, and I can just print out my underscore num. And we'll be able to print that number out to the screen just fine. So in addition to doing things like a basic arithmetic, we can also do some other stuff. So one thing I could do is I could actually convert this number into a string. So if I wanted to convert this number into a string, I can just say str, and I can put the number that I want to convert inside of these parentheses. And so what's going to happen now is this number is going to be converted into a string. So when I click the run button, you'll see it's just printing out five, but now instead of being a number, this is actually a string. And this is going to come in handy when you want to print out numbers alongside strings. So I can come over here and I can say like, my favorite number, and we'll be able to print this number along with this string. So I can click play. And it says five my favorite number. If I was to get rid of this string right here, and I wasn't converting the number into a string, now Python is going to have a problem with this. It's not going to allow us to do that. You can see we get an error. So anytime you want to print out a number next to a string, you got to make sure that you use that little string function. So there's a bunch of other stuff that we can do with numbers. And a lot of times in Python, you're going to want to be using specific, like more advanced math operators. So there's a bunch of different math functions that we can use on our numbers. And a function is basically just like a little collection of code that does something. So a function could perform an operation like a mathematical operation on our number. It could also give us information about our number. So I'm going to show you guys some of the most common functions that you'll be using in Python related to numbers. The first one is called ABS, and it stands for absolute value. So we can get the absolute value of a number. And so over here, I'm just going to make this variable negative five. And basically, I can just say ABS, and I can make an open and closed parentheses over here. And this is going to give me the absolute value of this number up here. So when I click the play button, you'll see it's just giving us five, because five is the absolute value of negative five. I can use a few other functions. There's another one which is called pow. It's so it's just POW. And I'm actually not going to use this variable. We just use a normal number. And this function is going to allow us to pass it two pieces of information. So I can give this function two pieces of information. The first is going to be like a number. And the second is going to be the power that I want to take that number to. So I could say like three comma two. And this is basically just going to be three raised to the power of two. So it's just going to be three squared. So we should get nine down here. You can see that we do. So I could pass in like, you know, some crazy number, like we could pass in a four and we could raise it to the power of six. And so we should get like a pretty big number here. And you can see we get 4096. So this pow function is really useful for taking numbers to specific powers. So in addition to using this pow function, we can also use another function which is called max. So I can say max. And what this is going to do is it's basically going to return the larger of the two numbers that we pass into it. So right now I'm giving this a four and a six. And this should tell us which number is higher. So over here, it's just printing out six because that's the bigger number. I can also use another function called min. And this is going to do the opposite. So now instead of printing out the max number, it's going to print out the smallest number. And it's going to print out four down here, as you can see, another cool function is called the round function. And this is going to allow us to round a number. So it's just going to follow like standard rounding rules. So if I said like 3.2 inside of here, now it's going to round it down to just normal three. But if I said like 3.7, it's going to round it up to four. So that'll allow you to round a number. So there's a few other functions that I want to show you guys, but in order to get access to them, I'm actually going to have to do something called importing. And in Python, we can actually import external code into our files. And so if I want to access these specific math functions, I have to import something called Python math. So I can just say from up here, math, import, and this star. And basically, what this is going to do is it's going to go out and it's going to grab a bunch of different math functions that we can use. So I already showed you guys a few of these different math functions, but there's actually a bunch more. And in order to access them, we're going to need to include this line of code inside of our file. So once we have that, now I can access a few others. So there's another function which is called the floor method. And it's just FLOR. And what this will do is it'll basically just grab the lowest number. So it's essentially just going to chop off this decimal point. And you can see over here, now we get a three, because we're using that floor function, there's also another one called seal. And that's just going to do the exact opposite. So that's just going to round the number up no matter what. So no matter what, we'll always get four with we have a three point whatever here. And there's another one which is called square root. So it's just SQRT. And essentially, this is just going to return the square root of a number. So I could say like 36. And now we should get six back. So those are awesome, very interesting functions. And inside of this math module, so we would call this a module. And you don't have to worry too much about what that is right now. Just know that when we put this line of code into our program, it gives us access to a lot more math function. So it basically allows us to do a lot more things with math inside of our program. And there's a bunch of different math functions in Python. And if you want, you can basically just go online and search for different math functions. I showed you guys a few here. And I would say the ones that we looked at here are probably the most commonly used, but there's a bunch more. And like I said, you know, there's tons of documentation on all this stuff. So you can just look up, you know, math functions in Python. And there's going to be tons and tons like lists of these things that you can use inside of your programs to perform different math operations. But for now, that's just been a little bit about using numbers a little bit about doing, you know, certain math operations and using functions with those numbers. In this tutorial, I'm going to show you how to get input from a user. So we're basically going to allow a user to input information into our program. And I'm actually going to take the information that the user inputs, I'm going to store it inside of a variable. And then we're going to be able to do something with that variable. So I want to show you guys how we can actually go about getting input from someone. And down here in my Python file, all I have to do to get input from someone is I just have to type out input, and then an open and closed parentheses. And what this is basically going to do is it's going to tell Python like, hey, we want to get input from a user and Python will allow the user to type in some information. And inside of these parentheses, we can actually type a prompt. And so generally, when we want the user to enter in some information, we want to tell them what we want them to enter. And that's what we can put inside of here. So I'm just going to say, enter your name. So we're actually going to create a little Python app, which is going to allow the user to enter in their name. And then we'll store the name inside of a variable, and then we'll basically just say hi to the user. So we'll say like, hi, and then whatever the name they entered was. So what I want to do is I actually want to store whatever the user inputted into our program inside of a variable. So I can actually go over here, and I can create a variable, I could just call it name. And I could set this variable equal to input. So what I'm doing now is I'm taking the value that the user inputs, and I'm storing it inside of this variable container called name. And so now I have access to whatever they entered in. So what we can do is we can say print. And inside of the parentheses, I can just print out hello. And then I'm just going to add on to this name. And actually, why don't we put an exclamation point? So essentially, we're getting a name from the user, we're storing it inside of the name variable. And I'm printing it out onto the screen. So I'm going to go ahead and play this. And when we run the program, you'll notice down here, Python is giving us this little prompt. So it's saying enter your name. Now in here, I can actually type in a value. So I can type in Mike. And then I can just hit enter. And Python's going to go ahead store this value inside of that variable. And then it's going to print out hello, Mike. And so this is kind of cool. And actually, what we could do is we could prompt the user to enter in more than one piece of information. So I could actually copy this line of code. And I'm going to paste it below here. And why don't we have the user enter in another variable? So we could have them enter in, for example, their age. And over here, we just want to say enter your age. And so now we're able to get two pieces of information from the user. And I could say hello, name. And then I can say, you are, and I'll print out their age. So I'm just going to print age. So now I'm basically able to get both of these pieces of information from the user, I can get their name. And I can get their age. So when we run this program, I can type in both of those pieces of information. So to say, answer your name. So we could just make up a name like john, and then enter the age, let's say john is 25. And now it's going to say, Hello, john, you are 25. So the program is able to get input from the user. And then it's able to use that information in order to say hi to the user and tell them how old they are. And so getting input from the user is a great way to make your programs more interactive. And here, we're just scratching the surface, right? We're just basically getting to, you know, a piece of information from the user, but you can use these inputs to do awesome things in Python. And as we go through this course, you're going to see some really cool things that we can do with these inputs. In this tutorial, I'm going to show you how to build a very basic calculator in Python, we're basically going to build a calculator where we'll get two numbers from a user, and then we'll add those numbers together and print the answer out onto the screen. So let's look at some practice in getting input from users. And we'll also talk about getting numbers from users as opposed to just strings. So I'm really excited to get started on this calculator. The first thing we want to do is create two variables and inside of those variables, we want to store the two numbers that the user wants to add together. So down here, I'm just going to say, num one. And that's what we'll call our first variable is equal to. And now I need to get input from the user. So I'm going to say input. And inside these parentheses, I'm going to say, enter a number. And now I basically want to do the same exact thing, but for the second number. So we'll paste this guy down here. And I'm just going to say num two. And then we'll just say, enter another number. So now we're able to store the user's input inside of these two variables. So now all I want to do is just print out the result. So I'm actually going to create a variable called result. So I'm just going to say result is equal to, and basically, we just want to add these two numbers together. So I'm going to say num one plus num two. And now all we have to do is just print out the result. So I'm just going to print result. So we basically have our entire program written out here. And this will allow us to enter in two numbers, and then we'll add them together and print out the answer. So I'm going to click play. And down here, we can enter our number. So I'm going to enter the first number, we'll say five. And I'm going to enter my second number. So let's say 8.0, or let's say 8.3. So now we should print out the answer. But if you look over here, that's not quite the answer we were looking for, right, five plus 8.3 is definitely not 58.3. And here's what happened. When we get input from a user by default, Python is just going to convert it into a string. So it doesn't matter what we put down there when we're entering the numbers, Python's always just going to be like, okay, this is a string, that's it. Sounds good, right? It's just going to make it a string. In order for us to make these num one and num two variables numbers, we're actually going to have to convert the strings that we get from the user into numbers. And so the way that we can do that is by basically just coming over here. And when we add the two numbers together, I can use a special Python function in order to convert those strings into numbers. And there's actually two Python functions that we could use for this. The first is called int. So I could say int, I can make an open parentheses and I can make a closed parentheses. And basically what this is going to do is it's going to convert whatever is inside of these open and closed parentheses into an integer number. And an integer number is basically a whole number. So it's like one, two, three, four, five. So it's a, it's a whole number. In other words, it can't have a decimal point. And so what I could do is I could say, int, and I could put these inside of parentheses. And now what this is going to do is it's going to convert both of these numbers into integers. In other words, into whole numbers that don't have decimals. And it's going to add them together and we'll print out the results. So why don't we do that? And we'll just see if this works. So I'm going to click the play button. And down here, we'll enter our first number. So I'm just going to enter in a four. And then I'll enter in a five. And now you can see it's printing out the correct answer four plus five. And so that's essentially our basic calculator. But we do have one problem with this calculator. So I'm going to run it again. And I'll show you guys with that problem is if I wanted to add in a decimal number, so we'll add 4.3 and 5.5. You'll see that we're getting this error. And that's because I'm using this int function up here. And this int function is looking for a whole number. So if I put decimal numbers inside of there, it's going to break the program. There's another function we can use instead of an int, we can say float. And a float is basically just a number that has decimal. So it's a decimal number. So I can convert both of these guys into floats. And now I'll be able to use decimal numbers. So I can click play. And I can just enter in some numbers. So I could say like four. And I could also say like 5.5. And now it's going to be able to add both of those numbers, even if one of them is a decimal. And that's the beauty of using that little float function. So in certain circumstances, you might want the user to only be able to enter in an integer to a whole number. But in a lot of cases, like in this calculator, we want them to we want them to be able to enter any number that they want. So we're going to use this float function. So I'm just going to recap what we did one more time, we created two variables, num one and num two. And we basically stored the two numbers that the users input into those variables. And then we converted them into numbers. And we added them together and we printed out the results. So this is a pretty cool calculator. I'm happy with it. Hopefully you guys learned something. And as we go forward in this Python course, you're going to learn all sorts of ways that we can make this calculator more complex. In this tutorial, I want to show you guys how to build a madlibs game in Python. So a madlibs game is basically just a game where you can enter in a bunch of random words. So like, you know, verbs, nouns, names, colors. And you basically take all of those words and put them into a story randomly. So over here, my web browser, I just have an example of a madlibs. So, you know, down here, we're basically just taking random words, like an adjective or a noun or a plural noun, and entering them in side of a story. So like you read through the story and then like some random word pops up and madlibs can be pretty fun. And I'm sure you guys have, you know, at least heard of madlibs before. But if not, that was just a little introduction. So I want to create a madlibs in Python. And this is going to be really cool. So down here, I have this like little poem, which just says, roses are red, violets are blue, I love you. And so, you know, this is kind of like a classic poem. But I think we should mix it up a little bit and create a madlib for this poem. And so instead of having this red color over here, I want to have the user enter in their own color. Instead of having violets, why don't we have them enter in a plural noun? And instead of saying I love you, why don't we have them say I love and then some celebrity? So celebrity. So this is the basic structure for our little madlib, right? I want to basically have the user enter in a color, enter in a plural noun, and enter in a celebrity. And then I'll take all of those words and put them inside of our madlib. And hopefully we end up with something that's pretty funny. So how can we actually go about building this in Python? Well, the first thing we're going to have to do is we're going to have to be able to get these words from the user, right? That's pretty obvious. So I think what we should do is we should create three variables called color plural noun and celebrity. And we'll store the user's inputs inside of those variables. So up here, let's create those variables. The first variable I want to create is going to be called color. So say color. And I want to set this equal to the input. So I'm going to say input. And inside of here, I'm just going to give them a prompt. So I'll say enter a color. And we can basically just copy this line of code. And I'm going to paste it down below. And we'll paste one more time. So now we're going to create our plural noun variable. So I'll say PL, URL, plural noun. And we'll just say enter a plural noun. And actually, over here, I want to make a colon as well. So then finally, we'll create our celebrity variable and we'll say enter a celebrity. And so now basically, we're creating three variables called color plural noun and celebrity. And inside of them, we're storing the color that the user enters, the plural noun, the user enters and the celebrity, the user enters. So last thing we have to do is replace these guys with those variables. So I'm basically just going to add in the color over here. And we're going to add in the plural noun. So I can just go like this. And finally, we'll just add in that celebrity. So now we have a pretty cool mad lib. And it should be functional. Everything should work. It looks like it's good to go. So let's come over here and we'll run our program. And then down here in the console, we can play our little mad libs game. So let's say enter a color, I'm just going to say magenta, enter a plural noun. Why don't we say microwaves and enter a celebrity, let's say Tom Hanks. So when I click enter, what should happen is we should get our mad libs printed out. So I'm going to click enter. And now we have our mad libs. So it says roses or magenta, microwaves are blue. I love Tom Hanks. So it's a pretty good mad lib. And obviously, you know, the more the more print statements we put over here, you know, the better the mad lib could could be. And we could store as many, you know, variables up here as we wanted. This was just a very simple mad lib. We only took in three inputs, but you know, you can see how you could take something like this and create a little mad libs game. So your homework for this lesson is to go off and make your own mad libs game. Hopefully one that's a little bit funnier than mine. But that's the basics of creating a mad libs game in Python. In this tutorial, I want to talk to you guys about working with lists in Python. A lot of times when you're programming in Python, you're going to be dealing with large amounts of data. And when you're dealing with large amounts of data, you want to make sure that you can manage it and organize it properly. And the list is essentially just a structure that we can use inside of Python to store lists of information. So we can take a bunch of different data values, we can put them inside a list, and it allows us to organize them and keep track of them a lot easier. So generally, you would create a Python list, and you would put a bunch of related values inside of that list, and then you can use it throughout your program. So I'm going to show you guys just the basics of using lists, we're going to look at some of the common use cases and really just get you up to speed with what lists are and why they're useful. So over here in my program, I'm actually going to create a list. And we create a list a lot like we create a Python, just like a normal Python variable. So the first thing we want to do when we're making a list is give it a name. So we want to give it a descriptive name, something that's going to basically describe what's inside the list. In my case, for this example, let's make a list of like friends. So we could say like here's a list of all my friends. So I can say friends. And I'm going to set this equal to the list of values that represent my friends. And we want to create a list, we can use these open and closed square brackets. So whenever you use these open and closed square brackets, Python basically knows, okay, they want to store a bunch of values inside of this list. So why don't we go ahead and start adding some values? So we can say like my friends are like Kevin, Karen, and let's say Jim. So here I have three values inside of my friends array. So when we're creating a normal variable in Python, generally, we just give it one value, right? So I would create a variable, I would give it one value, maybe a string or a number or a boolean. But when we make lists, we're able to store multiple values inside of the same like little item inside of the same object, right? And then what I can do is I can access these individual items inside of my program. So inside of this friends list, we're basically storing all of these different values, and that can be really useful. So now that we've stored some values, let's talk about what you can put inside of a list. So you can really put any piece of information in Python, we could put things like strings, numbers, or booleans. So if I wanted, instead of just putting strings here, I could change like one of these to a number, and I could change one of these to a boolean, and it wouldn't matter, Python is going to be fine with that. But let's change these back to strings just for the sake of the example. So now that we've created our list, how can we access individual elements inside of this list? It's a good question. I'm gonna go ahead and print something out to the screen. The first thing we can do is we can just print out the actual list. So I can just say print friends. And then when I run this program, if we look down here in the console, you can see it's just printing out the actual list of friends, right? But let's say that I wanted to print out a specific element inside of this list. Well, I can actually refer to elements by their index. So each one of the elements inside of this list has a particular index. And the index is actually start at zero. So we would say that this first element in the list, Kevin has an index of zero. We would say that this other element Karen has an index of one. And this third element Jim would have an index of two. So even though Jim is technically the third element inside of the list, it has an index of two. And that's because we start indexing index position one. And so that's just kind of how lists work. And that's how list indexes work. So if I wanted to access a specific element inside of my friends list, I can just refer to it by its index. So over here after we type out friends, I'm just gonna type an open and closed square bracket. And inside of this open and closed square bracket, I want to put the index of the element inside the list that I want to access. So if I wanted to access this guy right here, this element, I can just put a zero. So I can say friends zero. And now when I run my program, it's just gonna print out that value, it's just gonna print out Kevin. If I wanted to access this Jim value over here, I can put a two. And that will give us that Jim value, you can see right there. So we can access elements based off of their index, we can also access elements based off of their index from the back of the list. So for example, if I said negative one inside of here, this is gonna give me access to this value right here for Jim. And you can see that sort of does so when we use negatives, it starts indexing from the back of the list. So if I said negative two, this is gonna give us Karen. And so you can use the negatives to access items at the back of the list. Just keep in mind though, and this is kind of interesting. We would say this first element here is index position zero, right? But we would say the first element at the back of the list is index position negative one. So just keep that in mind. So there's actually other ways that we can access like just portions of this list. So for example, let's say I just wanted to select the last two elements in this list. And I didn't want to select the first one. Well, in here, I can just say one with a colon. And this will grab the element at index position one and all of the elements after that. So now we should just grab Jim and Karen or Karen and Jim in that order. I could also specify a range. So actually, let me add in a couple other elements just so we can illustrate this better. So I'll add in two more names. So if I wanted to, I could select like the element at index position one up to the element at index position three. So it's going to grab this one. So that's one, two. And it's actually not going to grab the third one. So it's it's going to grab all the elements up to but not including three. So it'll grab Karen and Jim. So let's go ahead and run this. And you can see it grabs Karen and Jim. So you can either just put like one with a colon after it, and then it'll grab that index position and everything after it, or you can specify like a range that you want to grab from. So that's how we can access elements inside of this list. But we can also modify elements. So for example, I could come down here, let's say I want to modify this value right here, Karen. Well, all I have to do is just access that element. So I could say friends and Karen is at index position one. And I can change this to whatever I want. So I could say friends index position one is equal to Mike. And now when we print out friends index position one, that value is going to be updated. So it's just going to say Mike instead of saying Karen. So it can be really useful to modify values inside of arrays. So it can be really useful to modify values inside of Python lists. So those are kind of the basics of working with lists in Python. And actually in the next tutorial, I'm going to show you guys even more ways that we can use these lists, we're going to learn how to like add elements to a list, delete elements from a list, copy lists, and a bunch of cool stuff with these lists. But for now, this has just been sort of like the basics of working with lists. In this tutorial, I want to talk to you guys about using functions with lists in Python. And Python, a list is one of the most important structures where we can store our information. A list basically allows you to take a bunch of different values and organize them and store them inside of their own little list structure. So down here in my program, you can see I have two lists. I have a list of lucky numbers. And this is just a bunch of different numbers. And then I have a list of friends. So this could be like a list of somebody's friends. And it's basically just a bunch of strings with names in them. So these two lists are storing a bunch of different values. And what makes lists awesome is not only could I store like this many values, I mean, I could store hundreds or thousands or millions of values. And when you're working with a lot of data and a lot of information in Python, these lists are invaluable. So because lists are so important, there's actually a bunch of different functions that we can use with lists. And those functions allow us to do things like modify the lists and get information about the list. So in this tutorial, I just want to show you a bunch of those functions, we're going to talk about some of the most common and the most popular functions that you would use on lists to make them more powerful and make them more easy to use. So the first thing we can do is obviously just print out a list. So down here, I'm printing out this friends list. And when I want to run my program, you see down here, we're just printing out all the elements in the list. So it's always good to be able to print out all the elements inside of a list. But there's a lot of other functions that we can use. So one function is called the extend function. And the extend function will basically allow you to take a list and append another list onto the end of it. So I could say like friends dot extend. And inside of these parentheses, I can pass in the list that I want to add on to the friends list. So I could say like lucky numbers. And now when I print out this friends list, not only is it going to have all the elements in the friends list, it's also going to have all the elements inside the lucky numbers list. You can see down here, we have all of our friends. And then we also have the numbers over here. So that's a really easy way to essentially just like, add two lists together. We can also just add individual elements onto a list. So I could come down here and I could say friends dot append. And this will actually allow me to append another item onto the end of this list. So over here, I could just add another name. So we could say creed, for example, and now I'm like adding another friend onto the end of this list. So when I run the program, in addition to having the original items that were in the list up here, we also have this additional item at the end, and that append function is always going to add the item onto the end of the list. But let's say that you wanted to add an item into the middle of the list. So like right here or right here, there's another list function called insert. And insert is going to take two parameters. The first parameter is going to be the index where you want to insert the item. So why don't we insert it here at index position one? I'm just going to say one. And then I'm going to type in the name of the element that I want to add. So we can just say like Kelly. And now at index position one, we're going to have the value Kelly, and all of these other values are going to get pushed up, they're going to get pushed to the right one index position. So now I run the program, you can see we have Kevin, this new element Kelly, and then all the other elements have been pushed off to the right, we can also remove elements. So for example, let's say I wanted to remove this gym value, all I have to do is just say friends dot remove. And I can just type in whatever element I want to remove. So I want to remove this gym element. And so now when we run the program, Jim is going to be gone from the list, and we just have these four guys left, you can also remove all of the elements from the list. So if I just wanted to completely like reset the list and get rid of everything, I could just say friends dot clear. And this is going to give us an empty list. So it'll get rid of every single element inside the list. There's also another really cool method, which is called pop. And you can just type out pop like that. And basically what pops going to do is it's going to pop an item off of this list. So when I click the play button, you'll see here that we're left with Kevin, Karen, Jim, and Oscar. So we basically got rid of the last element inside the list. And that's what pop does, it pops an element off of the list. So it basically removes the last element in the list. So we have our list, but let's say that we wanted to figure out if a certain element was in this list, right, if a certain value is in here, so let's say I wanted to check to see if my friend Kevin was in this list, well, I could say friends dot index. And in here, I can just pass a value. So I could say like, Kevin, and this is going to tell me the index of Kevin. So it'll tell me if Kevin's in the list. So now when I click play, you can see down here, it says zero. If I was to say like Oscar in here, for example, now it'll give me the index of Oscar. So that's it three. But if I put a name that wasn't in here, so like, if I put Mike, that's not in the list. And so now we're going to get back in air, because it says Mike is not in the list. So that's an easy way to figure out if a specific element is inside of the list. And if it is, then you know what index it's at, you can also count the number of similar elements in the list. So I'm actually going to come down here, copy this gym element, and we'll add another gym element into here. So I could come down here and I could say friends dot count. And we'll pass in gym. And this will tell me how many times the value gym shows up inside of this list. So it should say two, which it does down there, because we have two values with the text gym. And so we have all these values, we could also sort this list. So I could come over here and I could say friends dot sort. And what this will do is it'll sort the list in ascending order. So we have a bunch of text here, and you'll see what it does. Basically, what it's going to do is it's going to put it in alphabetical order. So you can see we have J K O and T. So the list went from being just random order, like whatever we had up here to now it's in alphabetical order. And that's also going to work for lucky numbers. So I could say like lucky numbers dot sort, and then we'll print out lucky numbers. And these should now be in ascending order, which I'm realizing they already are up here. But if I was to take this 42 and put it down here, now it will figure everything out and put it in ascending order. Anyway, we can also reverse a list. So if I wanted, I could reverse this lucky numbers list, I could say lucky numbers dot reverse. And now when we print it out, instead of being 4815 1623, it's going to be 2316 15 842. So it's basically just reverse the order of the list. And finally, there's one more list function I want to show you guys which is copy. So I could actually create another list, and I could make it as a copy. So I could say like, friends to, and we could set this equal to friends dot copy. And now friends to is going to have all the same attributes as friends. Because it's basically just like copied it basically took a copy of that friends list. So you can see it's the same exact thing and copying lists can come in handy in a lot of different situations. So those are just some basic list functions and just to kind of like, you know, get your feet wet and working with lists. Obviously, like the more you work with them, the more you practice using these different functions, the more comfortable you're going to get. But that's just kind of like a basic overview of what you can do. In this tutorial, I want to talk to you guys about tuples in Python. Now a tuple is a type of data structure, which basically means it's a container where we can store different values. Now if you're familiar with lists in Python, a tuple is actually very similar to a list. It's basically a structure where we can store multiple pieces of information. But a tuple has a few key differences from lists that we're going to talk about in this tutorial. First thing I want to do is I want to show you the how to create a tuple. So I can come down here and I can create a tuple. And one of the most common examples of tuples is coordinates. So let's say I had a series of like XY coordinates, I could create a variable called coordinates. And I'm just going to set this equal to an open and closed parentheses. And whenever we want to create a tuple inside of Python, we're going to use these open and closed parentheses. And inside of here inside of these parentheses, we're going to put the values that we want to store. So I could, for example, put a list of numbers. So this could be like my coordinates, I could have like four and five. So this would be my tuple with coordinates inside of it. And one of the things about tuples that makes them unique is a tuple is immutable. And you'll hear that word a lot when we're talking about tuples immutable, it basically means that the tuple can't be changed or modified. Once we create our tuple up here, you cannot modify it, you cannot change it, you can't add elements to it, you can't erase elements from it, you can't change any of the elements inside the tuple. What you see is what you get, once you create the tuple, it's, it's as it is, it can't change. So I could come down here and I can print out some of the attributes inside the tuple. And the way I can access them is just by using an open enclosed square bracket. And in here, I can pass in a index. So tuples are indexed starting at zero. So technically, we would say that four is at index position one and sorry, four is at index position zero and five is at index position one. So if I said coordinate zero, now it should print out four. And down here, we're printing out four. So if I wanted to print out that five, we can just put a one inside of those square brackets. And now we'll print out that five. So I can access the elements inside of a tuple, I can easily access each, each entry. But if I was to come over here and try to change one of the elements, so if I said coordinates, and coordinates one, and I tried to set it equal to something else like 10, Python's actually going to give us an error when we run this program. So I'm going to run the program, you see we get this error, it says, type error tuple object does not support item assignment, because it's immutable, because we can't change it. So that's basically what tuples are how we can create them. And you know, a tuple, like I said, it's very simple, you just create it, and then you have it. And now I want to talk to you guys about a common topic in Python, which is the difference between tuples and lists. So remember, a list is basically doing the same thing a list. If we wanted to create a list, we would just use square brackets instead of those parentheses. And if I was using a list, I could assign different values to it, I could I could basically mutate any of the elements I could add delete, modify change, whatever I wanted with the list. But with a tuple, we can't do that. And that's sort of the basic difference. And really, Python doesn't say anything more than that. It basically just says like one of them's immutable, one of them's not. But in practical use cases, generally, people will use tuples for data that's never going to change. So you'll you'll store data inside of a tuple, when that data doesn't need to be mutated. That's why something like coordinates is such a good candidate for a tuple, because once you have coordinates, like, we're probably not going to modify them, right, we might add other coordinates. So for example, if I wanted, I could create a list of tuples. So I can say like 4567, maybe we have some other coordinates, like 8034. So here I have, you know, I have a list and inside of it, we have these tuples. But remember, these tuples can't be modified, the values can't be changed. So really, it's just a case by case basis, I would say by a huge majority, you're going to be using lists most of the time. Tuples are more of a niche, you know, they're using more special situations. But there are plenty situations where you want to use tuples. So if you're in a situation where you want to store data that can't be changed or mutated, then tuples are the way to go. So yeah, that's just some basics about tuples, some basics about the difference between lists and tuples. And so a tuple is a great thing to add into your Python repertoire. In this tutorial, I want to talk to you guys about using functions in Python. Now a function is basically just a collection of code, which performs a specific task. So I can take a bunch of lines of code that are basically doing one thing, I can put them inside of a function. And then when I wanted to do that task or do that one thing that the function was doing, I can just call the function. And so functions really help you to organize your code a lot better, they allow you to kind of break up your code into different, you know, little chunks that are doing different things. And they're really just awesome. So functions are like a very core concept when we're talking about programming in Python. So I'm going to show you guys how to create an awesome function today. Let's say for the purposes of this tutorial, we want to create a function that says hi to the user. So the one task that our function performs is basically just saying hi to whoever is writing the program. So over here, if I want to write a function, the first thing I have to use is a keyword in Python, it's called death. So D E F. And basically, when Python sees this keyword, it's going to say, okay, this person wants to use a function. So after we type out death, we need to give this function a name. So just like when we are creating variables, we give them descriptive names, we also want to do the same thing with functions. So if I'm creating a function, I can just give it a specific name, which basically says like what it's doing. So we're going to create a function that says hi. So I'm just going to call this function, say hi, just like that. And once we type out the name of the function, and so also I could type out say hi with no underscore or I can type out say hi with an underscore, both are considered like good practices in Python. A lot of times, if you just have a simple like two word function like this, you don't need to put an underscore, but we could put an underscore there. If we wanted, after we type out the name of the function, I'm just going to type an open and close parentheses. And then I'm going to type a colon. And basically, what this is doing is it's saying to Python, like, all right, all the code that comes after this line is going to be inside of our function. And in order to write code that's going to end up being inside the function, we actually have to indent it. So over here, you'll notice that when I clicked enter, my text editor automatically indented the text. So it's automatically like, using this indent here. And that's kind of like one of the rules in Python is like, the code that goes inside of this function needs to be indented. So if I was to write some code, like out here, this is no longer going to be considered inside the function. So you can see, as I type out code, and obviously, this isn't real code, but as I type text over here, that's indented, this little like marker over here is basically saying like, Oh yeah, that's inside the function. But then when I write code over here, that is like not at the same indentation level as this stuff, it's no longer considering it inside the function. So that's just a little thing. Any code inside this function needs to be indented. Alright, so our function is just going to say hi to the user. So I'm just going to have it print out some text, it's going to say hello, user. So this is a very simple function. Obviously, we just have one line of code and inside of a function, you could have, you know, as many lines of code as you want. But for our purposes, we only need one line in order to perform our function. So now all we have to do is call this function. So if I want to execute the code inside of this function, I have to do something called calling it. So if I was to just run my program as it is right now, I'm just going to run it, you'll see that nothing happens over here, right? Even though this function is printing out hello user, when I run the program, it's not doing it. And that's because the code inside of a function isn't going to get executed by default. The code inside of a function is only going to get executed when we specify that we want to execute it. And in order to do that, we're going to have to do something called calling the function. So in order to call the function, you basically just type out the functions name and those open and close parentheses. So I'm just going to type out say hi, and open and close parentheses. And now when we run this program again, you'll see that it prints out hello user. So we're executing the code inside of the function. And I want to show you guys just one more thing here, just talking to you guys about how these functions actually work. So up here, I'm going to print top. And then down here, I'm going to print bottom. So I want to show you guys the flow of these functions inside the program. So when I run this program, you'll see we print out top hello user, and then bottom. So essentially, what's happening is when Python goes through and executes this program, it goes over here to this first line, it says, okay, we want to print out the word top. And then it goes down here and it says, okay, we want to execute the say hi function. So Python actually jumps up, and it goes over to this say hi function, and it's going to execute all of the code inside of this function. So it's going to go through execute all this code. And then once it's done executing all the code in the function, it's going to jump back down here, and it's going to move on to the next line, which is bottom. So that's kind of like the flow of functions. Again, with functions generally, when we're naming these functions, you want them to be named in all lowercase. And usually, when we're naming stuff in Python, if there's two or more words, we're going to use an underspace or an underscore in between them. So I could write this out as say underscore high. But in a lot of situations, though, if I have a function like this where the name is really short, I might just be easier to leave it without an underscore, but why don't we just put an underscore in there just to be a super Python official. All right, so now we can actually make these functions a little bit more powerful. And what we can do is we can give them information. So a lot of times when we write a function, we're going to want to have additional information that gets passed in. And these are called parameters. So a parameter is a piece of information that we give to the function. So over here, I can actually specify that this function needs to receive some parameters. So I can basically say like, Hey, if you're going to call this function, you need to give us some information, you need to give us some parameters. And all I have to do to do that is just type out the name of the parameter that I want to receive. So why don't we allow the code calling this function to tell it what name to say hi to up here, I can just say name. And basically, what this means is it means whenever I call this say hi function, we have to give it a name. So down here, if I was to call this, I have to include a name in here. So I can say like, Mike, and what we can do now is we can actually access this parameter or this variable inside of our function. So I could come over here and instead of saying hello user, I could say hello name. And basically, what this is going to do is it's just going to say hello to whatever name got passed in here. So I'm actually going to copy this and we will do this twice. So I'll say hello, Mike hello, Steve. And now when I run this program, you'll see that instead of just saying hello user, it's saying hello to whichever name I passed into the function. So that's why this can be really useful, right? We can give the function information, and depending on the information we give it, it'll perform its task a little bit differently. I could also include more than one parameter. So you can, I mean, technically, you could have like as many parameters as you want. So I can put another one in here, we can say age. And now I'm going to have to pass in an age along with these. So I'm just going to pass in age and pass in an age for down here. And I'm just going to pass in strings. So we can say hello name. You are age. So I'm passing in two pieces of information. And now when we run this program, it's going to call the function. And it's going to use both of those pieces of information. So I say hello, Mike, you are 35. Hello, Steve, you are 70. So essentially, we're writing out this one line of code, which just prints out like hello to someone. And we're allowing this function to receive two parameters. So the name and the age, and depending on the name and the age, the function's going to print out hello a little bit differently. And that's kind of the beauty of using function. So you could pass anything you want into a function. So for example, I could pass in a integer instead of a string for the age. So like I could pass in the number, the only difference is over here, we're going to have to convert this into a string. But it's going to work just the same. So you could pass in strings, numbers, bullions, arrays, you can really pass any type of data into a function. And it's going to work. So you can see here, we get the same result. So that's the basics of functions. And as you go through with Python, you're going to be using functions more and more. And generally, it's a good idea to break your code up into different functions. So whenever you have like a grouping of code that's designed to perform a specific task, that's usually a good candidate to be put inside of a function. In this tutorial, I want to talk to you guys about using the return statement in Python functions. Now Python function is basically just a collection of Python code that performs a specific task. And when we want to perform that task in our Python programs, we can call a Python function. And a lot of times when we're calling a Python function, we just kind of call it and it does its thing. And then we move on with the program. But sometimes when we call a function, we're actually going to want to get information back from that function. So when I call the function, I want it to basically execute its task, I want it to execute all the code. And then I want it to like give me some information back. So that could be like a particular value, it could be something like telling me how the task went. Basically, the function can just communicate back to us like, Hey, here's some information. And that's what the return keyword can allow us to do the return keyword can basically allow Python to return information from a function. So I'm going to show you guys how we can do this, I want to create a very simple function. And it's just going to cube a number. So when we cube a number, we take it to the power of three. So if I was going to cube like two, it'd be like two raised to the power of three. Right, it's just pretty basic math. So we're going to make a function that will cube a number. And I'll show you guys how we can use that return statement. So first thing we want to do is make a function, I'm just going to say death cube, we'll call the function cube. And over here, we can specify any parameters that this function will take. So basically, any values that we want to give this function. So we're going to give it one function, which is just going to be a number. So I'm just going to call it num. And then over here, I'm going to type out a colon. And then down here, we can put any of the code that we want to be included in this function. So basically, this function is just going to cube this number. So we could just type out num, times num, times num. Right, that's going to give us num cubed. So that's all well and good. And if I come down here, I can execute this function. So I can basically just call it, I'll say cube. And why don't we pass it a three? So I'm going to go ahead and pass it to three. And I'm going to save this. And now let's go ahead and run this code. So we're on the code. And you'll see down here, nothing happened, right? So nothing got printed out in our program. In fact, when we call this cube function, it didn't really do anything. So let me try to print this out. So maybe if we print this function out, it'll give us back the information that we want. So type out print, and we'll print out the value of the function, I'm just going to click play. You look down here, it says none. So when I printed out the value of this function, it told me none. But really, this function is supposed to be cubing the number. And here's how we can use the return statement in Python. I can come over here and I can just say return. And now Python is going to return whatever value we put over here to the right. So when I call this cube function, and I give it a three, Python is going to go off, it's going to execute this function. When it sees this return statement, it's going to say, okay, I want to give a value back to whatever call of this function. And it's going to return this value. Now, when I print out cube three, it should print out the answer because we get an answer back. So when I play this, you'll see down here, it says 27. So we got the correct answer. So I could do this with anything, why don't we cube like four or something? So now we're on this. And you can see we're constantly getting the correct answer back. So that's the basics of using this return statement, it allows us to return a value back to the caller. In other words, back to whatever's calling the function. So I just want to illustrate this point a little bit further, I'm going to come up here, I'm actually going to create a variable. So I'm going to create a variable called result. And I'm just going to set it equal to cube four. This variable result is going to store the value that gets returned from the cube function. So it's not going to store like cube four, it's going to store the value that gets returned from executing that function. So now if I came down here and printed out result, it's actually just going to print out 64 again, because that's the value that it's storing. So this return statement can be really useful for like getting information back from a function, we can use something like a parameter, like this four as a parameter, and we can give information to a function. And then we can use the return statement to get information back from a function. And I do just want to point out one more thing, I'm actually not able to put any code after this return statement. So if I came down here and tried to put like a print statement, this actually isn't going to work. So this is never going to get printed out. So if I just typed out like code right here, when we run this program, it's not going to type out code. That's because when I use this return keyword, it breaks us out of the function. So Python's going to go through, it's going to execute the code in the function, whenever it sees this return keyword, it's just going to break back out and we're going to be done. So we'll never be able to reach this line of code. So that's the basics of using return statements. And you can return any data type you want, we could easily return like a string or a Boolean or an array, it doesn't really matter, you can return whatever you want. And a lot of times in a lot of situations, you're going to want to get a value back from a function. In this tutorial, I want to talk to you guys about using if statements in Python. Now if statements are a special structure in Python, where we can actually help our programs to make decisions. So by using an if statement, I could execute certain code when certain conditions are true. And I can execute other code when other conditions are true. So basically if statements allow our programs to respond to the input that they're given. So depending on the data that we're using in the program, our programs will be able to respond. So when certain data is certain values, we can do certain things. And when other data is other values, we can do other things. So you know, your programs are essentially becoming a lot smarter. And actually, if statements are things that we as human beings deal with every day. So you know, as you go throughout your day, generally, you're dealing with if statements all the time. So I want to kind of give you guys a brief introduction into if statements, and we'll talk about some of the common if statements that you'd see in everyday life. And then we'll go ahead and do a really awesome example to kind of like show you guys what if statements can do for us. So over here in my text editor, I just have this little text file. And in here, I wrote out a bunch of if statements that a lot of people will encounter on a daily basis. So here's the first one, it says I wake up, if I'm hungry, I eat breakfast. So let's break this down a little bit up here, it says if I'm hungry. And this is a condition, right? This is either going to be true, or it's going to be false, right? If it's true, I'm going to go ahead and eat breakfast, right? If it's false, I'm just going to skip whatever was in here and move on, right? So that's the basics of an if statement, right? We have a condition, in this case, if I'm hungry, if the condition is true, then we do the action. So we eat breakfast. Otherwise, we just skip it. So down here, we have another one, it says I leave my house. If it's cloudy, I bring an umbrella. Otherwise, I bring sunglasses. And so this one is a little bit more complex than the one we just looked at. You'll see we have our condition, right? It says if it's cloudy, if that condition's true, we're going to bring the umbrella. But in this case, if the condition's false, there's something else that we want to do. So in the case up here, if this condition was false, we just moved on. But now if this condition's false, then we're going to go ahead and bring sunglasses. So that's another example of an if statement, it's a little bit more complex. Finally, I have one more down here, and this one's even more complex, it says I'm at a restaurant. If I want meat, I order a steak. So if this condition's true, we order the steak. But if this condition is false, then we're going to move on, and we're actually going to check another condition. So I'm going to say otherwise, if I want pasta, I order spaghetti and meatballs. This is another condition. If this condition's true, we get the spaghetti. If it's not true, then finally, we're going to move on down here, and we'll just default to ordering the salad. So all three of these if statements are valid if statements, it's just they get more and more complex as we go down the list. So hopefully that's, you know, it can kind of wrap your head around what if statements are we're basically specifying conditions. If those conditions are true, we're going to do certain things. And if those conditions are false, we can do other things, or we can check other conditions. All right, so let's head over to our Python file, and we'll start writing some actual Python. So in here in my app dot Python file, I want to create an if statement. And I'm going to show you guys a very basic if statement in this tutorial. And then in the next tutorial, we're going to look at some more advanced if statements. And so what I want to do is create a Boolean variable. So I'm going to create a Boolean variable that's going to store whether or not the user is a mail. So it's just going to be called is underscore mail. And I'm going to set this equal to true, because I'm a male. So we have this Boolean variable, right? And right now we have it set equal to true. I can actually use an if statement to check to see what the value of this variable is. And if it's true, I can do something. So if I want to use an if statement, all I have to do is just type out if, and then I just need to type out a condition. So basically, I would have to type out like something that's going to be true or false. Like, for example, in the other page, we were specifying like, if I'm hungry, or if it's cloudy, here, we're just going to check to see if is mail. So in other words, if the person is male. And so remember, this has to be a, like, it has to be able to be reducible to a true or a false value. So in our case, we're just using a Boolean, because that's like the easiest thing we can do. So I said if I specified my true or false condition, and now I want to just type a colon. And what I want to do now is make a new line. And so anything that I put below this with an indentation is actually going to be executed when that conditions true. So I could put print. And down here, I could just put you are a male. And now you'll see what happens when I run this program, it's going to go down here, and it's going to say you are a male. But if I changed is mail to false. So instead of this being true, I just change it to false. Now all of a sudden it's not going to print anything. So it's just going to be blank down here. That's because this condition wasn't true. So anything that I put below this if declaration and that has an indentation like that is going to be executed when the if statement is true. We can also use another keyword in Python, which is called else. And else is basically going to be like otherwise. So you remember before we said, if it's cloudy, I'll bring an umbrella. Otherwise, I'll bring sunglasses. Well, this is going to be like our otherwise. So I can say down here else. And now anything that I put below else is going to get printed out when that condition isn't true. So why don't we just put you are not a male. So now we're able to cover both of the situations for this variable. If it's false, we can cover that situation. So it says you are not a male. If it's true, we can cover that situation as well. So it'll say you are a male. So that's pretty cool. But we can also make these more complex. And actually before I talk about that, you can put as much code as you want inside of an if statement. So I could have like, you know, dozens of lines of code if I wanted. I'm just giving you guys a very simple example. So why don't we make this more complex? And I'm going to add another variable into the mix. So I'm going to add another, you know, Boolean attribute into this mix. I'm going to make another variable called is tall. And we're going to set this equal to true as well. So now I have two variables in the mix. Let's say I wanted to write an if statement that will check both of those variables. So I could write an if statement that's like, if they're male and they're tall, or if they're male and they're not tall, or if they're not male and they're tall, like I could write out a bunch of if statements to check the combination of these variables. And so the way I can do that is by using one of two keywords. So the first keyword I want to show you guys is the or keyword. So I can come over here and I can say if is male, or is underscore tall. And what this is basically going to do is it's going to say if the person is either male, or if they're tall, then we want to do something. So this is only going to be true when one of these values is true, when one or both of those values is true. So down here, we could actually put instead of you are a male, we could put you are a male or tall or both, that's going to be more appropriate. And then down here, we would say you are neither male nor tall. And that's because if we execute the code inside of this else, that means that both of these guys are false. Right, so I'm saying if they're male or they're tall, we're going to execute whatever is in here. Otherwise, that means they're neither male nor tall. We're just going to execute this down here. So let me show you guys how this works. I'll click play. And these are both true. So it's going to say you are a male or tall or both. If I was to set one of these to false. So let's set is male equal to false. Now, it's still going to say you are a male or tall or both. But if I set them both equal to false, now it's going to say you're neither male nor tall. So that's kind of the basics of using the or operator. And there's another operator we can use which is called and, and basically it's similar to or except both of these conditions have to be true. So this is basically saying if the person is male and they're also tall, then we're going to execute whatever is in here. So we could actually change this text to say you are a tall male, because we know for a fact that if this is getting executed, they're both male and tall. We can also change this print statement down here. This could say you are either not male or not tall or both. So you can see it's basically just saying that you're either not one of them or you're not both of them. So we click the play button and you'll see because they're both false, it's going to say you are either not male or not tall or both. But if I make them both true, now it's going to say you are a tall male. If I was going to make one of these false, though, so let's make is tall false. Now it's not going to execute this first print statement. It's going to execute the one inside of the else. So to say you are either not male or not tall or both. So that's the basics of and an or and you'll be using those a lot as you use your if statements. But there's actually one more thing we can do. We can add in some more conditions. So up here I'm checking if they're male and they're tall. But what if I wanted to check if they're and they're not tall? So if they're like a short male, I can use another keyword in Python called else if or really it's just typed out E L I F and it stands for else if and after this we can put another condition. So over here I want to check to see if they're male and they're not tall. So I'm going to say else if male is male and now I can type in not tall and the way I can do that is by saying not an open and close parentheses and saying is tall. And basically when I use this not function it's going to negate whatever is inside of here. So if this was true it's going to make it false and if this was false it's going to make it true. So basically that'll tell us whether or not they're tall. And then I'm going to use a colon and now down here inside of here we're basically just going to type out any of the code that we want to happen when this condition's true. So down here we can just print out you are a short male and there's actually one more condition that we want to check for which would be if they're not male and they're tall. So we can make one more else if and I'm actually just going to copy this guy and we'll paste it down here. And so I want to say if not is male and is tall. So now we're checking to see if they're male and or if they're not male and they're tall. So here we could say you are a you are not a male but are tall. So essentially here we have an if statement that's going to cover every single condition for these two variables. So in every single situation of the two values of these variables we're going to be able to print something out for it. So if I made both of these true it's basically going to tell us you are a tall male. If I make is male false it's going to tell us you are not a male but are tall. If I made is male true and is tall false then it's going to tell us you are a short male. And if I made both of these false it's going to tell us you are either not male or not tall or both. And actually we need to change this. So this should say you are not a male and not tall. So that would be a better print out for that situation. So you can basically see how we can use if else ifs and else in order to help our program to make decisions and really to respond to the different data in our programs. So I'm able to respond to every combination of the values for these two variables. And that's really cool. So in this example we were just using simple Boolean variables but in the next tutorial I'm going to show you guys how you can actually use something called comparison operators. So we could compare like two numbers or two strings and we could use those as our conditions. But for now I think this is a good introduction into if statements. So I'll see you guys in the next tutorial. In this tutorial I want to talk to you some more about if statements in Python. More specifically we're going to be looking at using comparisons inside of our if statements. So if you're following along with the course in the last tutorial I talked to you guys about just the basics of if statements and we used a couple different Boolean variables. And depending on the values of those bullions we were able to do certain things. In this tutorial we're going to look at another way to use if statements which is with comparisons. So instead of just using Boolean values we can actually compare different values. So I could compare a couple numbers or I could compare a couple strings. And depending on the results of those comparisons we can do certain things. So this is going to be pretty cool. And this is really going to give you guys a full understanding of what you can do with if statements. So for this tutorial I actually want to create a Python function. And this function is going to give us the maximum number that we pass into it. So this function is going to take three parameters as input and it's going to print out the biggest number that we give it. So let's create this function. I'm just going to say death. And I'm just going to call it max num. And inside of these parentheses I'm going to specify that I want three parameters as input. So I'm going to say num one, num two and num three. So basically we're passing it three numbers and this function will return the largest of the three. So in order to figure out which of these numbers is the largest we're going to have to use an if statement. So I can say if and over here I need to specify a condition right so I need to put like a true or a false value. And so what we can actually do is we can compare these different numbers. So I could say if num one is greater than or equal to num two. And num one is greater than or equal to num three. So basically what I'm doing here is I'm comparing these different numbers. So I'm saying if the first number is greater than or equal to the second number. And this is a comparison. So when you think about it, when we compare these two numbers, we're going to end up with a true or a false value. Right, num one is either greater than or equal to num two or it's not. It's actually a Boolean value right it's either true or it's false. Same thing over here. The result of this comparison is either true or it's false. So technically I'm putting a true or false value in there. I'm just getting that true or false value by using a comparison. And you'll notice over here we're using something called a comparison operator. And basically this is just like how we want to compare them. So we're saying like greater than or equal to in this case. So down here, if this whole condition is true, in other words, if the results of these two comparisons end up being true, then we know that num one is the biggest. So I can just return num one, I can say return num one. But we also want to check some other conditions. So I can say L if, and now I want to do some other comparison. So I'm going to say else if num two is greater than or equal to num one. And num two is greater than or equal to num three. So I'm doing essentially what I did up here, except for num two. So again, I'm comparing these different numbers. And this is going to end up being a true or a false value, depending on the result of the comparison. So down here, again, we can just return num two, because if all of this is true, that means we're going to end up returning num two. And then finally, we can just say else. So if num one isn't the biggest and num two isn't the biggest, then we can pretty much assume that num three is the biggest. So now we have our function. So down here, I'm actually just going to call this function. So I'm just going to say, actually, I'll print out the result. So I'll say max num, and we'll pass in like three, four, five. So we're basically calling that new function that we just made. And I'm going to go ahead and run this program. So you can see down here in the output, we print it out five, because that was the biggest. If I was to change this middle one to the biggest, so we make the middle 140, now it'll be able to take on that situation. And finally, I can make this like 300. And it'll be able to handle that. So no matter which number num one num two or num three ends up being the biggest, it's able to tell us without a problem. So these comparisons are a really, really, really common way to make if statements. And a lot of times, you're going to want to be comparing different values inside of Python. So over here, we're comparing numbers, but we could also compare strings. So I could easily make these both like, you know, I could make this like dog, and I can make this dog. And I could say a different operator. So I could say like this double equal sign would mean equal. So I could basically say like, if this string is equal to that string, so you can basically like compare all different data types, you know, I could compare numbers, strings, you could also compare bullions. So once again, these are comparison operators. And this one is greater than or equal to, but there's a bunch of other comparison operators we can use. So the most basic is just going to be a double equal sign. And that basically checks to see if the two values are equal. So it'll say like, if number one is equal to number two, we can also say not equals. And this and this exclamation point will basically mean not equal. So it's if num one is not equal to num two, we also have greater than less than greater than or equal to less than or equal to. And those are kind of all of the operators are all the, you know, the basic comparison operators that you're going to be using in Python. So using comparisons is really awesome. And there's going to be tons and tons of situations inside of Python where you're going to want to compare different values. So these can be extremely useful. In this tutorial, I'm going to talk to you guys about building a calculator in Python. Now, if you've been following along with this course, you'll know that in the beginning of the course, we actually created a very basic calculator. Basically, the user could just enter in two numbers and our calculator would add the numbers together and spit out the answer. In this tutorial, I want to show you guys how to build a more advanced calculator. So this calculator is going to be able to perform all of the basic arithmetic operations. So we can add, subtract, multiply and divide. And we'll actually allow the user to specify which one of those they want to do. So the user will enter in a number, they'll enter in whatever operator they want to use. So plus minus divide, multiply. And then they'll enter in the second number and we'll perform the operation for them. So this can be pretty cool. And it's going to show you how we can use if statements in like a practical application. So let's get started. The first thing we want to do is get input from the user. So I'm going to create three variables, one for the first number, one for the second number, and one for the operator. And we'll basically store the values that the user inputs into those variables. So the first one will just be num one. And I'm going to set this equal to input. And we're going to give this a prompt. So I'll say enter first number. And here's actually the thing is whatever the user enters, we're going to want to convert it into a number. So generally in Python, when we get input from the user, no matter what they put in, it just gets converted into a string. But we don't want a string, because we're going to have to be adding or subtracting or multiplying these numbers together. So whenever they enter in the number, I just want to immediately convert it to an actual like number data type instead of a string. So what I can do is I can actually say float, and I can surround this entire input tag with parentheses. And now what this is going to do is it's going to immediately convert whatever the user inputs into a float. Now that's going to mean that they're going to have to insert a number, otherwise we'll get an error. But for the most part, this should work out for us. So I'm actually just going to copy this guy. And we'll go ahead and paste it over here. And we'll paste it one more time. So we're basically just trying to get three pieces of input from the user. So the second thing we want to get is the operator. So I'm just going to say op for operator. And I'll actually get rid of this float, because we want to keep this as a string. And I'll just say enter operator. So that's going to be like plus minus multiplication, whatever. And then finally down here, we'll get num two. And again, we're going to want to convert this to a float. So I'll say enter second number. So now basically what we're doing is we're getting the first number, we're getting the operator and we're getting the second number from the user. So what we need to do now is we need to figure out what is inside of this op. In other words, we need to figure out what operator the user was trying to do. So are they trying to do addition or they trying to do subtraction like we want to figure that out. So we can use an if statement in order to figure that out. So I'm going to come down here and I'm basically just going to create an if statement. So I'm going to say if, and we want to check a condition. So I'm basically going to check to see if this operator is equal to a plus sign. So I can say if op equals plus sign. And now if the operator is equal to plus sign, I'm just going to print out num one plus num two. But let's say that instead of a plus sign they entered in something else. So we can say out if op is equal to, and now we'll check if it's a minus sign. And so here we'll just print num one minus num two. And actually forgot to put a colon here. So we can just do these for everything. So now we can say L if op is equal to division and here we'll just divide the two numbers so I can print out num one divided by num two. And finally, we'll do the same thing for multiplication. So I'll say l if op is equal to asterisk. And we'll just print out num one times num two. Alright, so basically over here we have every, you know, condition. But I also want to put in an else statement. So in the case that the user enters in an operation, that's not like one of the four that we specified up here, I just want to throw an error. So I'm just going to say op or actually we just say else. And here we'll just print out like invalid operator. Alright, so this if statement should give us everything we want. Basically, I'm just checking to see if it's equal to a plus sign a minus sign a division sign or a multiplication sign. Depending on which one it's equal to, we'll do a different operation. So let's go ahead and run this program and see how we do. So I'm going to run this program and it says enter first number. Let's enter five, enter an operator. So why don't we just do addition and enter a second number. Let's do 23. So now it prints out the answer 28. So a calculator actually works. Let's try another operator just to make sure. So we'll do six and why don't we multiply it by, I don't know, 5.23. So now we go off and we do the multiplication and looks like we got our answer. So our calculator seems to be working. And so basically all we did was we got the input from the user and then we used if statements to figure out what they wanted to do. So we can check to see if they wanted addition. We can check to see if they wanted subtraction or division or multiplication. And we can also check to see if they entered in an invalid operator. So actually why don't we try that too. So I'll enter in like five and now we'll just enter in like an open and close parentheses and a four. So you can see here it's able to tell like the program's smart enough to know that that's not a valid operator. So these if statements can be really powerful and we can use them in combination with getting the user input to create a little calculator. In this tutorial I want to talk to you guys about using dictionaries in Python. Now a dictionary is a special structure in Python which allows us to store information in what are called key value pairs. So essentially I can just create a bunch of these different key value pairs and then when I want to access a specific piece of information inside of the dictionary I can just refer to it by its key. So the word dictionary is actually pretty appropriate here. If you guys are familiar with a normal dictionary you know in a normal dictionary you'd have a word and then you'd have a definition associated to that word. So in this situation the word would be the key. In other words the word is what like uniquely identifies it inside of the dictionary and then the value would be the actual definition. So this is going to make more sense once we start working with this but I just wanted to give you guys a quick introduction. So in this tutorial I want to create a little program that will allow us to convert a three digit month name into the full month name. So I could convert for example like JAN to January or I could convert M A R into March. Like I want to be able to have a program that can do that for us and that's actually a pretty good use case for a dictionary. So we're actually going to create a dictionary and I'm going to show you guys how we can do that. So the first thing we need to do in creating a dictionary is just give it a name. So I want to give this a specific name. So I'm just going to call this month conversions. And now I just want to set this equal to an open and closed curly bracket. So whenever we create a dictionary in Python we're always going to want to create it inside of these open and closed curly brackets. So inside of the dictionary now we can start defining what are called key value pairs. So I can define a key and then I can give it a corresponding value. And the way that we can do that is just by typing out the key and then typing out the value. So in our case we're converting three digit month names into the full month names. So I would want to type out for example JAN and then I can type a colon and I want to type out the value I want to associate with it so we could say January. I can basically do this for every combination. So I could say like FEB and this would be February. And actually after each one of these we're going to need to put a comma. So I could do the same for March, say M.A.R. So essentially what I can do is I can specify an entry inside of this dictionary for each one of these. So this over here would be the key and this over here would be the value. And here's one thing is all of these keys have to be unique. So if I was to come down here and change this to JAN, this is actually going to give us a little warning. So you can see down here it says dictionary contains duplicate keys. That's a no no when we're creating dictionaries. So you always want to make sure that the keys are unique. All right. So I'm going to go ahead and create one of these for each one of the months and then we'll come back and we'll talk about it. All right. So I've gone ahead and created an entry for all 12 of the months. So now we have a bunch of unique keys and each one of those keys is associated with a different value. So this is the basics of creating a dictionary is we have a bunch of these different key value pairs. And now what we can actually do is we can access them from inside of this dictionary. So if I wanted to access a specific key or a specific value, all I have to do is come over here and I'm actually just going to print it out onto the screen so we can see it. All I have to do is refer to the dictionary by name. So it's just called month conversions. And there's actually a bunch of different ways that I can access these month names. So I could access different entries inside of this dictionary. The first way is just by making a open and close square bracket and inside here, I can just type in one of the keys. So for example, inside here, I could type in NOV. And what this should do is it should give us back the full name for November. So when I print this out, you'll see that we get back down here November. So I could do the same thing for, you know, any of these, we could say like M A R. And now we should get March back. So I'm able to refer to the key. And it's going to go into the dictionary and it's going to give me the value that's associated to that key. There's actually another way we could do this too. So I could say month conversions dot get an inside of here. I could also pass in the name of a key. So I could pass in like D E C. And now we'll be printing out December. And what's cool about using this get function is I can actually specify a default value that I want to use if this key is not found. So there's going to be certain cases when we're dealing with dictionaries where you're going to put in a key that might not necessarily map to a value inside of the dictionary. So you put in an invalid key. So let's just try to do that. So I'll just put like L U V. That's not a month abbreviation. So when I try to run this, you'll see we get this none down here. And in a lot of cases, you're going to want to create some sort of a default value. So if I'm in this situation where I have a key that's not mapable to any values inside of this dictionary, I can actually pass it a default value. So inside this dot get function, I can make a comma. And now I can pass in like a default value to get printed out. So I can say like not a valid key. And now when I put in the invalid key, instead of saying none, it's going to go ahead and say not a valid key. So this is going to give us like a default value that we can fall back on. So these dictionaries are really awesome. And the keys over here don't have to be string. So you could also use numbers. So for example, I could say like zero, one, 10, like I can put any numbers I want over here as keys as long as they're unique. And then I could access those keys, just like I normally would down here with this get function or with those open and close square brackets. So that's sort of the basics of using dictionaries. It can be really useful to store key value pairs. And honestly, you're going to be using them a lot in Python to store different types of data. In this tutorial, I want to talk to you guys about while loops in Python. Now a while loop is basically a structure in Python, which allows us to loop through and execute a block of code multiple times. So I can specify like a few different lines of code, and then I can put that code inside of a while loop. And it would basically loop through that code, executing it repeatedly until a certain condition was false. So while loops can be awesome. And there's a lot of situations in Python where we're going to want to loop through specific lines of code. So in this tutorial, I just want to show you guys the like bare basics of how while loops work. And then in future tutorials, we're going to use while loops to create little games and stuff like that. So let's talk about while loops. When I create my while loop, the first thing I want to do actually is create an integer. I'm basically creating a variable that's a number and you don't have to do this for a while loop, but just for our demonstration I'm going to. So I'm just going to call this I and I'm going to set it equal to one. And now what I want to do is I want to create a while loop. So I'm basically just going to say while. And over here I want to specify a condition. And this is what's called our loop condition or you can also refer to it as a loop guard. And basically we are going to keep looping through the code inside of the while loop as long as this condition is true. So whatever condition I put in here, as long as it's true, we're going to keep looping through the code inside the while loop. So I'm just going to say while I is less than or equal to 10. And now I'm going to put a colon and I'm going to make a new line. And so anything that's below this while loop declaration and that's indented like this is going to be considered code that's inside the while loop. And so that code is going to get repeatedly executed while this condition up here is true. So I'm just going to put a very simple line of code here. We're just going to print out the value of I. And then down here I'm going to actually increment I so I'm going to add one to I'm going to say I is equal to I plus one. So basically I'm taking this I value and I'm adding one to it. There's actually a shorthand that we can use in Python to do something like this though I could just say I plus equals one and that's automatically going to add one to I. So this is like a little shorthand and you'll see people in Python using that a lot. So over here we basically have our while loop. So I have the outline for a while loop. So we're defining this variable up here and we're going to keep looping through the code inside the while loop as long as this condition up here is true. So if this condition is false for example if I is equal to eleven then we're not going to loop through this code anymore and we're just going to move on. So down here I'm actually just going to print. Done with loop. So this will kind of illustrate this for us. Alright so let's go ahead and run this program. I'm just going to run it. And you'll see down here we get some output. So we're actually going to get numbers printed out one all the way down through ten and then we're printing out done with loop. So basically what's happening is we're printing out every time we go through this loop. So initially I is equal to one right. The first thing that Python is going to do when it gets to this while loop is it's going to check this condition. So before it does anything else it's going to check this condition and it's going to say okay is one less than or equal to ten and that's true. So as long as this guy is true we're going to go through and loop through all the code inside of here. So we're going to print out i which has the value of one and then we're going to add one to i. So now i is going to go from one to two. Now what we're going to do is we're going to go all the way back up here to this while loop declaration and we're going to check the condition again. So remember I checked the condition the first time and then I loop through all the code then I go back up to the top and I check it again. So I'm going to say okay is i less than or equal to ten. At this point i is equal to two. So i is less than or equal to ten. So now we're going to go through and we'll execute all this code again. So I'm going to print out i so it's going to be two and I'm going to add one to i so now we have three. Then Python is going to go all the way back up to the top and it's going to check the condition again. So on every iteration through the loop before Python does what's inside of this loop it's going to check that condition. And as long as the condition remains true we're going to keep executing the code inside the loop. Eventually though in this program i is going to end up being eleven. So on the last iteration it's going to end up being eleven. We're going to come back up here and we're going to say hmm is eleven less than or equal to ten? Nope. And so since it's nope we're going to come down here and we'll print out this done with loop line. So that's the basics of how these while loops work. We're specifying a loop condition as long as that condition is true we'll keep executing the code inside of the loop. And after every execution of the loop we're going to come back up and check the condition again. So that's how we end up with this printing out down here. So that's the basics of a while loop. And we can use these while loops to do all sorts of things. Like while loops are very very powerful. In this tutorial I'm going to show you guys how to build a basic guessing game in Python. And in this guessing game we're actually going to be using all sorts of cool programming structures that we've learned up to this point in the course. So we're going to be using things like if statements and while loops and variables and all these cool things in order to build this game. So the basic idea is we will specify like a secret word. So we'll have a secret word that we store inside of our program. And then the user can interact with the program and try to guess the secret word. And so what we want to be able to happen is we want the user to be able to keep guessing what the secret word is and keep typing in different responses until they get the secret word right. So that's the basics of what this game is going to be. And now let's go ahead and create it. So the first thing we want to do is create a variable to store our secret word. So I could say secret word and we're just going to set this equal to a secret word. So why don't we make it draft. That's a pretty good secret word. And now what we want to do is we want to create a variable that will store the user's response. So I want a variable that will store like all the guesses that the user makes. So I'm just going to call this guess. And I'm just going to set it equal to an empty string right now. So now we have the secret word and we have a variable to store the user's guess. And what we need to do is we need to be able to prompt the user to input the secret word. But here's the catch. What we want to happen is we want them to enter the secret word. And if they don't guess it correctly, we want to prompt them to enter it again. So we can't just use a single input statement. We actually have to use something called a while loop. And we can use a while loop in order to continually ask the person to guess the word until they guess it correctly. So let's go ahead and create our while loop. So I'm going to say while. And after I say while, I need to specify a looping condition or a looping guard. Basically, this is something that as long as it's true, we're going to keep looping through this loop. So basically, I want to say I want to keep looping as long as the user's guess is not equal to the secret word. So as long as they haven't guessed the secret word, I'm going to keep going through this loop. And inside of this loop, what we're going to do is we're going to ask them to input the secret word. So I can take this guess variable and I can set it equal to input. And I'm just going to say enter guess. And so over here, we're basically telling the user to enter in their guess. I'm storing whatever they enter inside of this guess variable. And then what's going to happen is we're going to come back up here. We're going to check to see if the guess is equal to the secret word. If the guess isn't equal to the secret word, then we're going to do it again. But if the guess is equal to the secret word, then we're just going to break out of this loop. And so we can come down here. And we can just print out a success message. So I could say you win because they got the secret word. So this is a very, very simple program. But this is essentially all of the code that we need to be able to build a game like this. So let's go ahead and play our game. We can run it and see how we did. So I'm going to click play. And down here, you can see it's prompting us to enter a guess. So I'm just going to type in some, you know, random text, we can type in whatever we want. And as long as we're not entering that secret word, it's going to keep prompting us to enter different information. But if I enter in the secret word, so if I enter in draft, now all of a sudden the program is going to terminate and it's going to say, Hey, you win, because we were able to guess the secret word. So that's like a really cool way for us to be able to do this. And we actually have a fully functional guessing game. But I think this guessing game could actually be improved quite a bit. A lot of times when we're making a guessing game, we want to set a limit. So in other words, I want to set a limit for the number of times that the user can try to guess the word. So let's say that the user has three tries, right, they have three guesses in order to guess the word. And if they can't guess the word after three tries, then they're going to lose the game. But if they can guess the word inside of three tries, then they'll win the game, right? I think that would be a little bit more of a fun game. So why don't we try to program that game? Basically, we're going to set a limit on the number of guesses that the user can have. In order to do this, we're going to have to create a couple more variables down here. In other words, we're going to have to store a couple more pieces of information. The first piece of information I want to keep track of is how many times the user has guessed, right? So we can just make a variable called guess count. And we'll just set this equal to zero because initially, the user won't have guessed down in this while loop. Every time we go through the loop, I want to increment that guess count, right? So every time we've gone through this while loop, I want to increment that count because that means the user will have guessed. So down here, I'm going to say guess count plus equals one. And this is just going to add one to the guess count, actually whoops. Alright, so after each iteration of this loop, we're going to go ahead and add one to the guess count. Alright, so that's the first variable that we're going to need. We're also going to want to store another variable. And this is going to be called guess limit. And basically, this is going to tell us how many times the user can guess the word. So I'm going to it's going to be guess limit. And we'll basically just say three. So let's say that the user has three tries to guess the word three strikes and you're out. So the user, if they can't get it in three tries, then we're going to basically say that they lose the game. And I'm also going to need one more variable here, which we're going to call out of guesses. And I'm just going to set this equal to false initially. So this out of guesses variable is going to be a Boolean. And it's going to tell us whether or not the user is out of guesses. So if out of guesses is true, that means they have no more guesses, right? They basically lost the game. And if out of guesses is false, that means that they still have some guesses left so they can keep playing. All right, so let's use these different variables in order to make our program more functional. So the first thing I want to do is when I go through this loop, I want to check to make sure that the user has more guesses, right? In other words, before I let the user enter a guess, I want to check to see that they haven't already used up all their guesses. So down here, I can make an if statement. I can say if and inside of the condition, I want to check to see that guess count is less than guess limit. If guess count is less than guess limit, that means that they haven't guessed the total number of guesses that they have. So they have some guesses left. And if that's the case and if that's true, then I'm going to go ahead and give them a guess and then we'll increment the guess count. If this isn't true, in other words, if they have reached their guess limit, then I'm going to want to set out of guesses equal to true, because they're out of guesses, right? They have no more guesses because the guess count wasn't less than the guess limit. And so that means that they're out of guesses. So they have no more guesses. So there's actually one more thing we need to do inside of this while loop, we need to add another condition on to this loop guard. So right now, we're going to keep looping as long as the guess is not equal to the secret word. But remember, if the user's out of guesses, in other words, if they've reached their guess limit, we don't want them to guess anymore, right? So if they ran out of guesses, then we want to basically break out of this loop and not give them any more guesses. So I'm going to go ahead and add another condition onto here. And I'm going to say, while they haven't guessed the secret word, and they're not out of guesses. So it's going to be not out of guesses. Then we're going to keep looping. So as long as they haven't guess the word, and as long as they still have some guesses left, we're going to keep looping. But otherwise, we're going to break out of the loop. And so down here, we're printing out you win. But actually, when we break out of this loop, there's going to be two possible scenarios. So again, there's two possible ways that this loop could end, right? Either the guesses equal to the secret word. So either the user guessed the word correctly, or the user ran out of guesses. And so there's two situations down here that we need to account for. And so I'm going to use an if statement to figure out which is which. So I'm going to say if, and we're just going to type out of guesses. And if the user is out of guesses, then I want to print out of you lose. So we're basically going to be like, you lost the game. Otherwise, though, if they're not out of guesses, that means that they guess the word correctly. So we're just going to print out you win. Alright, so now we have all the logic for this little guessing game setup. And let's see if we can run it and play through it. So I'm just going to run this program. And now it's going to tell us to enter a guess. So why don't we enter more guesses than we have? So we're going to try to lose the game. So I'm just going to enter one guess, two guesses. And now I'm on my final guess. So if I don't get it here, we should actually lose the game. And you can see it says out of guesses, you lose. So we weren't able to guess it in the number of tries that we had. Let's run the program again, and we'll try to win the game. So we'll get a couple wrong. Let's say we're on our last guess. And I'm like, Okay, I can do this. So I type in the word and bam, we won the game. So that's how we can basically create a game where we have a guess limit. So this is a lot of code. Let me walk you guys through this one more time so you can just get a full understanding of what we're doing. Up here, I created a few different variables. We created this secret word variable, and we created this guess variable. And then we also created some more variables. So we created this guess count variable. And this just keeps track of how many times the user has guessed the word. And you can see down here, every time we give them a guess, we're incrementing the guess count. We also have guess limit. And guess limit is telling the program how many times the user can guess. So before I go through this while loop, the first thing I'm doing is I'm checking to see that the guess count is less than the guess limit. In other words, do they still have some guesses left? If they do, then we're going to get the input from the user. Otherwise, we have this other variable up here called out of guesses. And out of guesses is going to tell us whether or not they have some guesses left. So if this is equal to false, that means they have some guesses. If it's equal to true, however, it means no more dice, no more guesses, they are done. So they lost the game. The last thing we needed to do was specify an additional condition up here. So we are going to keep looping through the code inside of this loop, as long as the conditions up here are true. So as long as they haven't guessed the word, and as long as they're not out of guesses, we are going to keep looping through. And so when eventually the user does break out of this loop, there's going to be two possible situations. The first situation is that they ran out of guesses. And so we want to check to see if that's the situation. I want to check to see if they're out of guesses. If they are, we'll print out a lose message. If they're not, then they must have guessed it correctly. So they win. And so that is how we can use while loops and if statements and also variables in combination with each other to build a pretty awesome guessing game. In this tutorial, I want to talk to you guys about using for loops in Python. Now a for loop is a special type of loop in Python, which allows us to loop over different collections of items. So a lot of times we'll use for loops in Python to like loop through different arrays, or we can loop over like the letters inside of a string, or we could just loop through like a series of numbers. So for loops provide a very specific purpose. And the easiest way to kind of wrap your head around why for loops are useful is just for me to show you guys a bunch of different examples. So that's exactly what I'm going to do. We're going to look at why for loops are awesome. So down here in my text file and my Python file, I'm going to write out a couple of different for loops. So the way that we create a for loop is just by saying for. And now what I want to do is specify a variable. And this variable is going to essentially represent a different value every time we go through this for loop. And you guys will see how that works in a second. But just know that this variable is going to be used on every iteration of our for loop. And each time it will most likely have a different value. So in our case, I'm just going to call this letter. And I'm going to say for letter in. And now what I want to do is I want to specify a collection that I want to loop over. One example of this would be like a string. So I could put a string in here. I could just put like draft Academy. And now I can just put a colon. And so basically what this is going to say is it's going to say for every letter inside of draft Academy, I want to do something. And so down here inside of this for loop and again, we need to indent this. We can put what we want to do with each letter. So let me just show you guys like basically what this is going to do. So I can print out a letter so I can print out this letter variable. And it's actually going to print out a different letter inside of this draft Academy string on every single iteration of this loop. So I'm going to run this program. And down here inside of my console, you'll see that I'm basically printing out draft Academy. So on the first iteration of the loop, I printed out the first letter in draft Academy, which was G. On the second iteration of the loop, I printed out I said, third was R, fourth was A. So I'm essentially just looping through all of the letters inside of draft Academy. So I'm saying for each letter in draft Academy, I want to print out that letter. And so this is kind of like how four loops can be used. We can define a variable. And that variable will change on each iteration of the loop, right? So on the first iteration of the loop, this letter variable represented a G. On the second iteration of the loop, the letter variable stored at the value I, etc. Right. So we went through this entire string, and we were able to print out each letter. So in addition to using this with strings, we can also use this with other collections, for example, like an array. So if I created an array up here, let's just call it friends, I'm going to set this equal to a bunch of different values. So we can put like a list of our friends in here, we can say like Jim, Karen, and Kevin, instead of saying the letter, why don't we call this friend? And I can say for friend in friends. And now we'll print out the friend. So over here, I'm saying for each friend inside of this friends array, I want to print out the friend. So now we'll actually be able to print out each element inside of that array. So down here, you'll see we're printing out Jim, and then on the second iteration, we're printing out Karen, and on the third, we're printing out Kevin. So I'm able to loop through all of the values inside of the array. And just so you guys know, like, you can name this variable, whatever you want. So I could name, I could give this like any random name. And if I want to access it, though, I have to access it using that same name. So we can loop through something like an array, we could also just loop through a series of numbers. So I could say index over here. And again, this can be anything. I'm just going to call it index. So we could say for index in range, and then in here, I can pass in a number. So I could pass in like 10, for example. And down here, I'm just going to print out the index. When I run this program, you guys will see that it's basically going to print out every number in the range from zero to 10, not including 10. So starting with zero, it's going to print out zero, one, two, three, four, five, six, seven, eight, nine. But notice that it didn't print out 10. So it's essentially just printing out all the numbers between zero and 10, not including 10. You can also specify a range of numbers. So I could say, for example, like three and 10. And now this will print out all the numbers between three and 10, not including 10. So we're on this program. And you can see we print out three, four, five, six, seven, eight, nine, and not 10. So whatever value that you put here in this second position is not going to get included in the range. And ranges can be really useful. So for example, I could use a range to loop through an array, just like we did before. So if I wanted, I could say something like four index in range. And now inside of this range, I can pass in the length of the array. So just so you guys know, if I wanted to get the length of this array, in other words, if I wanted to figure out how many elements were inside of it, I could just type out LEN and then inside parentheses, the name of the array. And so this is going to spit out three, because there's three elements inside of here, right? Kind of makes sense. So what I can do is I can say down here inside of this range function, I can just type in LEN and then friends. And so what this is going to do is it's going to essentially give me a range between zero and the number of friends inside of this list. So down here, I could actually type out friends index. And this will allow me to access each individual friend inside of this list, just like we did before. But now I'm doing it with a range. So you can see I'm typing out Jim, Karen and Kevin. So actually, for each iteration through this loop, it's basically going to be printing out friends zero, friends one, and then friends two, because in here, we're passing in a three. And remember, whenever I pass in there, it's going to range from zero all the way up to that number, but not including that number. So that's another way that we could print out all the elements in the array. And looping through something like an array is actually a very, very common use case for for loops. But like I said, we can use for loops to loop through essentially any collection that we have. So we could loop through like a string, we could also loop through, you know, something like an array. So this can be really useful. And that's one of the basics of for loops in Python. And I also want to show you guys one more example, just while we're here. So why don't we go ahead and print out a range up to five, right? So this will just be a simple program. You can use all sorts of logic inside of these for loops. So let's say that I wanted to do something special on the first iteration of the loop. So I could say, if index is equal to zero. And if the index is zero, then we know it's the first iteration of the loop. So I could do something special, I could like print out first iteration. And then otherwise, we could just print like not first. So this would be an example of like, maybe you want to do something on the first iteration of the loop and do something else on subsequent iteration. So if I play this, you'll see only on the first iteration is it printing this out. And otherwise, it's printing out other stuff. So, you know, don't be afraid to put some complex logic inside of these for loops, because it can really make your program is more powerful. In this tutorial, I'm going to show you guys how to build an exponent function. Now an exponent function is basically going to allow us to take a certain number and raise it to a specific power. So in Python, there's actually a really easy way to do this. I can come down here and I can print, we can say like two, and we can just do two multiplication signs. And I can say three. And this is basically just going to be two raised to the third power. So you can see here, I can just print this out and we get eight, because that's too cute. So it's really easy to do exponents in Python. But I want to show you guys how we can use something like a for loop in order to create a function like this of our own. So we'll actually create an exponent function that will basically do this and we'll use for loops to do it. So let's create a function. So I'm just going to say def. And now we need to give this function a name. So why don't we call it raise to power. And inside of here, I'm going to accept two parameters. The first parameter is going to be the base number. And then the second parameter is going to be the power number. So we're going to take the base number and raise it to the power number. So over here, we can just make a colon. Now, inside of this function, we need to start writing some code. Here's the thing. Inside the function, we don't necessarily know the value of this pound. Right. For example, if we knew that we were just trying to like square this number or cube this number, I could just return like base num times base num, right? That would square the number or I could cube the number base num. So right. So this would be like the number cubed. The problem is though, we don't know like right off the bat what this value is going to be. Right. This could change like the user can decide that. So in order to write this function, we're actually going to need to use a for loop. And I'm going to show you guys how we can use a for loop to basically figure this out. So the first thing I want to do is create a variable. And I'm just going to call it result. And we're just going to set result equal to one. So we're going to start this off at one. Now I want to create a for loop. So I'm basically just going to say four. And over here, I basically want to specify like a index. So I'm going to say index in, and now I want to specify a range and a range will basically range us through a collection of numbers. So basically, I want to multiply the base num by itself as many times as the power num specifies. Right. So over here, I can just make this a range of power num. Right. And so we'll basically loop through this for loop as many times as pound them. So if pound them is two, we'll loop through it twice. If pound them is four, we'll loop through it four times. And every time through the loop will multiply base num by itself. Or actually, you'll see we're going to multiply it by this result. So down here inside of this for loop, I can basically say result is equal to result times base num. This should actually give us everything we need to take this number to the specific power. So the actual like result, you know, of doing the math is going to get stored inside of this result variable. So the first time through the loop, we're just multiplying base num by one. Right. And so now result is going to become the same value as base num. The second time through the loop. So this would be if we were squaring the number, we're basically multiplying result by base num again. So it's essentially just base num times base num. The third time through the loop, we're multiplying result times base num. So we're essentially just like cubing the number. So that's essentially what this for loop is doing for us. So the last thing I want to do is right here below this for loop, I'm just going to return the result. So we'll be able to return whatever the result of raising the number to the power was. All right. So let's come down after this function. And we're just going to call it. So I'm just going to say, actually, we'll print out the answer. So I'm going to say raise to power. And inside of these parentheses, remember, we can pass two numbers. So let's raise three to the second power. So we're just going to square three. And we'll see how this works. So throw on the program. And you can see down here in the console we're getting nine. Let's try something a little bit crazier. Let's try three to the fourth power. And we'll run this and get 81. So that's three to the fourth power. Let's try two to the third power. And we're getting eight. Yeah, so that makes sense. So our raise the power function is working just as expected. And I'll just walk you guys through it one more time. So inside of this function, we're taking in two pieces of input, we're taking in a base number, and we're taking in a power number. So that's like, the base number is going to be taken to the power number. I'm defining a variable here called result. And result is where we're going to store the actual result of doing the math. Now we specify this for loop. And I'm basically saying that I want to loop through this range of numbers. When I put pound on here, it's basically going to range from zero all the way up to but not including the power number. So we'll basically loop through power number of times, if that makes sense. And then every time through the loop, we're just multiplying result by base num. And then we're just returning results. So that's the basics of building a power function. And obviously, like if you're just trying to take a number to a power and Python, it's really easy. But this kind of shows you like the internal workings, right? For a function like that to work, we would have to actually type something out just like this. And this tutorial, I want to talk to you guys about two different concepts in Python. It's going to be a pretty cool lesson. First thing I want to show you guys though, are two dimensional lists. So down here in our Python file, I just want to create a basic list. So I'm just going to call this number grid. And I'm just going to set this equal to a normal list right just like this. Now normally if we were creating a list, I could just put in a bunch of attributes and bunch of elements, right? And now all of these elements are inside of this number grid list. Everybody's happy. But another thing I can do is I can make all of the elements inside of this number grid list lists. So the first item in the number grid list is going to be a list. The second item in the number grid list is going to be a list, etc. So I'm going to show you guys how to do that. I can basically just come down here and where I would normally put the first element in the list, I can just create another array. So I'm just going to make an open and closed square bracket. And now I'm just going to say 123. And I can create the next item in my list. I can say 456. And let's make another item in this list. I can say 789. And finally, we're going to put one more list inside of the number grid list. And it's just going to have zero in it. So inside of this number grid list, right, this high level overall list, we have four elements. And all of those elements are themselves lists. So essentially what we're doing is we're creating a grid, right? This grid has 1234 rows, and 123 columns, right, four rows, three columns. And that's kind of like why these can be useful is we can create a grid like structure inside of Python using two dimensional lists. So this is a pretty cool list structure. And I want to show you guys how we can access individual elements inside of this list structure. So, for example, let's say I wanted to print out one of these values. Let's say I wanted to print out this one right here. The way I can access it is by saying number grid. And the first thing I want to do is make an open and close square brackets. And in here, I want to put the index of the row that I want to access. So this would be like row zero, because that's the zero element in the array. This would be row one. It's at index position one. This would be row two, row three, etc. So I could put row zero. And now right next to this, I'm going to make another square bracket. And I want to put the index of the column. So this would be like column one, column two, column three. So I'm going to put another zero, because this is at the zero index of this first array. So I just put zero zero here. Now we can print this guy out to the screen. And you'll see down here that we get that one. So I could also do this for like for this eight, for example. So this is going to be zero one two. It's going to be row two and column one. And now we should be able to print out that eight. So that's basically how we can access elements inside of this 2D list. The next thing I want to show you guys is a nested for loop. And a nested for loop is a situation, like I said, where we have a for loop inside of a for loop. And I'll show you how we can use this nested for loop in order to print out all the elements inside of this array. So I basically show you guys how to parse through a two dimensional list or a two dimensional array. Alright, so basically we're just going to create a normal for loop. So I'm going to say four, and I'm just going to say row in number grid. And I'm using the word row here because I'm kind of seeing these guys as rows, right? These are sort of horizontal rows in our little grid. So for each of those rows, for each of the elements inside of number grid, I want to loop through. So I could actually just print out each row right now. And it's just going to print out all the rows inside of this list. You can see down here, we basically just get exactly what we have up there. But I want to be able to access each of these individual attributes inside of each of these array elements. So we can actually create another for loop. And I'm going to put that for loop inside of here. So now I'm going to say for column in row. And basically what this is going to give us is each individual column or each individual element inside of these arrays. So for example, inside of the arrays that are the elements of the number grid. Hopefully that makes sense. So down here, now I can just print out column, and this should actually print out every single value inside of this two dimensional array. So let's go ahead and run this program. And down here, you'll see that we're basically printing out one all the way down to zero. So we're printing out all of the elements inside of all of the arrays inside of the number grid. So that's how we can use two dimensional lists and nested four loops together. And both of those things are actually pretty handy in Python. In this tutorial, I'm going to show you how to build a basic translator in Python. So essentially, we can take in a string so we can take in like a phrase or a word, and we'll be able to translate it into a different language. So over here, I have this little file, and it basically specifies this language that I made up. So I'm calling it the draft language. And in the draft language, all vowels become G. So if I was going to translate an English word into a draft word, for example, the word dog, I would look through the word dog in any instances where there was a vowel. So in our case, let's just say A E I O U, I would convert that vowel into a G. So dog would map to D G G, cat would get mapped into C G T. So those are the basic translation rules. Obviously, this is a pretty simple language, but you get the point any vowel is going to become a G, and then we'll get the draft language. So we're going to build a draft translator. Over here in our Python file, let's start making this translator. The first thing I'm going to do is just define a translate function. So I'm going to make a function here, and I'm just going to call it translate. And inside of these parentheses, we want this to take one piece of information, which is going to be the phrase that we want to translate. So I'm just going to say phrase. And now inside of this function, we need to figure out like, okay, how can we translate English into our draft language? Well, remember, the rules is basically just any vowels become G's. So the first thing I want to do is create a variable. And this variable is going to be the translation. So this will be like the final result that we're going to return to the user. So I can say translation. For now, I'm just going to set it equal to the empty string. So this is just going to be like a completely empty string. It's not going to be doing anything. And now what we want to do is we basically want to loop through every letter inside of this phrase. And if it's a vowel, we want to change it to G. And if it's not a vowel, we want to leave it alone. And we're essentially going to be looping through phrase. And we're going to be adding the letters onto this translation one by one. So let me show you guys how we can do this. I'm going to make a for loop. So I'm going to say four. And I'm just going to say letter in phrase. And so now, when I loop through here, I can access each individual letter inside of the phrase that they passed in. So what I want to do is I want to check to see if the letter is a vowel or not, right? If it's a vowel, then we can add a G onto translation. If it's not a vowel, then we can just add on whatever letter it was onto translation anyway. So I'm going to use this if statement. I'm going to say if. And there's actually this special thing we can do in Python, we can check to see if something is in something else. So I can say if letter in, and over here, I'm just going to type out all the vowels. So we'll say A E I O U and A E I O U. So I'm basically checking to see if the letter is inside of this string. And if the letter is inside of here, then we know that it's a vowel. So down here, we can handle that case. So I can say, translation is equal to translation plus G. Because if this letter is a vowel, we just want to convert it into a G. Otherwise, though, I can basically just say, translation is equal to translation plus letter. So in the case where we have a vowel, I'm adding a G onto translation. In the case where we don't have a vowel, I'm just adding on whatever letter it was onto translation. So finally, down below this for loop, we just want to return the translation. So I'm just going to say return translation. And now we have a awesome translate function, and it should probably work. So let's come down here and we'll test it out. So why don't we allow a user to input some information. So I'm basically going to call this function. Actually, we're going to print it out. So we'll print this out. And I'm going to call this function translate. And inside of here, I'm actually just going to pass whatever the user inputs. So I can just say input. And inside of these parentheses, I can say the prompt. So enter a phrase. And so now I'm basically combining all these statements together. I'm saying I want to print out the translation of whatever the user enters in. So let's go ahead and run this program, and we'll see how we do. So I'm going to run the program. It says enter a phrase. Actually, let me format this a little bit better. Okay. All right. So it says enter a phrase. So let's go ahead and do that. So let's just type in the example we used before. I'm going to say dog. And so now out pops the answer, which is d g g. So that's kind of cool. And we can just keep running this as many times as we want. So I could type in like to be or not to be. So this is like a little bit longer of a string. And you can see it translates it into our draft language. So that's basically how we can create our little translator app. And that's pretty cool. And so you can see we're using a for loop in combination with an if loop. And that's a really powerful structure. And actually, there's one place over here where we can make this a little bit more efficient. So instead of saying if letter in this string, you'll notice here, I'm checking to see if it's in all the lower case and the uppercase. I could actually just say if letter dot lower in. And now I only have to type out the lower case letters. And it's still going to do the same exact thing. So that's a little like hack or whatever that we could use. And there's also one more problem with this program. So you'll notice down here, we're setting the translation equal to the translation plus g. But the problem is if I was to start my word inside of the phrase with a capital vowel. So in other words, if I said like on, you'll notice that when this gets printed out, it gets printed out as lowercase g and so it's not keeping our uppercase syntax. And that's kind of a problem. So we can actually use another if statement in here. And we can check to see if letter dot is upper. And if the letter is uppercase, then we can just set the translation equal to the translation plus a capital G. Otherwise, we can just set it equal to the lowercase g. And so now we're able to control both of those situations. So let's just test this and see if it works. Enter a phrase, say on. And now we're keeping that capital letter. So those are just a couple different ways that we could make this program a little bit better. But the basic concept is we have a for loop and then we have some if loops inside of it. And we're calling this awesome function that can translate a word for us. In this tutorial, I want to talk to you guys about comments in Python. This is going to be a pretty short tutorial. I just want to give you guys an overview of what comments are and how we can use them in our Python programs. So over here in my Python program, I just have this line here. It says print comments are fun. So if I run my program down here inside of the console, it's going to print out that comments are fun, right? So any code that I put over here is going to get executed by Python. But there's actually a special line of code that we can write and it's called a comment. And a comment is basically a line inside of our Python file that's just not going to get rendered by Python. So when Python sees it, it's just going to ignore it. It's not going to execute it. It's not going to print anything out. It's just going to kind of ignore it. And comments are going to be just used for us humans. So a comment is used for like me or another developer to write a little comment, a little like plain text, you know, comment inside of a file. In order to create a comment, I could use this hashtag symbol. So I can click hashtag and now I am writing a comment. So I can write whatever I wanted in here. I could say like this program is cool. And you'll notice when I put on the program, that doesn't show up anywhere, right? It doesn't matter what I put after this hashtag. This is just like ignored by Python. It's just for me or another developer to come in here and use. So a lot of times if you want to write like a little note inside of your Python files, or maybe you can write yourself a little reminder, or if you want to write a line to like explain a line of code. So for example, I could write a comment that would explain this print statement. So I could say like this prints out a string, right? Now anybody looking at my file would be able to read this and they'd be like, Oh, that's what this does. Okay, cool. So comments are useful for leaving little comments in a Python file. If you want to make comments on multiple lines, you can just create a new line and use another hashtag. And so then I could type out whatever my next comment was. And generally, if you're going to put comments on multiple lines, you want to just use multiple hashtags. But there's actually another way that you can write out comments. So you can use a triple quotation mark. So I'm typing out the single quote. And I'm typing it out three times. So you can see here up here, we have this three times, we have this three times. So in here, I can, you know, write any comment that I wanted. So I could put, you know, as much text up here as I would want. And same thing, when I run this program, it's just not going to get rendered. So this is another way to make multiple line comments. But the, like, official Python, like style guides or whatever, just recommends that if you're going to put comments on multiple lines, you use these hashtags. So, you know, you can really do whatever you want. But if you want to be like super Python official, then use these hashtags. Comments can also be useful for doing something called commenting out a line of code. A lot of times when you're writing a program, you might have a line of code in there that is maybe like potentially messing stuff up. And so what you can do is you can actually comment out that line of code. So I could put a comment in front of this line of code. And now when I run my program, the program is going to run, but it's not going to use this line. So sometimes if you're trying to see if like a line of code is causing you trouble or if you want to see what your program would be like without a line of code, or even like a block of code, you can just comment it out. And that way you're not actually deleting the code from your file. You're just commenting it out. So Python is going to ignore it. And those are really the two uses for comments is to write little notes, write little comments about different things or to comment out code. And as you go forward in Python, I'm sure you'll find uses for comments. In this tutorial, I want to talk to you guys about catching errors in Python. Now, a lot of times when we're running Python programs, you'll encounter different errors. So different situations could come up and your program might throw an error or it might throw an exception. And a lot of times when these situations happen, they'll completely stop your program from running. And what we can actually do is we can watch out for, you know, certain specific errors that are going to pop up in our program and we can actually handle them. So instead of our program just breaking and stop executing, we can actually handle those errors and do things when they occur. So I want to show you guys an example of using this down here. I'm saying number is equal to int input enter a number. Basically what's happening is I'm prompting the user to enter in a number using this input command. And then I'm converting whatever they entered into an integer. So as long as they enter in like a valid integer, I can convert it into an integer. So I can convert it into like a whole number and I can store it inside of this number variable that I'm just printing it out. So let's try to execute this program. I'm going to run the program and you'll see down here it says enter a number. So we can enter in like four, for example. And when I enter in four, everything's going to work and it's just going to print out four and everything is right in the world. And actually, I'm going to modify this up here. So it's a little easier to see. But let's say we run the program again. So it says, okay, enter your number. Let's say that I break the rules and I don't enter a number. So I just ignore what the prompt says and I put, you know, some random text in here. Now when I enter this, the program is going to throw an error. You can see down here, it says value error invalid literal for int base with base 10. Basically, hey, you didn't enter in an integer like you said you would, right? We told them to enter in a number. They entered in text. So it broke the program. And this is a situation that happens a lot. So there's a lot of different situations where something can just go wrong in our program. And I'm until now we've just kind of accepted it as a reality. But if you're writing a real live Python program, you don't want something like this to trip up your program. You don't want the entire program to break when somebody just forgets to enter in a number, right? You want to be able to handle all these different situations. And in order to handle them, we can use something called a try except block. And a try except block will basically allow your program to try out a piece of code. And if everything goes well, then we're great. Like we could try out entering in the number. And if the user enters in the correct number, great. But if they don't enter in the correct number, then we can basically like account for that. So they entered in something like a string when they're supposed to enter in a number, we could tell them like, Hey, you entered in the wrong thing. So I'm going to show you guys how we can use these try except blocks. I'm going to come up here, and I'm just going to say try. I'm going to make it colon. And I want to indent both of these things. So both of these things are going to be inside of this try block. Now I'm going to make a new line. I'm going to come down here and I'm just going to type out. Except, and I'm also going to put a colon here. And down here, I'm just going to print something out. So I'll just say like invalid input. So now, since I put this code inside of this try block, if the user enters in something wrong, it's going to be able to catch it. So it'll be able to catch what the user does wrong and print out invalid input onto the screen. So let's go ahead and run our program. And it's just going to say enter a number. So we're going to ignore that. We'll enter this in. And now instead of yelling at us and breaking the program, it just says, Hey, invalid input. So it was able to handle the error they got called. It was able to handle the invalid input error. Basically just told us, Hey, no more input. So this is a really powerful thing that we can do in our Python programs. Basically just to protect our programs, right? If I want to have my program running for long period of time, I can't have something as simple as an invalid input, trip it up. So I can catch that invalid input using these try accept blocks. But here's the thing. You'll notice that this little guy down here is getting highlighted. And let's just see what it has to say. So it's basically saying to broad exception clause. And this is a message that we're getting because when I just say accept, this will catch any error under the sun. So anything that can go wrong on my program for the most part, this is going to accept it. So let me give you guys an example. Let's say I had in my program, I was creating a variable, right? So I wanted to create a variable called value. And I set it equal to 10 divided by zero. Now, if you know anything about math, you'll know that you can't divide a number by zero. It's not possible. So the program isn't going to be able to handle this. And you'll see that this is going to throw an error for us. So when I run the program, it basically says zero division error division by zero. We're not allowed to do that, right? If I took this and I put this down inside of this dry block, and I just pasted it in here, it's going to get caught by this exception that we wrote down here. So it's going to get caught by that accept. So when I run the program, you'll see it says invalid input. But the problem is that we didn't input something that was invalid, right? We just divided by zero, but it wasn't able to handle that. Right. So it could not divide by zero it through an error. So even though we didn't get an invalid input, even though it was because we divided by zero, it's still printed this out. And this brings me up to another point is we can actually catch, or we can accept specific types of errors. So for example, in this case, we got a division by zero error. In this case, we got an invalid input error, right? We put something in that was wrong. You couldn't convert the value. So I can create two different accept blocks to catch two different types of errors. So down here, I can just make a space and I can specify the type of error that I want to catch. So when we divided by zero, it was zero division error. So if I just put zero division error in here, now it's going to catch that zero division error. So I can say divided by zero. I could also make another accept. So I could say accept. And we can catch the other exception that we got. So I think it was a value error, right? It was, we put in the type of value inside of that input. So now we can print out invalid input. So with these two accept blocks, we're basically able to handle both of these situations. So for example, if this ends up breaking the program, this division by zero, then it'll be able to catch that. So down here, it'll tell us, Hey, you divided by zero. But if I was to get rid of this line of code, and I just entered in the number wrong. So I came down here and I entered in a string instead of a number. Now it's going to tell us invalid input. So we're going to be able to specify what happens when certain things break. So when we get a valid, when we get a value error, we can say invalid input, when we get a zero division error, we can say divided by zero. So depending on what breaks, depending on what happens, we can actually do different things. And I want to show you guys one more thing we can do, which is we can actually store this error as a variable. So I can say accept, I can say as, and I can type in a name here. So a lot of times people will just say like, e r r. And down here, I can print out the actual error. So I can just print e r r. And so if we end up dividing by zero. So if I say answers equal to 10 divided by zero, we're going to throw this error, and it's going to print out what went wrong. So now I can run this program. And it just says division by zero. So it just printed out the error that we got. So that's another useful thing you can do is you can actually like print out the specific error that got thrown. Now, a best practice in Python is to use these specific errors. So you always want to accept and accept for a specific error. What you don't want to do is just say accept, and then just accept anything under the sun. It's just too broad. And it's not a good practice in Python. So you always want to be catching specific errors like this. In this tutorial, I want to talk to you guys about reading from external files in Python. Now a lot of times in Python, you're going to want to read from files that are outside of your Python file. So you might want to read information from like a text file or a CSV file or like an HTML file. And you can actually use something called the Python read command. And it will allow you to read a file that is stored outside of your Python file. So you can use these files to get information or you can parse through different files and do different things. So I'm going to show you guys the basics of reading files, opening files, closing files, doing all that stuff. Over here, I have this file called employees dot text. And it basically just lists out a bunch of different employees, like these could be employees in an office or whatever. So it's just listing out all of this information. So let's say that inside of my app dot Python file, I wanted to read the employees inside of that file. The first thing I have to do is actually open that file from inside of Python. So I can use a special command called open. So I can say open. And then in here, I can type in the name of the file that I want to open. So this is either going to be a relative path to the file, an absolute path to the file, or just the files name if both files are in the same directory. So in my case, app dot Python and employees dot text are in the same folder, like they're in the same directory. So I can just type out the name of the file. I can just say employees dot text. And then I want to put one more thing inside of this open function. And it's going to be the mode that I want to open the file in. So you can actually open files in a couple of different modes. And the first mode is called read. So I can just put an R here and that's going to stand for read. And this basically means that I only want to read the information inside the file. I don't want to modify it. I don't want to change it. I just want to read it. I just want to see what's in the file and do some stuff with that information. Another mode is called write. So I can type in this w and writing basically means that you can change the file, right? You can write new information. You can change existing information. There's another one called a and a stands for append. And this basically means that you can append information onto the end of the file. So you can't modify any of the information in the file. You can't change any of the information, but you can add new information. And there's one more, which is R plus. And this basically means read and write. So this will give you all the power of reading and writing. So in our case, we're just going to be working with regular R. So we're going to be reading from the file. Now this open function will essentially just open the file. So it's going to like go over to that file inside of our file system, open it up, and it'll allow us to read through it. But generally, we're going to want to store this opened file inside of a variable. So I can create a variable and we can just call it employee file. And I'm just going to set it equal to this open function. So now the open employees dot text file and all the content inside of it is stored inside of this employee file variable. Now, whenever you open a file, you always want to make sure that you close the file as well. So just like we have this open command, we also have an close function. So I can come down here and say employee file dot closed. And this is essentially just going to close the file. So we're no longer going to be able to access it. And generally, it's a good idea whenever you're opening up a file, you want to also make sure that you're closing the file at some point. So generally, once you're done reading it, you can just close it. So that's kind of like how we can open and close a file. Now, let's talk about how we can get information from the file, right? There's no point in having the file that we can't figure out what's in it. So there's actually a few different functions that we can use on this employee file to figure out what's inside of it. And I'm going to show you guys some of those. So I'm just going to make a print statement. And inside this print statement will basically just print out some information about the employee file. So the most basic thing we can print out is just the entire contents of the file. But before I do that, I want to show you guys how you can check to make sure that a file is readable. So before we do anything else, generally, it's a good idea to make sure that it's possible to read this file. And there's a function inside of Python, we can use called readable. So I'm just going to type out employee file dot readable. And this is going to return a Boolean value. And it's going to tell us whether or not we can read from this file. So I'm going to run my program. And you'll see down here, we get a value of true. And that's because we set the file with a read mode. So it's in read mode, we can read from it. If I was to put a double you here. So if I put like, right, now readable is going to be false, because we can no longer read the file, we can only write to the file. So I'm going to change this back to our so we can just read it. So once you figure out whether or not the file can be read from, let's actually read it. So there's another function called employee file dot read. And this is basically just going to spit out all the information in the files. So when I run the program, it's just going to spit out all of this information, right, all the information that was in that file. I can also come down here and we can read an individual line inside this file. So I can say employee file dot read line. And what this is going to do is it's going to read an individual line inside of this file. So now when I run this program, you'll see it's just reading that first line in the file. And this read line function is actually just reading the first line. And then it's basically like moving a little cursor onto the next line. So if I was to copy this code and then print it again down here, I'm saying employee file dot read line. So it's going to read the first line. And then when I say it again, it's going to read the line after that. So this is actually going to end up printing out the first two lines in the file. So when I run this program, you'll see we print out Jim salesman and Dwight salesman. So if I was to do this multiple times, like I could technically print out every line inside of this file. And you can see we can do that. And so that can be pretty useful for reading multiple lines in a file. But there's actually another function that is better at doing that. And we can say instead of employee file dot read line, we can say dot read lines. And what this is going to do is it's going to take all of the lines inside of our file and put them inside of an array. And so now when I print this out, you'll see we have this array down here. It says Jim salesman, that's the first item in the array, Dwight salesman, the second item in the array, it's basically taking each line and putting it inside of an array. So if I wanted to access a specific line, I can just refer to it by its index in the array. So if I said one, now this is going to give us that Dwight salesman line, because that is at index position one inside of the array. You can also use this read lines function with a for loop. So I can come up here and create a for loop. I'm just going to say for, and we'll say employee in employee file. And then for each employee, we just want to print them out. So and actually started, we have to put employee file dot read lines up here. And so now this will loop through all of the employees in this employee file that read lines array. So we can actually just print out the individual employee. And now this will print out all the employees inside of that file. So it's basically printing out each line in the file. And that can be pretty useful. So you can use all of these different functions like read, read line, read lines, readable, you know, there's a bunch of these different things that we can do to get information from a file. And so there's a lot of cases where you're going to want to be able to parse through information in a file. And this is a awesome way to do it. So just to recap, whenever you want to open a file and read from it, you can just use this open function, type in the name of the file and then the mode, which in our case is going to be our, then you can do all sorts of stuff with it. And you always want to make sure that you close it when you're done. That's just good practice. So that's the basics of reading from files. And hopefully you guys can use this in some way, shape or form in the future. In this tutorial, I want to talk to you about writing and appending to files in Python. So one of the cool things about Python is it allows you to work with external files. So I could have like an external text file and I could actually like completely read all of the information in it. I could parse through it, use that information to do certain things. But in addition to reading a file, I could also write a file. And that's what I want to talk to you guys about today is writing new files and appending onto existing files. Over here, I basically just have some written out and this essentially just reads information from this employees.text file. So you can see over here, I'm specifying the mode, which is R and that stands for read. And then down here, I'm just reading all of the contents of the file and spitting it out on the screen. So I'm going to click the play button over here and you'll see that this executes. So it's printing out all of the lines of code in our text file. So over here, I'm in this employees.text file and it just has all this information, like employees in an office. But let's say that I wanted to add another employee onto here, right? Let's say that a new employee joined our company. So we wanted to add them onto this list. Well, I can come over here to my app.python file. And instead of reading from the file, I want to append to the file. So I want to say a and appending to the file basically means that you're adding some text at the end of the file. So wherever the file ends, you're just going to add some text onto there. So what we can do is we can actually add another employee into the file. So instead of printing something out, I'm actually just going to say employee file dot right. And when I say employee file dot right, I'm going to be able to write something to the end of the file. So I can basically just write whatever I want. So why don't we add in another employee into our employees dot text file. So we can add in another employee. Why don't we say like Toby, and he's going to be in human resources. So now, when I run this program, it's going to add Toby human resources onto the end of the file. So I'm going to run my program. And you'll see that nothing shows up down here in the console. But if I go over to my employees dot text file, all of a sudden we have a new entry over here, it's Toby from human resources, right? So I was able to append a line onto the end of this file. But here's the thing, you need to be careful when you're writing to files, because you can actually mess up a file very easily. For example, I already added Toby here into my file. But if I was to run this program again, you'll see that over here in this employees dot text file, it went ahead and added Toby again, right? So it added this employee here again. And also, you'll notice that in this case, this employee didn't go on to the next line. I accidentally ran my file again, and all of a sudden it messed up this file over here. And so appending, you really need to be careful because if you actually run your file again, or if you, you know, append something on something wrong to the file, it's permanent, like it's getting saved inside of the file. So I want to talk to you guys a little bit more about, you know, appending. Another thing we could do, let's say we wanted to add another employee. And you'll notice over here in this employees dot text file. When I appended it on again, it got appended to the end of the existing line, right? So the first time I had a new line there, but if you don't have a new line at the end of your file, and you all and you want to add a new line, you're going to have to add some special characters. So let's add another employee, and we'll call her Kelly, and let's just say Kelly is in customer service. So Kelly is going to be in customer service. And if I want to add this employee onto the end of the file in a new line, I'm going to have to put a new line character in front of it. So I can say backslash n, and this will append this entry into the file with a new line. So on a new line. So now when I run this, you'll see we get Kelly from customer service on her own line. So you want to make sure that you're aware of like these special characters that you can use, they call them escape characters. And you know, anytime you're adding onto a file, you want to make sure that you're adding on exactly where you want to add on. So in addition to appending to a file, I could also just like overwrite a file or I could write an entirely new file. So since we already have this open, instead of appending to the file, why don't we just write a file? So I'm going to use this W. And now if I say employee file dot right, because I'm using W and I'm not using a, it's actually going to override the entire file. And it's only going to put this inside the file. So when I run this, and we go over to this employees dot text file, you'll see we only have one line inside of this file. Now it's just Kelly customer service. That's because I was using W not a when you use W, it's just overriding everything that's in that existing file. You can also use W to create a new file. So over here, I could say employee file is equal to employees one dot text. And now what's going to happen is when I run this, it's going to create another file for me. So I'm going to run this. And you'll see over here in my file browser, we have this new file employees one dot text. So if I open this up, it has exactly the same stuff as in this employees file. But it basically created a new file for us. And so a lot of times you're going to want to create a new file. And you can use different extensions too. So if I wanted to create like a web page, I could say index dot HTML. And I could also add in some HTML code in here. So if you don't understand HTML, don't worry about it. But if you do, I could put like a paragraph in here, another paragraph, like this is HTML, basically HTML is like a web page. And the point I'm trying to make is that you could write out a web page inside of Python by doing something like this. So now when I play this, we get this index dot HTML file. And it has some HTML inside of it. So that's one way that writing to files can be really useful. You can overwrite an existing file, you can write a new file and create it, or you can append onto the end of a file. And there's tons of applications for writing to files and Python's a great language for working with reading, writing, and doing all that stuff with files. In this tutorial, I want to talk to you guys about using modules in Python. Now, a module is essentially just a Python file that we can import into our current Python file. So for example, if I wrote a Python file that had a bunch of like useful functions or useful variables or, you know, other things like that, I could take that file, I could import it into the file I'm currently working on, and I could actually access all of those functions, all of those variables, all the stuff from that external file inside the file that I'm currently working on. So I'm going to show you guys how we can use modules, and then we'll talk about like, you know, where you can find awesome modules and really why modules make Python an awesome language. So over here in my text editor, I actually created this file and it's called useful tools dot Python. And basically this file just has a bunch of sort of like useful tools that I might want to use in one of my programs. So you'll see over here, I have some variables. This one is telling me how many feet are in a mile. This one's telling me how many meters are in a kilometer. And then we have this list here, which lists out all of the members of the Beatles. I also have a couple different functions down here. So I have this get file extension function. And this basically just will, you know, you give it a file name, it'll tell you what the extension is. And then we have this other function down here, which simulates rolling a dice. So you pass it a number. If I pass it like a six, it would roll a six sided dice. If I pass it a nine, it roll a nine sided dice, etc. So this is like a Python file that I wrote. And it has some useful stuff in it. And honestly, there's a lot of stuff in here that I might want to use in the other Python files that I work with. So let's say I'm over here at this app dot Python file. And I'm thinking to myself, huh, I think I could use one of those functions that was inside of that useful tools file. Actually, yeah, I need to simulate rolling a dice in my program. Well, instead of having to go over here, copy this function and then paste it over here into my program, I can actually just import this useful tools file. And I'll be able to import all of these functions and all of these variables and attributes. So the way I can do that is just by coming up here. And I'm just going to go right at the top of my file. And I'm just going to say import. And then I want to type in the name of the file that I want to import. So I'm just going to say useful underscore tools. And Python is going to be smart enough to know that it should go off and grab all the stuff from this useful tools dot pi file. So once I've used that import statement, I can actually use all of the functions inside of that useful tools file. So for example, I could simulate rolling a dice, I could say useful tools dot. And now I'm actually able to access all of the attributes from inside that file. So when I say useful tools dot, you'll see down here in my little suggestions menu, it's telling me like Beatles feet and miles, get file extension meters and kilometers roll dice. So it's giving the access to all of the stuff that was in that file. So over here, I could just say like roll dice and we can pass this like a 10 will roll a 10 sided dice. And now this should actually be able to run that function. So we'll simulate rolling a 10 sided dice. You can see we got four. And this is a really core concept in Python, which is importing functionality from external Python files. And this is like huge in Python. And this is seriously going to change the way that you create your Python files. So you'll notice like I didn't have to copy any functions or any variables or anything over into this file. And yet I was able to use all the stuff that was inside this useful tools file. So that is huge. And honestly, it's going to save you a lot of time because you can write something once and then you can import it into your other files. So that's really the basics of using modules. I mean, modules are very simple. A module is just any external Python file that you want to use some stuff inside of it. I want to show you guys a place where you can go to find a huge list of modules. So I'm going to go over here to my web browser. And I'm on this website. It's actually like the official Python docs. And basically all I did to get here was just type in list of Python modules and Google. And depending on the version of Python you're using, you're going to want to make sure that you click the right one. I clicked on the version 31. And over here on this page, you can see there's just a huge list of Python modules. And these are basically modules inside of Python that you can just access. So essentially, there's like all of this awesome code that's already been written for you. And so there's some sort of functionality that you want to have inside of your Python program. Chances are there's a module in here that has that functionality. So there's all sorts of stuff you can do. I mean, if you just look through this list, like, you'll see a huge collection of basically just, you know, a bunch of either Python variables or Python functions, just, you know, things that you can use to make your programs better. So here's what I would recommend, like, head over to this page and just sort of look through a lot of these different modules, you know, see what you can see. And honestly, like, if you click on one of them, it'll bring you to a page that talks about like how to use it. It'll tell you like how to import it and just, you know, some basics about it. And this is sort of like the list that's on the official Python docs. But here's the other thing. The Python community is huge. There's tons of developers who use Python. And you can actually find a lot of third party modules. So if you just go online and, you know, look up, like, Python module for doing X or Python module for doing Y, chances are somebody out there has already written a Python module to do what you're trying to do. So if you get good at using modules and you get good at, you know, looking for them and finding them, you can actually save yourself a bunch of time because chances are that somebody's already written a module to do, you know, what you're trying to do or like part of what you're trying to do. So now that we've taken a look at all these different Python modules, I want to just kind of dive in a little bit deeper into how we can actually use these things. So you'll notice here, there's a lot of files, right? There's a lot of different modules that we apparently have access to Python. But the question is, where are all these files stored, right? When I was over here in my program, for example, I was using this useful tools.py file. Like, I knew where that was. I created that file. I was directly involved in making it. And I just imported over here. It was pretty easy, right? But what about all of these files, right? What about all these modules over here? Like, where are all of these stored? And there's basically two types of modules here. There's built-in modules, which means they're just built into the Python language. So we kind of just automatically have access to them. And there's external modules. And a lot of these external modules are just stored in basically the same folder that we installed Python on our computer. So for example, let's look at a couple of these, right? We have, like, base 64, BDB, bin ASCII, like, if I come over here and you'll see, I'm over here in my little file explorer. I have my Python project, which is draft. There's also this other folder over here called external libraries. If I was to click down on this and I come down here, you can see it's just the version of Python that I'm using. There's a folder here called lib. And this is a very important folder. This is basically storing all of those external modules. So you can see if I scroll down here, we have all of these different, like, modules, right? So here's that base 64. Here's BDB, right? A lot of these external modules are stored inside of this lib folder. And like I said, there's external modules. There's also a few modules that are just like built in modules. They're not going to be stored inside of here. And you can actually tell. So for example, if I was to come over here and click on base 64, it tells me where the source code is. So the source codes in lib forward slash base 64. We were able to see that, right? I was, I saw that inside of my lib folder. This bin ASCII, though, for example, if I click on this, you'll notice that this isn't giving me a folder because this is basically just like built into Python. So we don't have to worry about, you know, locating that file. It's just kind of like, it just kind of works. So some of these are external. Some of them are built in. And I want to show you guys, in addition to using these modules, right? So there's a lot of good stuff here. And honestly, you could spend, you know, years and years just learning about all these different modules. But a lot of times you're going to want to use modules that other people have written. And you know, there's a lot of developers who work on Python and who write different modules. So there's a lot of useful modules out there that aren't included in this list, right? They're not going to be inside of this lib folder by default. And what we can actually do is we can install those external modules, those third party modules, that don't just come pre installed with Python. And I'm going to show you guys how to do that really quick. So the first thing you need to do, obviously, is find a Python module that you want to install that you want to download. And I have actually used one of the past Python docs. It's an external module that you can use to basically use Python to create Word documents, which is pretty cool. So you can like format Word documents inside of it. So I'm just going to look that up here in Google. I'm just going to type in Python docs. And look, here's the thing, there's tons of these external modules. You don't have to use Python docs. I'm just giving you guys an example. But really, if you just look up like useful third party Python modules, there's going to be lists of these things online. In my case, though, Python docs has a website, and it basically just has like some installation instructions. I'm going to come over here. And it tells me that I can install Python docs using the command pip install Python docs. So this brings us to something I want to talk to you guys about, which is pip. And pip is essentially a program. And actually, if you have a newer version of Python three, it comes pre installed with Python three. And you can use pip to install Python modules. It's referred to as a package manager. And a package manager basically just allows you to like install, manage, update, and uninstall like different Python modules. So pip is extremely useful. And in order for us to install Python docs, we're going to have to use pip. So I'm going to show you guys how we can do that. What I want to do is open up the command prompt or the terminal on my computer. If you're on a Mac, you want to open up your terminal. If you're on a Windows computer, you want to open up your command prompts. I'm using a Windows right now. So I'm just going to come down to the search bar and type in CMD. And this command prompt should come up. So I'm going to click this inside of the command prompt, we can actually use pip. The first thing we want to do is just check to make sure that pip's installed. And like I said, if you have a version of Python three, pip should come just pre installed. And it should just work in here. If you don't have a new version of Python three, though, you might have to install pip separately. And there's tons of instructions online on how to install pip. So I'm just going to check to make sure that I have it, I'm going to type in pip hyphen hyphen version. And this should spit out the version of pip that I currently have. So as long as we have pip, then we're ready to install an external or third party Python module. All I have to do is just say pick install. And now I just want to type in the name of the Python module. So in the case of Python docs, it was just Python docs like that. Now again, you don't have to install Python docs. I'm just doing this for this tutorial. Just kind of show you guys how this is going to work. But you know, what you want to do is go online and look up some third party external Python modules. And generally, like I'd say 90 to 95% of the time, you're going to be able to just install them using pip. In the off case that you can't install them using pip, chances are there'll be like some detailed installation instructions. But I would say for the most part, any like legitimate Python module is going to be able to install using pip. So over here, I'm just going to say pip install and then the module name. So Python hyphen docs. And when I click enter, this is going to go off and install Python docs for us. So I'm just going to enter. And it's going to go off and install everything we need for Python docs. So you can see we successfully installed Python docs 0.8.6. So I'm going to show you guys where exactly this got placed. So normally, when we install a external third party module, it's going to get put inside of this lib folder. But it's going to get put inside of a special folder in here called site packages. So site packages is a special folder. And if I open this folder, you'll see now we have this docs folder and we also have this Python docs 0.8.6 pi 3.6.ag info folder. So these two folders are basically included in that module installation. So you can see this docs folder has a bunch of different Python files and has a bunch of stuff in here that we can use. So if I wanted to use this inside of one of my programs, I'm just going to refer to the name of the module. So in our case, it's just going to be docs. So I used Python docs in order to install it. But we're going to use docs if we want to import it. So I could come up here and I could say import DOCX. And now I can actually use it. So I can just say like docs, doc, whatever. And you can see there's a bunch of different stuff down here. There's like a document document part image part. There's a bunch of stuff that we can use with this. And obviously, depending on the Python module you install, there's going to be different instructions. But you can see it got stored down here in this site packages folder. If I wanted to remove this, I could use PIP to do it. So I could just say PIP uninstall. And we could just again say the module name. So Python docs. And PIP will now uninstall this on our computer. So how is to go back over to this folder? You'll see that those two, that docs folder and then that other folder disappeared. So they're no longer here. And I'm actually not going to be able to use this anymore. So that's sort of the ins and outs of using modules. Now again, there's tons of these modules and I can make dozens and dozens of Python courses covering each one of these modules. The built-in modules, the modules that are included by default and external modules, there's tons of these things out there. And really, as a Python programmer now, what you can do is you can go out and play around with these different modules. I showed you the ins and outs of installing them and you can use PIP to install all these different modules. And you can make sure that you have them by checking the site packages folder or the libs folder. But really now it's on you to just kind of go out and use these modules and don't shy away from this because modules are a huge part of Python and you're definitely going to want to include them in your Python stack. In this tutorial, I want to talk to you guys about classes and objects in Python. Now classes and objects are extremely useful in Python programming and they can help you to make your programs more organized and more powerful. So when we're in Python, we're dealing with all types of data, right? And a lot of times when we're writing programs, we're going to have to work with different types of data. And there's essentially like a few basic types of data we can do with usually things like strings, so like plain text, numbers, and Boolean values. Those three are kind of like the main types of data that you're going to be working with in Python. And we have all sorts of structures we can use to store that data, you know, things like lists or dictionaries. But here's the problem is that not all information, not all data and not all things can be represented using strings, numbers, or Booleans, right? There's a lot of things in the real world that we can't represent in something like a string or just a number, right? In other words, something like think of like something like a phone or a computer or a person, right? You can't really represent those things in like a string or a number. You know, in other words, like the data types that we have available to us in Python can't cover that. And so what we can do with classes and objects is we can essentially create our own data types. So I can create my own data type for anything I want in Python. So I could create like a phone data type and it could represent a phone. So I could store all the information I would ever want to know about my phone inside of that data type. And in Python, we could create a class for it. And essentially what a class is is it's just saying, hey, here's another data type that we want to use in Python. So with a class, you can essentially define your own data type. And it's super awesome. And classes are extremely useful. Classes are used in almost every single major programming language out there. So in this tutorial, I just want to give you guys a basic introduction of classes and using them inside of Python. So let's say that I'm writing a program and I want to represent a student inside of this program. So maybe I'm writing a program for like a college or a university. Let's say that in this program, I want to model a student. Like I want to model a real world object and I want it to be a student. Right, we don't have a student data type and I can't really represent a student in just a single string or a number. So what I can actually do is I can create a class for a student. And I'm basically creating like a student data type. So I'm going to show you guys how we can do that and create our student class. So over here, I'm just going to make a new file. We'll just make it a new Python file. So I'm just going to call it student.py. And inside of this student.py file, I want to create a student class. So the way that I can do that is just by typing class. And now I want to type the name of the class that I want to create. So in our case, we're going to create a class called student. So I'm just going to say student and now we're going to make a colon. Now everything that goes inside of here is going to be inside of our student class. So everything that's indented like this will be considered a part of our student class. And basically what we can do inside of this student class is we can define a bunch of attributes about a student. So essentially what I'm doing is I'm like modeling a student. I'm creating our student data type. And I can use things like strings, integers, and booleans in order to map out what a student should be and what a student should have. So I want to create something called an initialize function. And the way I do that is just by typing out def. And I'm just going to type two underscores. And then the word I N I T and then two more underscores. And you also want to type out open and close parentheses. And inside of those parentheses, we want to type out self. And then we want to colon after that. What I can do inside of this initialize function is I can basically map out what attributes a student should have. So we can essentially define like, hey, here's the student data type in Python. So what I want to do is add in certain attributes after this self. So I'm just going to say self a comma. And now we can start thinking about, you know, what values will represent a student inside of our Python program. So if I'm thinking like, I'm thinking something like name, right? So every student in our program should have a name. They also might want to have a major because they're in college. They probably also will have a GPA. So they're a grade point average, like how they're doing in school. And let's define one more thing. Let me think. Why don't we make a Boolean? And it's going to be called is on probation. And this will basically tell whether or not the student is on probation. So essentially what I'm doing inside of this initialize method inside of this init function is I'm defining what a student is in our program. And so in this program, a student has a name, it has a major, it has a GPA, and it has a value that determines whether or not it's on probation. This right here is the student data type. So if I'm representing a student inside of my program now, it has all of these attributes associated to it. And that's basically what I'm doing up here. Now inside of this initialize function, we actually have to do something. And basically what I want to do is assign some values. So I'm going to be writing out some stuff and this might not make total sense right now. But this is going to make sense in a second after we create our first student object. So just stick with me right now and just basically know that we have to do what I'm doing over here. So I'm just going to say self dot name is equal to name. And then I'm going to say self dot major is equal to major. Self dot GPA is equal to GPA. And I'm going to say self dot is on probation is equal to is on probation. So again, this might not make a whole lot of sense right now, but in a little bit, this is going to make total sense. So now that I have this student class defined, I can actually use this class inside of my other file. So I'm going to come over here into this app dot Python file. And this is just my main file. So I actually want to create a student right so in that student class, we defined the student data type. And we basically said like hey, a student has a name, a major GPA and it says whether or not they're on probation. That's like the template for what a student is. But we can actually create a student. So we can create an actual student and give it some information. And that's called an object. So this student class over here is basically defining what a student is. So a class is just like an overview of what the student data type is. An object is an actual student. So it's an actual student with a name, a major and a GPA. It's not just this template anymore. It's actually like a student that we're representing inside of our program. So in order to use that student class and create a student object, I actually need to import that. So all I have to do over here is just say from student, and this is referring to this student file. I can say import student. And basically what this is saying is from the student file, I want to import the student class. So even though these are both student, they're referring to different things. So this is referring to the file and this is referring to the actual student class. So now that we did this, we can create a student. So you can create an object of a class a lot like you would a normal variable. So I can just give it a name. I'm going to call this student one. And I'm just going to set it equal to student. And I'm going to make an open and close parentheses. And now inside of this parentheses, I want to give this student a name, a major, a GPA, and an is on probation value. So I'm going to say, we'll just create a fake student. So I'll just say his name's Jim. And he's studying business. And we want to give him a GPA. So maybe he has like a 3.1. And finally, we want to say whether or not this student is on probation. So why don't we say false? So basically what I'm doing is I'm saying that I want to create a student. So I want to actually create a student object. And remember, an object is just an instance of a class. So the class is like an overall template. It defines what a student is. But an object is an actual student with actual information. So we could call student one now. This is a student object. So I just want to show you guys what this student object actually is and what we can do with it. And then I'm going to talk some more about that in it function from before. So over here, I'm just going to make a print statement. And inside of here, I just want to print out student. And what's cool about this student one object is I can actually access each of the attributes from inside of this object. So if I wanted to get the name of the student, I could say student one dot name. And now this is actually going to print out the student's name. So over here, you'll see it prints out Jim. If I wanted, I could print out the student's GPA. And it's going to print out the student's GPA 3.1. So now that I created this student object, I can actually access the information about the student. So essentially, I've just created a student data type. So I could create as many of these students as I wanted. If I wanted, I could create another student we could call it student two. And essentially, we do the same thing. We just give it different information. So we could say like Pam and her major is art. And she has like a 2.5. And let's say that she is on probation. So now I have another student, student two. So if I wanted, I could access information about that student. We could say like student two dot GPA. And now this is giving me the GPA of student two. So basically, what I did was I created a student data type and I created student objects. And now I'm able to represent a student inside of my program. So let's talk real quick about all this stuff over here because I didn't really explain it. Basically, what's happening is when I come over here and I say student and I'm passing in all of these different values, those are getting passed into this init function. Remember, I passed in a name, I passed in a major, I passed in a GPA. When we create that student, we're actually calling this function. And when I pass in the name, the major and the GPA, those values are actually getting stored over here in this name, this major, this GPA, et cetera. So I'm giving this student object all of that information. And down here, what I'm doing is I'm saying self dot name is equal to name. And basically what this means is the actual object's name is going to be equal to the name that they passed in. So self dot name is an attribute of student. So the student is storing a name, the student is storing a major, the student is storing a GPA. But that's different from this name, this major, and this GPA. Remember, these are all just values that I passed in, they're just parameters. And so I need to take the values that I passed in and I need to assign them to the actual attributes of the object. So I need to say, okay, the name of the student is going to be equal to the name that we passed in. One more time, the name of the student object is going to be equal to the name that we passed in. The name of the student's major is going to be equal to the major that we passed in. The student's GPA is going to be equal to the GPA that we passed in. That's basically what's happening here. So when I say self, it's referring to the actual object. So over here, when I'm creating this student object, I'm giving it all of this information. It's taking that information and storing it as attributes for the object. So hopefully that makes sense. I think that's about as clear as I can make it. But the point is that now we have a student data type. So now I can represent a student inside of my Python program. And that's like super powerful. And what's cool about classes and objects is you can do this with anything. So in this example, we created a student class and then we created student objects off of that. But I can model any real world entity into this program. I can model something like a phone or I can model like a water bottle or I can model, you know, a keyboard, right? I can model anything that I wanted inside of my program. I could just give it certain attributes, right? And so that's what's cool about classes is we can model real world objects and we can create our own data types. In this tutorial, I'm going to show you guys how to build a multiple choice quiz in Python. So basically, we're going to set up a little multiple choice quiz and we'll have the user take the quiz. And as they take the quiz, we'll keep track of their score and then at the end we'll tell them how they did. So this is going to be a pretty cool video. I'm excited to show you guys how to do this. And we'll get to use things like classes and if statements and loops in order to build this program. So we're going to use a lot of cool stuff in Python. The first thing I want to show you guys, I actually did this before I started the video. It's this little array. It's called question prompts. And I basically just wrote out all the questions that are going to be or I shouldn't say the questions. I wrote out all the question prompts that are going to be inside of my multiple choice quiz. So the first one just says what color are apples and the answers are red, purple or orange. The next one is what color bananas the options are teal, magenta and yellow. And the third question is what color are strawberries and the options are yellow, red and blue. So this is obviously a very, very easy multiple choice quiz. But I just kind of wrote out the questions beforehand so I didn't have to spend time doing that. So let's talk about how we can build a multiple choice test. Well, the first thing I want to think about is how can I represent the questions in the test. Over here, we have the question prompts, but there's actually two parts to a question when you think about it. There's the prompts. In other words, the actual question itself. And then there's the answer to the question and both of those attributes need to be kept track of. I need to keep track of what we want to ask and I need to keep track of what the answer is. So what I'm actually going to do is create a question class. So I'm going to create a little data type for questions and inside of that question class, we'll be able to store the question prompts and we'll also be able to store the questions answer. So I'm just going to come over here to my folder and I'm going to make a new Python file and we're just going to call this question.py. So we'll call it question.py and inside of this question.py file, I'm going to make a class. So I'm just going to say class question and I'm going to put a colon here. So inside of this question class, we want to define it in initialize function. So I'm going to say def two underscores in it, two underscores, and then we're going to type out an open and close parentheses self and then a colon. So after this self, we want to define the different attributes that will describe or that will be included in a question. So we're going to include a prompt and we're going to include an answer. So every question will have a question prompt and a question answer. Now down here, I want to take those values and assign them to the actual class object. So I'm going to say self dot prompt is equal to prompt and I'm going to say self dot answer is equal to answer. Now we have a question class set up and we can store all the information we need about a question. So what I want to do now is go back over to my app dot Python file. And we're actually going to create an array of questions. So I have over here these three prompts and I'm actually just going to create another array. So we'll just call it questions and I'm just going to set it equal to to open and close square brackets and we're going to start creating question objects. Let's say the first element in this questions array will be a question and we want to pass question prompts zero and the answer to the first question was a red green. That's the color of Apple. So I'm going to pass that first question and I'm also going to pass the answer, which is a and you'll see down here, I'm getting an error. So saying unresolved reference question. So actually what we need to do before we can create these questions is we need to import this question class. So I'm going to come up in here, come up here and say from question import question. So now down here in this questions array, we're not getting that error anymore. So we created one question object and I'm just going to create a couple more for these other ones. So I'm just going to copy this one and we will paste this down here. Alright, so now we're creating two other questions and these ones are going to be one and two and the answer to the second question is C and the answer to the third question. I think it's B. Let me look. Yeah, so it's C and B. Alright, so essentially what we're doing is we're creating three questions. Each one is getting a different question prompt and they're each getting different answers. So now we have an array of questions that we want to ask on our test. So the next step is to actually write a function that will run the test, right? It has to ask the user the questions and it has to check to see if they got the answer right. Down here, lower in the file, let's create a function. So I'm just going to say death and we'll call this run test. And inside of this parentheses, we're going to take one parameter into this function. We're going to take a list of questions. So I'm just going to say questions. So this is basically going to be a list of question objects that we want to ask the user. So once I'm in here, all I want to do is loop through all the questions. So I want to loop through each question. I want to ask it to the user. I want to get the user's answer and I want to check to see if it's right. And we need to be able to keep track of how the user does through the test. So I want to create a variable called score and I'm just going to set it equal to zero. So every time the user answers a question right, we'll increment this score variable. Alright, so what I want to do is, like I said, loop through all the questions in that questions array. So I'm going to create a for loop. I'm going to say for question in questions. So in other words, for each question object inside of this questions array, I want to do something. And basically, the first thing I want to do is ask the user the question. And I want to store their response inside of a variable. So I'm going to say, I'm going to make a variable down here called answer. And this is going to represent the user's answer to the question. And I'm going to set it equal to input and I need to give this a prompt. So I'm actually going to give this the prompt for the question. So I can just say question dot prompt. So now I have the answer that the user entered in, which is stored inside this variable. So we want to check to see if they got the question right. And I can do that using an if statement. Let's say if answer, and this refers to the student's answer, is equal to question dot answer. So I'm checking to see if the answer that the student gave is equal to the answer of the current question that we're asking. And if this is true, then I just want to increment score. So I'm going to say score plus equals one. And this basically just means we're adding one to the score. So the last thing I want to do inside of this function is just print out the result. So I want to print out how the user did. So down here, I'm just going to say print and I'm basically just going to print out like, Hey, you got like two out of three questions or you got five out of six questions, right? Or you got zero out of 10 questions, right? We'll just print out how they did. So I'll just say you got. And now I want to print out how many questions they got right. So this is just going to be the score. And in order to print a number alongside of a string like this, I'm going to have to say STR and then type in the number. So we'll say STR score. So we'll basically say you got however many they got right out of. So we'll use this little forward slash. And now we'll just say how many questions there were. So we can say, and again, we're going to have to convert this to a string because it's going to be a number. So we can say, string, and then we want to figure out how many questions were in that questions array. So I can say LEN. And inside of here, we can just say questions. So this is kind of like this long statement just to print out how many questions there were. So then over here, I'll just say, correct. All right. So now we have this print statement. And it's just going to be printing out how many questions they got right. So let's see if this works. The last thing I need to do is just call this run test function. So I'll say run test, and I'm just going to pass it that questions array that we created before. So we created this questions array with all of these question objects inside of it. I'm basically just going to pass that into this run test function. So now let's run our program and see how we did. Hopefully we don't get any errors. There's a lot of code there, so it's possible that we might. Okay, so it says what color are apples? Huh, this is a tough one. All right, let's put A. So we'll get the first question right. What color are bananas? Let's get the second question wrong. So I'm going to say B, bananas are magenta. And we'll get the third question right. So it says what color are strawberries? I'll just put B because that's the right answer. So now you'll see that our program prints out. You got two out of three correct. So not only did it ask us all the questions and get our input for each question, but it also kept track of our score and it printed it out. So why don't we run through the test one more time and we'll just like get too wrong this time. So we'll get this one wrong. I'll get this one wrong and I'll get this one right. So now it says you got one out of three correct. So it's able to actually grade our test. And what's cool about the program we just wrote is if I wanted, I could add another question into here and it would automatically be able to ask it. So it doesn't matter how many questions we put in here. It's just able to ask it. So really the point I was trying to make with this whole video was just how we can use something like a class in order to model a real world entity. So for example, we created this question class and we were able to store all the information about a question that we could ever need. So we were able to sort of like the prompts and the answer. So we created our own question data type and then we were able to create a bunch of different questions, pass it into this run test method and it was able to grade the test and just run the test really easily. So that's kind of the point. So hopefully this makes sense. You know, this was a lot of code. So if you don't fully understand what I did, go back, watch the video, you know, try it a couple of times on your own and see if you can create your own multiple choice test. In this tutorial, I want to talk to you guys about class functions in Python. So a class function is essentially a function that we can use inside of a class and it can either modify the objects of that class or it can give us specific information about those objects. Over here, I have this student.py file and inside of here, I created a student class. So I just had a class student and I gave this student a couple of different attributes. I gave it a name, a major and a GPA. So I can give this student all of this information. So when I create a student object, it'll have all of that information in it. Now over here on this app.py file, it actually created two students. So student one is Oscar who is studying accounting and he has a GPA of 3.1. Student two is Phyllis who's studying business and she has a 3.8. So what we can actually do is we can use functions inside of these class files. So I could actually define a function inside of this student class and then all of my student objects could access it. So for example, I can come down here and create a function and let's say we wanted to create a function that told us whether or not this particular student had honors. So whether or not they were on the honor roll, right? Basically like, are they like a really good student? So I could define a function called on honor roll. And basically what it's going to do, it's going to tell me whether or not this particular student is on the honor roll. And let's basically just say the rules for being on honor roll is you have to have a GPA of 3.5 or above. So here GPA is 3.5 or above, that means you're on the honor roll. Well, over here I could actually write the code for that. So I could say if self.gpa, and when I say self over here, this is referring to like the actual student's GPA. And you'll notice over here I have to pass that in as a parameter and that always has to be the first parameter. So I could say if self.gpa is greater than or equal to 3.5, then we can return true because this student is on the honor roll. Otherwise else we can just return false because if their GPA isn't above a 3.5 then they're not on the honor roll. So that's essentially our little on honor roll function. And you can see it's a very small function, but it provides a service to the objects of this class. It allows the objects of this class to figure out whether or not that current student is on the honor roll. So over in this app.pa file I could just print out that value. So I could say print and I'm going to see if student one is on the honor roll. So now when I run this you'll see it should print out false. And it's putting out false down here because student one only has a GPA of 3.1. If I was to do the same thing on student two, student two has a GPA of 3.8 so we should return true. And that's exactly what happened. So essentially a class function is just a little function that can be used by the objects of the class. And I would say this is a pretty good example of what a class function should be doing. It should be like giving us information about the class or it can also be like modifying information about the class. So that's the basics of using functions in classes. I mean this is a pretty simple tutorial, but I really just wanted to introduce you guys to the concept of putting functions inside of classes. This is going to be really useful. And if you're making a class you always want to think about what functions can I put inside of here that will essentially help the user to either figure out information about the object or modify different values in the object. In this tutorial I want to talk to you guys about inheritance in Python. Now inheritance is basically where we can define a bunch of attributes and functions and things inside of a class. And then we can create another class and we can inherit all of those attributes. So I can basically have one class that has all the functionality of another class without having to physically write out any of the same methods or attributes. So if that's confusing don't worry I'm going to show you guys exactly what this is in this video. So let me show you about some stuff I have set up over here. I created this class called chef. And over here we just have this class chef. And inside of this chef class we have three functions. So this chef can do three things. The chef can make chicken. The chef can make salad and the chef can make a special dish. And whenever the chef makes a dish he basically just says the chef makes a chicken or the chef makes a salad or the chef makes barbecue ribs for this special dish. It's basically just saying whatever the chef is doing. So if I was to come over here to my app.python file you'll notice that I'm importing the chef. So I'm basically allowed to use this chef class now. And I can say my chef is equal to chef. So I'm creating a new chef. So now if I came down here and I said my chef dot make chicken. When I run my program now it's going to say the chef makes a chicken. If I said make special dish and I run the program now it's going to say the chef makes barbecue ribs because that's the chef's special dish. So I have this really awesome chef class and it works really well. But let's say that I wanted to create another class to model another type of chef. So this chef class is just modeling like some generic chef. We're representing some generic chef in our program. But let's say that I wanted to create a class that modeled a different type of chef. For example let's say we wanted to create a class that modeled a Chinese chef. So instead of just a normal chef this is a Chinese chef. Well I actually created a file over here called Chinese chef dot python. So we could actually use this Chinese chef dot python file to create our Chinese chef class. So I'm just going to say class and over here I'm just going to say Chinese chef. And basically I just can define everything that the Chinese chef can do. But let's say that our Chinese chef can do everything that our generic chef can do. So the Chinese chef is like a special chef right it's a very specific type of chef. But let's say that this Chinese chef can do everything that the normal chef can do. So the Chinese chef can make chicken, can make salad and can also make a special dish. Well if I wanted to give this Chinese chef all of that functionality I could just come over here and I could copy all of these functions and I could paste them in here. So now the Chinese chef can do everything that the other chef can do. But let's say that in addition to all of these things the Chinese chef can also make a special dish called fried rice. So I could say deaf and we could say make fried rice. So the Chinese chef has this extra function which allows it to make fried rice and over here we can just say the chef makes fried rice. And let's also say that the Chinese chef has a different special dish. So instead of making barbecue ribs the Chinese chef makes orange chicken. Alright so now we have our Chinese chef class set up and you'll notice that it can do everything that the normal chef can do. So let's go back over to our app.python file and I want to create a Chinese chef object. So instead of importing from chef we're going to just import it from Chinese chef so I'll say Chinese chef and we're going to import Chinese chef. So let's go ahead and make a Chinese chef object. So down here I'm going to make one and I'll just say my and then my Chinese chef we can print out this special dish. So remember the Chinese chef can do everything that the normal chef could do. So if I say my Chinese chef make special dish when I run this program you'll see the regular chef is making barbecue ribs and the Chinese chef is making orange chicken. So everything works out and this Chinese chef also has an extra method called make fried rice and you can also make fried rice. But here's the problem right when I go over here to this Chinese chef dot pie when I wanted to use all of the functionality that was inside this chef class. I actually had to copy and physically paste all of these functions down into this file right and that's kind of a drag. I mean especially like imagine if this chef had like 20 or 30 of these different functions in it. Well I have to copy and I have to paste all of those inside of this Chinese chef and this is where we can use something called inheritance. So instead of having to copy and paste all of these functions I could just inherit these functions from that chef class. And in order to do that I can actually just get rid of all of these and I can come over here and right next to where I'm saying class Chinese chef. Inside of parentheses I can say the name of the class that I want to inherit from so I can just say chef. And I'm also going to have to import this so I'm going to come over here and we'll say from chef import chef. So basically what this is saying is inside of this Chinese chef I want to be able to use all of the functions that are contained inside of the chef class. So I'll say that one more time. Inside of this Chinese chef class I want to be able to use all of the functions that are inside of this chef class. So by using inheritance here I'm actually able to come over here to this app.py file and now I'm still able to execute for example like the make chicken function. Even though I didn't specify the make chicken function in here I didn't write it out. I can still run this program and the Chinese chef will still be able to make chicken. So when I run this program you'll see down here it says the chef makes chicken. And that's because I inherited the make chicken method from the chef class. But here's one thing that got messed up. If I come over here and I say make special dish. Remember the Chinese chef special dish was supposed to be orange chicken. But now the Chinese chef is going to be making barbecue ribs because I inherited this make special dish function from this chef class. And so what I can actually do is I could come in here and I could override that make special dish class. So I could say death make special dish. And down here I can just override it. So I could say the chef makes orange chicken. And now when I go over here and I run this make special dish function. Now the chef's going to be back to making orange chicken. So the Chinese chef will make his special dish. So that's basically what inheritance does. It allows me to inherit functionality from an existing class into the new class. And I can actually just inherit all of it without having to write it out. So I didn't have to write out make chicken and make salad inside the Chinese class. But the Chinese chef can still make chicken and salad because it inherited that functionality from the chef class. In this tutorial I want to talk to you guys about the Python interpreter. The Python interpreter is basically a little environment that we can use to execute Python commands. So it's kind of like this little sandbox environment where we can test out and try out different Python commands or different Python functions in a very safe and neutral environment. So it's kind of like a quick and dirty way to write Python and try different things out. And the way we use the Python interpreter is by opening up our command prompt. Now if you're on Windows there's a program called command prompt. If you're on Mac there's a program called terminal. And basically you need to open that program in order to use the Python interpreter. So I'm here on a Mac but if you're on a Windows you can essentially do exactly what I'm doing just inside of the command prompt. So on Mac here I'm just going to search for my terminal. If you're on Windows you can just search for like CMD or command prompt and it should pop up. So the terminal is basically an environment on our computer where we can interact with the computer and do different things without a graphical user interface. So normally when we interact with the computer we're using things like buttons or windows or we can move stuff around. We can basically just like interact with the computer with graphics but the terminal or the command prompt is a place where we can interact with the computer using text commands. So you know I'm not going to get too much into what the terminal and the command prompt are but that's essentially what it is. So inside of here we can use the Python interpreter. And the Python interpreter is basically just a little program that like I said we can write you know sort of Python in. So generally all you have to do is go over to your terminal or your command prompt and type in Python 3. And since we're using Python 3 I'm going to type Python 3 but you can also just type normal Python and I'm pretty sure that gives you Python 2. Now here's a quick disclaimer on Windows you may run into a problem where you can't use this Python 3 command and it's possible that if you're running into that problem Python. Like Python 3 hasn't been added to your windows path variable. And basically what that means is your computer doesn't recognize the command Python 3. If that's the case all you have to do is just go and Google how to add Python 3 to your windows path variable. It's really easy I'm not going to get into it in this video just because it's kind of outside the scope but if you're running into that problem that's probably it's not on your windows path variable. So just Google around for that and you should be able to find an answer. But I'm going to type Python 3 and click enter and it's going to open up this cool little thing down here. So you can see it basically just has like here's the version of Python. Now I'm just going to enter so we can have some like new lines here. But down here this is the Python interpreter so we can write Python code in here and it's going to work. So I can for example I could write like print and inside of here I could print like hello world. And when I click enter you'll see that it prints out hello world. I could create a variable so for example I could say like num one is equal to ten. I could say num two is equal to ninety and then I could print out num one plus num two and it's going to be able to do that for me. I could also use some like a function so I could define a function in here. We could make a function that's called say hi and it'll take a name parameter. And you'll see here when it saw I wanted to create a function it put these three little dots and I can indent and we can write the code for our function. So I can say like print hello plus name. And now I have a function called say hi so I can break out of this by just entering again and I can call the function so I could say say hi and we'll say hi to me. Hi Mike so now it's going to say hello Mike so I can use a function I could use something like an if statement you know I could say I could use something like a for loop we could use while loops. I mean we can basically use all of the basic like Python commands and you know inside of this Python interpreter and like I said before it's essentially just an environment where you can test out Python code. Now this is not a place where you want to write like any serious Python scripts. So if you're like designing and writing a Python program I would not recommend doing it inside of this interpreter. It is it's not a very intuitive environment it's pretty much just set up for some quick and dirty tests like we need to test something out great this is a perfect place for it because you don't have to set up a file. You don't have to use like some ID you don't have to execute a file you just go in here it's quick it's dirty you get it done. But if you're writing like an actual program you definitely definitely definitely want to use a text editor. The text editor it's just going to be way more organized everything is going to be a lot cleaner and you're not going to get confused with like where stuff is and what you have so that's the basics of the Python interpreter. You know in the course I haven't really been using it at all just because I think it's a lot easier to teach when we're inside of a file than inside of here but you know don't count this guy out the Python interpreter is awesome a lot of people use it and it's great if you just need to test you know little bits of code out without having to set up some huge environment so Python interpreter definitely awesome I would play around with it you know have some fun and take advantage of it. Hey thanks for watching if you enjoyed the video please leave a like and subscribe to draft Academy to be the first to know when we release new content. Also we're always looking to improve so if you have any constructive criticism or questions or anything leave a comment below. Finally if you're enjoying draft Academy and you want to help us grow head over to draft Academy.com forward slash contribute and invest in our future."
        },
        {
            "video_id": "PkZNo7MFNFg",
            "title": "Learn JavaScript - Full Course for Beginners",
            "description": "This complete 134-part JavaScript tutorial for beginners will teach you everything you need to know to get started with the ...",
            "published_at": "2018-12-10T14:13:40Z",
            "channel_name": "freeCodeCamp",
            "transcript": "Beau:  This is the Beginner\u2019s Javascript course \nyou are looking for. My name is Beau Carnes. And I\u2019m with freeCodeCamp.org. In this full Javascript course you will learn everything \nyou need to know to get started with Javascript. This course is perfect for beginners or anyone that \njust wants a refresher on basic Javascript syntax. This course actually goes along with the \nfreeCodeCamp.org Javascript curriculum. So, if you want some live coding challenges \nto go along with every part of this course,  you can check the link in the description \nto that curriculum. But this is a completely standalone video. So, you don\u2019t need to go through freeCodeCamp.org, \nbut it could be helpful. Also, after this course, you\u2019re going to want to \ncomplete some, or build some Javascript projects. So, I have a link in the description \nto some project tutorials. But then after that, you\u2019re going to want to \ncreate some projects on your own. That\u2019s how you really learn Javascript. You have to create things without going \nthrough a tutorial  and just use a search engine to find the things \nthat you don\u2019t know or need to learn. To go along with the freeCodeCamp curriculum, \nI have all the ES6 stuff in the second part of this course. That\u2019s pretty much it. Let\u2019s learn some Javascript. [Running Javascript] So, how exactly do you install Javascript? Well, for the most part, you don\u2019t. Actually, all web browsers can run Javascript. Which is great because a lot of devices \nhave web browsers on them. So, when you write something with Javascript,  it will run on all sorts of devices \nand operating systems. So, you have a few options for writing Javascript. Let me show you a few things you can do \nto follow along with this course. You could download a code editor. Here, I have Sublime Text. You can also use Visual Studio Code or Atom \nor any code editor. And I\u2019ve created an HTML file because HTML files \ncan be opened in web browsers. And I have these  tags \u2013 these are HTML tags. But within our  tags, we have our Javascript. So, if I open up this file in a web browser, \nit looks like this. Well, I can open up my Javascript console. And in the console, you can see it says \u201chello world.\u201d That\u2019s right from my Javascript program. So, whenever you do console.log, \nit\u2019s going to show on the console here. You can also just use the code editor \nthat\u2019s included on freeCodeCamp.org. Like I mentioned, this course follows along with the Javascript curriculum on freeCodeCamp.org. And there\u2019s a built-in Javascript editor right in here. And then it shows you the console down here. Another option would be to use CodePen. If you go to CodePen.io, going to go to Create Pen. And then there\u2019s going to be three windows. HTML, CSS, and Javascript. Well, we just care about the Javascript. And in this course, we're not going to be doing \nanything with HTML and CSS. We just need the Javascript and the Javascript console. So, if I do console.log and then do (\u201cHello World\u201d) \nthen we can see right in the console \"Hello world.\u201d The final thing you can do would be use Scrimba. Most of the course I actually recorded \nusing Scrimba.com. So, if you want, you can use Scrimba.com \nto follow along. Once you log in, just click the [Plus] button. I\u2019m going to [Javascript] [Playground] \nand then [Confirm]. And it\u2019s going to open up a new Javascript window. Now, I can increase the font size here. And it already has console.log \u201cHello from Javascript.\u201d And you can see in the console right here \n\u201cHello from Javascript.\u201d Also, if you hit [Reload], it reloads everything. And you'll see this popup \u201cHello from Javascript.\u201d So, that\u2019s something interesting about Scrimba \nis that has two ways of logging in the console. We have the popup and then \nwe have the console here. You\u2019ll see that in this course too, \nthe two different ways of logging to the console. [Comment Your Javascript Code] The first thing we'll talk about \nin Javascript is comments. Comments are lines of code \nthat Javascript will intentionally ignore. They don\u2019t do anything. They\u2019re just used to create notes for yourself \nand others about what the code does. So, if you do a // you can make an in-line comment. An in-line comment means it\u2019s at the end \nof a line of code. For instance, I can put var number = 5. That\u2019s a way to declare a variable. And we'll talk more about that later. But right now we're just talking about comments. You can see that this code is in color because the code \neditor knows that that\u2019s code that\u2019s going to run. And the comment is automatically grayed out \nbecause it\u2019s not going to run. We can also do an in-line comment \nor I mean a multi-line comment. If we do a /* and I can put \"this is a,\u201d \nand then I can put \"multi-line comment.\u201d And I'm going to end with a */. So, it begins with a /*\nand ends with a */. And you can put as much text as you want \nin between these. And you can see this is all grayed out \nbecause it\u2019s all a comment. And then afterwards I can put number = 9  and you can see it will be in color again \nbecause it\u2019s no longer commented out. [Data Types and Variables] Now we're going to talk about \ndata types and variables. In computer science, data is anything that is \nmeaningful to the computer. And Javascript provides seven different data types \nthat you can use within Javascript. Now, some of the more obvious and most common \nare strings and numbers. A string is just any sort of text. A number is a number. Now let\u2019s go from the top. So, undefined is something that hasn\u2019t been defined. You may have a variable that you haven\u2019t \nset to be anything yet. Null means nothing. So, you\u2019ve set this to be something \nand that thing is nothing. So, you can say this is null or nothing. A boolean means true or false. We talked about string. A symbol is an immutable primitive value \nthat is unique. Now we'll tall more about those later. A number is a number. And an object can store a lot \nof different key value pairs. Again, we'll talk more about those later. Now, you are often going to set data into a variable. A variable allows computers to store \nand manipulate data in a dynamic fashion. It\u2019s basically a label to point to the data. A variable is almost like a box. And you can fill it with anything. You\u2019ll fill it with the data that you want. So, to declare a variable, \none way is to use the var keyword. Var stands for variable. And I can say myName. I can set this to anything. It can be any of the datatypes above. But it\u2019s common to set something to a string. So, I can set my name to be \u201cBeau.\u201d Now later, you can set it to be something else. I can say myName = 8. And you can just set it to other data types later. Now, there are actually three ways \nto declare a variable in Javascript. So, var is one of them. And for a while, that was the only way. But there are other ways too. There\u2019s a way called \"Let.\u201d So, I can say let ourName = \u201cfreeCodeCamp\u201d. And then the other thing would be const. So, I can do const Pi = 3,1004. Now, the difference between var, let, and const,  a var is going to be able to be used \nthroughout your whole program. Let will only be used within the scope \nof where you declared that. Now, we're going to be talking about let \nand const more later. So, I\u2019m just giving you a brief overview \nof what they are now. Const is a variable that should never change. It can never change. So, like right up here, I declared myName, \nbut then we changed it here. So, it started out to be Beau and we changed it to 8. Const, you can never change it. If you do try to change it, you\u2019ll get an ERROR. Okay, that\u2019s all for now. But like I said. We'll be talking more about \nthe different types of variables later. [Storing Values with Assignment Operator] There\u2019s a difference between declaring variables \nand assigning variables. Here\u2019s how you assign a variable. var a and then a semicolon. I didn\u2019t mention this earlier, but you end all lines \nin Javascript with a semicolon. Well, it\u2019s not actually required. You can actually just skip the semicolons completely,  but most people recommend that you put a semicolon\njust so it\u2019s obvious where the end of the line is. So, here, we are just declaring a variable \nto be called a. And then here, we are assigning a variable. We\u2019re declaring and assigning in one line. So, we're declaring it \u201cvar b\u201d And then the equals sign \nis the assignment operator. It means that 2 is being assigned to b. We're not checking if b = 2. We're just assigning 2 to be. So, after that, we can actually assign other things. So, I can say a = 7. So, now I\u2019ve just assigned 7 to a. I didn\u2019t have to declare a because \nit was already declared. And I can also say that b = a. So, I\u2019ve now assigned the contents of a to b. And I\u2019ll put the semicolon there. One thing I want to tell you about is console.log. Console.log allows you to see things in the console. So, I\u2019m going to console.log(a). And if I load this here, you can see down here \nin the console it shows 7. So, right now we've assigned a to be 7. And so, when we console.log(a) \nit shows 7 down there. If we put another console.log right here,  this will allow us to show what a was up here \nand then down there. So, console.log. Now, if I run that, we can see at first, a was null. And then now it\u2019s 7. So, here is null. And then it\u2019s 7 down here. So, you can check what variables \nare at various points in your program. [Initializing Variables w/ Assignment Operator] Now I\u2019ll show you another example \nof initializing a variable  to an initial value at the same time it\u2019s declared. So, I\u2019m going to say var a = 9. So, the var a is declaring it. And the = 9 is initializing it with the assignment \noperator, which is the = sign. [Uninitialized Variables] Before we do anything to these variables, \nthey are uninitialized. That means their value is undefined. We have not set them to anything. But it\u2019s simple to fix that. I\u2019ll just set this to five. I\u2019ll set b to 10 and then we can set c to a string. That\u2019s going to be \u201cI am a string\u201d. And we always have to put it in \nquotation marks like that. So, you can see a + 1 is going to equal 6. 5 + 1 = 6.\nb = b + 5. That\u2019s going to be 15. And then c is now going to say \"I am a string\u201d. [Case Sensitivity in Variables] Variable names and function names \nin Javascript are case sensitive. That means that capitalization matters. So, this declaration here is not the same \nas this assignment. Even though letters are the same, \nthe capitalization is not the same. So, it\u2019s not going to assign correctly. And in here, you\u2019ll see there\u2019s an ERROR if we try \nto run it because this has not been defined. It has not been declared. It\u2019s generally common practice to use camelCase. So, let me show you how we do that instead of \nStUdLyCapVar, it\u2019s going to be studlyCapVar. So, the first letter is always going to be lowercase. Any time you have a new word or a new section \nof a word, you just capitalize the first letter. And so, we can change this. This one is correct. So, now we just go down here. studlyCapVar. And then we just do properCamelCase. And then titleCaseOver. So, now all of these should be defined. So, we declare them here. We assign them right here. And then this is not going to give us any errors. It\u2019s going to behave exactly how we want it to behave. [Adding Numbers] Adding two numbers in Javascript \nis pretty straight forward. You just use the plus operator. So, this says 10 + 0 which equals 10. We can also do, 10 + 10 which is going to equal 20, \nif we do a console.log, and I can put sum here. And then you\u2019ll be able to see that \nthe answer is 20 right in the console. 10 + 10 is 20. [Subtracting Numbers] And subtraction is also what you would expect. We have the subtraction sign here. This says 45 \u2013 0. We can also do 45 \u2013 33. And then that would equal 12. So, the difference variable equals 12 now. [Multiplying Numbers] Multiplication in Javascript uses this *\nor a star symbol here. So, this says 8 * 0 which is 0. Or we can change it to 8 * 10 which is 80. So now the product variable equals 80. [Dividing Numbers] You can divide in Javascript with this / symbol. So, this says 66/0. We can change this to 33. So, now 66/33 is 2. Quotient equals 2. [Incrementing Numbers] To increment a number means to add 1 to it. So, here we\u2019re incrementing myVar by 1. So, it starts at 87. 87 + 1 is 88. There is a quicker way to increment a number. Instead of doing this, we can just myVar++. myVar++. And now we have incremented myVar from 87 to 88. [Decrement Numbers] We learned about incrementing a number with ++. You can also decrement a number with --. That means subtracting one. So, right now, myVar is going to equal 10. 11-1 = 10. We can do the same thing with the -- operator. So, now, myVar still equals 10. [Decimal Numbers] We can also create decimal numbers with Javascript. These are sometimes referred to \nas floating point numbers or floats. You can see this is one here \u2013 5,700. It can be anything. I\u2019m going to make one called myDecimal. And then I\u2019m going to store a 0,00009. Anything that has a decimal point in it, \nis a decimal point number. [Multiply Decimals] Multiplying decimal point or floating point numbers \nis the same as multiplying integers. So, we have 2,000 times 0,000. If I just change this to 2,500, \nnow the answer to product is going to be 5. And I can console.log that so you can see. If I just put (product). And then if we do the browser here, \nyou\u2019ll see that the answer is five. [Divide Decimals] You can also divide decimal point numbers. So, in this case I\u2019m going to change this to 4,400. So, now the answer to quotient is 2,200. Quotient equals 2,200. [Finding a Remainder] The remainder operator looks like a %. And it gives the remainder of the division \nof two numbers. So, for instance, if I want to find out the remainder \nof 11 divided by 3, I can do remainder = 11. And then I\u2019m going to put the percent sign %, \nwhich is the remainder operator, 3. And 11 divided by 3 is 9. 11-9 is 2. So, the remainder is going to be 2. 11 remainder 3 is 2. The remainder operator is often used to determine \nif a number is even or odd. If you can divide a number by 2 and the remainder \nis 0, that means the number is even. [Compound Assignment with Augmented Addition] It\u2019s common to want to add a number \nto a variable like this. See, A = A + 12. Well, A starts at 3, plus 12 is 15. So, we're just adding 12 to whatever A is. Here we're adding 9 to whatever B is. Here, we\u2019re adding 7 to whatever C is. This is such a common pattern that there\u2019s a shortcut \nto do the same thing. It\u2019s the += operator. So, instead of A = A + 12, we can do A += 12. So, this equals the same thing. So, instead of B = 9 + B. We can do B += 9. So, now we're adding the value to the variable \nand assigning the answer to that variable. So, again here, we can do += 7. So, that\u2019s just a shortcut. [Compound Assignment with Augmented Subtraction]  Previously, we learned about +=. Well, -= does the same thing, but subtracting. So, this says A = A - 6. We started at 11, minus 6 is going to be 5. So, the new A is going to be 5. But we can shorten that. Instead of A = A - 6, we can do -=. This is just a shortcut that Javascript has \nthat means the same thing. That means A = A - 6. But it\u2019s shortened. Same here. So, we can do -= 15.\nC = C - 1. We can do C -= 1. So, it just subtracts the number from the original \nvalue and then assigns that new value to the variable. [Compound Assignment \nwith Augmented Multiplication] Here we have A = A * 5. Well, we can do the same thing as before. We can shorten this to A *= 5. So, that means the same thing. Here, we can do A *= 3. And then C = C * 10. We can shorten this to C *= 10. And that\u2019s another shortcut for Javascript. [Compound Assignment with Augmented Division] And there\u2019s also a /=. So, A = A / 12. We can do A /=12. And here, we can just do /=4. Or /= 11. So, another way of just dividing the variable by a new \nnumber and assigning that answer to the variable. [Declare String Variables] We\u2019ve already mentioned strings a little bit. But anytime you have some characters surrounded \nby quotation marks,  they can either be single quotation marks, \ndouble quotation marks, or backticks. It\u2019s a string. These are called \"String literals.\u201d And you can create them just like you see above. I\u2019m going to do a few more. So, var myFirstName = \u201cBeau\u201d. And var myLastName = \u201cCarnes\u201d. So, that\u2019s how you create a string in Javascript. [Escaping Literal Quotes in Strings] Sometimes your string contains the quote symbol. Now, normally the quotes identify the beginning \nand the ending of the string. But what if you assign like this? \u201cI am a \u2018double quoted\u2019 string inside \u2018double quotes.\u2019\u201d I\u2019m actually trying to use these quotes right inside \nthe string,  but the Javascript doesn\u2019t know what to do about it. It thinks that this is the whole string. When it sees the first quote inside the string, \nit thinks we're at the end of the string. So, there\u2019s something called an escape character. So, if you want to escape a quote, that means \nit will no longer be considered the end of the string. I\u2019m going to put a \\. So, if I put a \\ before each of these quotation marks,  Javascript no longer interprets \nas being the last character in the string. So, now you can see this is a full string. And then if I log this count console.log \nand I put (myStr),  you\u2019ll see that it\u2019s not going to show \nthe quotation marks. So, I mean it\u2019s not going to show the / and the \\. It shows the quotation marks without the \\  because when we put \\\u201d Javascript knows \nthat this should just mean a quotation mark. [Quoting Strings with Single Quotes] We talked about escaping a quote character like this, \nwhere you put a \\ before the quote character  so Javascript knows that this is supposed to be \na literal quote character inside the string. However, you\u2019re not going to have to \nescape quote characters very often  because there are other methods \nof accomplishing the same thing  of having a quote character within a string. So, a common way is to use \u2013  instead of having your string start with double quotes, \nhave it start with a single quote. So, a string can either be surrounded by \u2018single quotes\u2019 or \u201cdouble quotes\u201d. So, this time we're just going to have \u2018single quotes\u2019. And now I can remove all of these escape characters \nfrom inside the string here. Okay, so now you can see that Javascript \nstill knows that this is a string,  even though it has these double quotes inside. An additional thing you can do is use backticks. So, if I put backticks before \u2013 at the beginning \nand the end of the string,  now I actually can use single quotes \nand double quotes both within the string. But right now, I\u2019m just going to focus on showing you  the double quotes or the single quotes\nwith the \u201cdouble quotes\u201d inside. [Escape Sequences in Strings] We talked about escaping a double quote \ncharacter by using the \\ before the double quote. There\u2019s actually quite a few other things \nyou can escape out. You can escape out a single quote character. You can escape out a backslash. In fact, anytime you\u2019re going to use a \\,  you\u2019re going to have to put two backslashes  so the Javascript knows that \nyou\u2019re not trying to escape a character. You can also add a new line character, \nor a carriage return, a tab, a backspace,  or a form feed, all with doing a slash \nand the corresponding letter here. So, let me show you an example. I\u2019m going to put a var myString = \nand we're going to make a multiline string. So, we're going to have the \u201cFirstLine.\u201d And now, I\u2019m going to put \\n to add a second line. And then I\u2019m going to put a tab. So, \\t for the tab. And \\\\ to add a \\. Now, it\u2019s going to say SecondLine. Now, I\u2019ll do a \\ and then I\u2019ll just say ThirdLine. And if I were able to logout all of that, \nyou would see three different lines. And you would see the tab and then the backslash character. [Concatenating Strings with Plus Operator] You can concatenate strings with the + operator. You can see here that we have two strings. \u201cI come first\u201d and \u201cI come second\u201d. They\u2019ve been added together \nor concatenated with this. So, the ourStr, our string, \nis now one long string that says \"I come first. I come second\u201d. I\u2019ll give you another example here. So, we can say, myStr = \u201cThis is the start.\u201d And then I\u2019m going to put a space \nbefore the end quotation mark  because when these get concatenated together  we want there to be a space between \nthese two sentences. And I\u2019ll say \"This is the end.\u201d Now let\u2019s just see what that looks like. I\u2019ll do a console.log. And do a (myStr) and let\u2019s see. If I run this, we can see \u201cThis is the start. This is the end.\u201d Just one long string. [Concatenating Strings with Plus Equals Operator] You can also concatenate strings \nusing the += operator. You can see here in this example \nwe have the ourStr = \u201cI come first\u201d. And then we have the ourString += \u201cI come second.\u201d So, remember, just like when you\u2019re using numbers,  += means that you take whatever is on the end here \nand add it to the variable. So, we\u2019ve just added \"I come second.\u201d onto the end of \u201cI come first.\u201d Let\u2019s do another example down here. myStr = \u201cThis is the first sentence.\u201d And then I\u2019ll put a space at the end  because we're going to do a, myStr \u2013 \nand here I\u2019ll do the += \u201cThis is the second sentence.\u201d Now, if I just do a console.log here of (myStr) \nwe should see that those sentences have gone together. \u201cThis is the first sentence. This is the second sentence.\u201d Good. [Constructing Strings with Variables] You can concatenate strings together with variables. You can see here ourName = \u201cfreeCodeCamp\u201d;. \u201cHello, our name is \u201c and then we add this variable, \nthe ourName variable which is freeCodeCamp. \u201cHello, our name is freeCodeCamp. How are you?\u201d Well, we're going to do the same thing down here. So, I\u2019m going to do myName = \u201cBeau\u201d;. And then myStr is going to equal \u201cMy name is \u201c  And then I\u2019m going to add the variable name \nwhich is my name. And then I\u2019ll continue the string here. That\u2019s supposed to be a + here. \u201c and I am well!\u201d See that I put a space here and here because you \nhave to make sure you put appropriate spaces in. And let\u2019s see what that looks like. I\u2019ll do a console.log. I\u2019ll just put (myStr) here. If I show that \"My name is Beau and I am well!\u201d \nLooks good. [Appending Variables to Strings] You can append variables to strings \nwith this += operator. You can see where this variable anAdjective \nwhich is set to the word \u201cawesome\u201d. And then we have another variable \n\"freeCodeCamp is \u201c. And then we have the ourStr variable += anAdjective. So, now our string is going to equal \n\u201cfreeCodeCame is awesome!\u201d. So, let me show you another example. We're going to say someAdjective = \u201cworthwhile\u201d. And now, I\u2019m going to use the +=, \nso myStr += and then I can put someAdjective. So, now after we do the myStr += someAdjective, \nmyStr is going to say \u201cLearning to code is worthwhile.\u201d [Find Length of String] Sometimes you want to find the length of a string. Javascript makes this easy. So, we have the firstName is set to \u201cAda\u201d. But we just use the .length property \nto find the length. So, firstName.length. Remember, firsName is \u201cAda\u201d here. And then .length will return an integer, a number \nthat has the number of characters in the string. So, that will be three. So, let\u2019s try this again. Here\u2019s another example. lastNameLength = lastName. We just have to type in .length. And just to show you, let me console.log that\nand you'll be able to see if I put in (lastNameLength)  and if I run that you'll see 8 because \nthere are 8 characters in the word \u201cLovelace\u201d. [Bracket Notation to Find First Character in String] Bracket notation is a way to get a character \nat a specific index within a string. So, you can see right here, \nwe have the firstName = \u201cAda\u201d. And right here we the have firstName. And then here\u2019s the bracket notation. You can see there\u2019s brackets with a number inside. So, most modern programming languages like \nJavascript don\u2019t start counting at 1 like humans do. They start at 0 which is called \"Zero-based Indexing.\u201d So, with the number 0, that refers to first index \nof the string which would be the A. So, the A would be 0. D = 1.\nAnd then A = 2. So, this first letter of firstName, if we do firstName \nwith the bracket notation with a zero,  that\u2019s going to = A. So, let me show you another example. Let\u2019s say we want to get the first letter \nof the last name. Again, I\u2019m just going to do the bracket notation \nand put a zero here. If I wanted the second letter, \nthe O, I would put a 1 here. So, if I console.log we can see what it came up with. So, console.log.\n(firstLetterOfLastName). And if we look in the console \"L\u201d\nbecause the first letter of the last name is L. [String Immutability] Strings are immutable, meaning \nthey cannot be altered once created. This does not mean that they cannot be changed,  just that the individual characters of a string literal \ncannot be changed. So, look at this example. myStr and then we're going to use bracket notation \nto choose the first letter. So, it currently says \"Jello World\u201d. We want the first letter to change to an H \nto say \u201cHello World\u201d. But if I run that, there\u2019s going to be an error \nbecause of the immutability of strings. Now, we can still change this to \u201cHello World\u201d \nbut we can\u2019t just change an individual letter like that. So, we're going to have to do myStr =  and I\u2019m just going to have to type in the whole thing \nwhich is \u201cHello World\u201d. And now, it will change to the word \u201cHello World.\u201d [Bracket Notation to Find Nth Character in String] You can use bracket notation to get \nany character position in a string. So, earlier we did the first position, \nbut here\u2019s how you get the second position. Remember, the 0 index. So, [1] is the second position. [0] is the first position. We can also get the third letter of the last name \nusing the brackets. We\u2019ll just put [2] in the brackets \nto get the third letter of the last name. [Bracket Notation to Find Last Character in String] You can also use bracket notation \nto find the last letter in a string  even if you don\u2019t know how many letters \nare in the string. You do it based on the length. So, if you look really here, in the brackets \nwe have an expression to be evaluated. [firstName.length-1]. So, the length is 3. 3-1 is 2. The reason why we\u2019re doing a -1 \nis because remember we count starting at 0. So .length-1 is going to be the last index of the name. So, you can do that same thing here \nto get the last letter of the last name,  I can just do lastName[lastName.length - 1]. And that\u2019s going to get the last letter of the last name \nwhich is the E right here. [Bracket Notation to Find Nth-to-Last \nCharacter in String] We saw how to use bracket notation \nto get the last letter of a string. You can also do the third to last letter \nor fourth to last letter. So, you just subtract however much you want \nfrom the length of the string. So, we have the bracket notation, \n[firstName.length - 3]. That\u2019s going to get the third to last letter. So, we want the second to last letter. Into this variable here we do something similar. We just do [lastName.length]. And then we're going to subtract 2 to get \nthe second to last character of the string. [Word Blanks] We\u2019re going to use our knowledge of strings \nto build a Mad Libs style word game. In a Mad Lib game you are provided sentences  with some missing words like \nnouns, verbs, adjectives, and adverbs. And then you fill in the missing pieces \nwith words of your choice  to make a sentence that could be funny \nand hopefully makes a little bit of sense. So, let me show you how you do this. This also uses a function. Now, we haven\u2019t talked about functions yet. I\u2019m going to explain those more later. But for now just go with it because \nthat\u2019s not the point of this lesson for now. But this function called wordBlanks, \nyou can call the function  and you have to pass in certain types of words. You pass in a noun, an adjective, a verb, \nand an adverb. So, down here, you can see that \nwe're calling the function called wordBlanks. That\u2019s the function name here. And we're passing in a noun, \nan adjective, a verb, and an adverb. So, the point is that we are going to use all these \nwords that are passed in to make a sentence. So, we know that var result = an empty string at first. And then we have to use all these words in result. And then the result is going to be returned \nfrom this function. And eventually, it\u2019ll be logged out onto this screen \nwith this console.log. So, what I\u2019m going to do here is do result +=. We're going to use the += to add something \nto this result using all the noun,  the adjective, the verb, and the adverb. So, let\u2019s see. It\u2019s going to say \u201cThe \u201c and then we'll use \nthe adjective myAdjective. In this case, the big. The big and then let\u2019s put the noun. myNoun because adjectives are words \nthat describe nouns. The big dog. And then we're going to say what this now is doing \u2013 \nthe verb. myVerb. The big dog ran. And then where does he run to? \u201cto the store \u201d. And then we're going to add \u2013 \noh, we need a space here. So, there\u2019s a space between \u201c to the store \u201c. And then we're going to add \nthe final adverb. So, now, we have to add a period. And there\u2019s one more thing we have to add, \nor a few more things. So, right now myAdjective, myNoun, myVerb. And there\u2019s no spaces in between those. So, if I run that you can see what \nthat\u2019s going to look like in the console. It just said, with no spaces. So, we're going to have to add some spaces \nin here also. Let\u2019s do that. And now, it\u2019s going to take in the noun, adjective, \nverb, and adverb and then put it into that sentence. So, one cool thing is we can actually pass in \nsome different words. So, like for instance, if I copy this, I\u2019m going to paste it. Instead of \u201cdog\u201d I will put for the noun \u201cbike\u201d. And an adjective I\u2019ll put \u201cslow\u201d. And then for the verb, I\u2019ll put \u201cflew\u201d. And the adverb I\u2019ll put \u201cslowly\u201d. And now if we look in the console \nwe have two sentences. The big dog ran to the store quickly. The slow bike flew to the store slowly. [Store Multiple Values with Arrays] Arrays allow you to store \nseveral pieces of data in one place. So, look at this example, ourArray. Now, arrays always start with a bracket \nand then end with a bracket  to show the beginning and ending of the array. And every element in the array \nis separated by a comma. So, you can see here the first element is a string. The second element is a number. And you can have more and more elements. You just put comma and you can keep adding elements. And the elements can be any data type. You can see here we have a string and a number,  but you can also use arrays or floating numbers \nor really any sort of data type in your array. So, lets see another example. So, let\u2019s do myArray = [\u201cQuincy\u201d]. And then for a number we\u2019ll do 1\nbecause Quincy is number 1. [Nested Arrays] When one of the elements in an array \nis another array,  that\u2019s called a nested array \nor a multidimensional array. You can see here\u2019s the beginning of the array \nand here\u2019s the end of the array. But the first element in this array is another array \nwith two elements of its own. Same with here. The second element is an array. So, this is two arrays within another array. So, we can do that here. Here\u2019s another example. So, let\u2019s our first element in the array will be an array \nwith a string and a number. And then I\u2019ll put a comma to put \nthe second element of the array  which will be another array with a string \nand a number. [Accesses Array Data with Indexes] Earlier we learned how to use bracket notation \nto find a specific index in a string. You can do the same thing with arrays. So, look at this array, ourArray. We have three elements. [50, 60, 70]. And these have the indexes [0, 1, 2]. So, with this ourArray with the bracket notation \nand the [0], that\u2019s going to be index 1,  which is going to equal 50. So, we can do the same thing here. myArray = [50, 60, 70]. So, let\u2019s try to find the first element in that array. So, var myData = myArray. And then I\u2019m going to do index [0]. I can do index [1], index [2]. And then if we console.log that, \nwe can see for sure what that is. So, if I put (myData) \nand we can see in the console it\u2019s 50. [Modify Array Data With Indexes] You can use array indexes to modify arrays. Now, we tried to do this earlier with strings \nusing bracket notation  and we were not able to modify a string \nusing bracket notation. But with arrays, you can. So, the original array is [18, 64, 99]. And then we're going to use the array index of [1]. Now, [1] is going to be the second number. Remember, [0, 1, 2]. And this number 64 is going to be set to 45. So, the new array is going to be [18, 45, 99]. Let\u2019s try it again with this, [18, 64, 99]. So, let\u2019s do myArray \nand then instead of doing the second digit,  I\u2019m going to do the first digit in then array, \nthe first index which would be index [0]. And I will say = 45. So, now this array has been updated. So, if I do a console.log and then do (myArray], \nwe'll see that the array is now [45, 64, 99]. [Access Multi-Dimensional Arrays With Indexes] You can also use bracket notation to select \nan element in a multi-dimensional or array of arrays. So, you can see this array here, \nwe have our outer array. But inside that array are more arrays. The elements of the array are other arrays. And the last element of the array actually \nhas an array in this. So, this is a three-layer deep array right here. So, to access an array of arrays or an element \nwithin an array that\u2019s within an array,  you use a double bracket notation. So, if you see this example here, myArray, \nthe first bracket is [0]. That\u2019s going to get the first element in the array \nwhich will be right here. And then that element is an array. So, the second bracket would be the index \nof the array within the array. So, this zero would point to here. So, let\u2019s try to figure out how we can select \na value equal to 8. Well, let\u2019s see. I see an 8 right here. So, let\u2019s figure out what this first number should be. Well, let's count. Zero, one, two. So, the third array would be index [2]. Now, we want to go zero, one \u2013 now we have to do \nindex [1] to get the second number in the third array. So, let\u2019s test to see if that equals 8. So, I\u2019ll do a console.log and then do (myData) here. And we'll see if that equals 8. And it does. We did it. [Manipulate Arrays with push()] You can have pinned data to the end of an array \nwith the push function. So, see, an array has been set up here, ourArray. [\u201cStimpson\u201d \"J\u201d \"cat\u201d] \nAnd then we take ourArray right here  and use the push function to push into the next \nelement in the array another array here. So, now it\u2019s going to look like this. We can see at the end of the original array, \nwe\u2019ve pushed this other array at the end. So, let\u2019s try it again down here. We have myArray. And you can see we have each element \nin the array is another array. So, I am going to do myArray.push(). And then I can push something on the end here \nwhich will be like above, another array. So, this is going to say [\u201cdog\u201d, 3]. And now we've pushed this onto the array. [Manipulate Arrays with pop()] We can remove an item from an array \nwith the pop() function here. So, see this pop() here? And then we know it\u2019s a function because \nof the parenthesis at the end of the word pop. So, the array starts with [1,2,3]. So, now we do this -- ourArray.pop() \nand it\u2019s going to remove the last element  which is the 3 and then it\u2019s going to put it \nright into this variable here. So, now as you can see down here, \nremovedFromOurArray now equals 3. And then ourArray is going to equal [1,2] \nbecause the 3 has been popped off. So, we can do the same thing here. So, removedFromMyArray = myArray.pop()  and we can see what the array is going to equal\nnow if I just do a console.log(myArray). And if you do this, we can see that the array only has \nthe one item, the one array instead of the two arrays. [Manipulate Arrays with shift()] The shift function is very similar to the pop function  except it removes the first element of the array \ninstead of the final element. So, we see the shift function \non the end of the array here. And the array is the same as before. But now the first element \u201cStimpson\u201d \nis being removed. After we shift off the first element the array \nis going to equal \u201cJ\u201d \"cat\u201d. And the removedFromOurArray \nis going to equal \u201cStimpson\u201d. So, let\u2019s do another example down here. We're going to do a shift() again. So, I\u2019m going to do = myArray.shift(). And now myArray is just going to equal \n[\u201cDog\u201d, 3]. And the removedFromMyArray \nis going to equal [\u201cJohn\u201d, 23]. [Manipulate Arrays with unshift()] The unshift() function is similar \nto the push() array function. While push() adds an element to the end of the array,  unshift() adds at element \nto the beginning of the array. So, let\u2019s look through this example code. We have the array \u2013 \n[\u201cStimpson\u201d \"J\u201d \"cat\u201d]. We're going to shift off the first element,\n remove the first element. So ourArray is \n[\u201cJ\u201d \"cat\u201d]. Now, we're going to unshift() or add an element \nat the beginning which is the string \u201cHappy\u201d. So, the array will now be \n[\u201cHappy\u201d \"J\u201d \"cat\u201d]. So, let\u2019s try again. This time the array is \n[[\u201cJohn\u201d, 23], [\u201cdog\u201d, 3]]. Because of the shift, \nwe\u2019ve shifted off the [\u201cJohn\u201d, 23]. And now I\u2019m going to unshift() something. So, I\u2019ll do myArray.unshift(). Now we're going to add something \nto the beginning of the array. We\u2019ll do ([\u201cPaul\u201d, 35]). So, now the array is just going to be \n[[\u201cPaul\u201d, 35], [\u201cdog\u201d, 3]]. [Shopping List] Let me give you another example of nested arrays. This will be a shopping list. So, inside this array we're going \nto have another array. And we're going to have items. Cereal \u2013 how many boxes?\n3 boxes. We also need some milk. Let\u2019s get two cartons of milk. Let\u2019s get some bananas. Three bunches of three bananas. We'll also get some juice. Two containers of juice. And finally, we will get some eggs. We'll get 12 eggs. And now we've created an array of arrays \nwhich is our shopping list. [Write Reusable Code with functions] Functions allow us to create \nreusable code in Javascript. This is how a function is set up. We have the word function. Then we have the function name. There\u2019s always parenthesis here. And you can pass information into the parenthesis. We'll talk about that later. And then we have these curly brackets. So, this is the opening curly bracket {. And then we have the closing curly bracket }. And everything inside the curly bracket is run \nanytime the function is called or invoked. So, here the function is being called by just putting \nthe function name with parenthesis after the name. So, every time this function is called, just like this, \nthe console is going to say \"Heyya, World\u201d. So, if we load the console right now \nyou can see it says \"Heyya, World\u201d. And if I just copy this and paste it a few times \nwe'll see that it\u2019s going to say \"Heyya, World. Heyya, World. \nHeyya, World\u201d in the console. Since we have run the function three times, \nwe see the words \u201cHeyya, World\u201d three times. So now I\u2019m going to create my own function \nthat\u2019s going to be very similar. So, we'll do function reusable function(). And this time it\u2019s going to \nsay something slightly different. It\u2019s going to say \u201cHi world\u201d instead of \u201cHeyya, World.\u201d And now I can call the function down here, \njust like this \u2013 reusableFunction. Oh, forgot to put the parenthesis. That\u2019s important. Now you see \"Heyya, World\u201d and \u201cHi World\u201d \nin the console. [Passing Values to Functions with Arguments] Parameters are variables \nthat act as place holders for the values  that are to be input to a function when it is called. So, we have defined a function right here \ncalled ourFunctionWithargs. And inside the parenthesis we see the letters (a, b). Now, these could be any name. We could call these anything, not just (a,b). They can really be any words up here. And that means that when this function is called \nwe're going to pass data into the function. Or input data into the function. So, you can see the example here \nwhere we're calling the function. And instead of saying, (a,b) in the parenthesis, \nwe're actually passing the values (10, 5). So, when the function runs, it can use the information \nthat\u2019s passed into the function. So, in this case it says console.log(a-b). Well, that\u2019s going to be 10-5 because the numbers \n10 and 5 have been passed into the function. And that\u2019s going to output 5. So, I\u2019m going to create a function that\u2019s very similar \nto that that function. This one is going to be called functionWithArgs. And it\u2019s also going to accept an (a, b), \nbut we could call it anything we want. And inside instead of subtracting a-b, \nwe're going to do (a+b). Now, I\u2019m just going to call this function  functionWithArgs and I\u2019ll pass in (10, 5) \nand let\u2019s see what that looks like in the console. So, first it outputted 5 for this one. And then it output 10 for this one. [Global Scope and Functions] Scope refers to the visibility of variables. Variables which are defined outside \nof a function block have global scope. Global scope means they can be seen \neverywhere in your Javascript code. For instance, I\u2019m going to declare a variable \nright here called myGlobal. I\u2019ll set it to 10. Now since this is set outside of a function, \nwe can see it anywhere in the whole code. Even in this function right here called fun2. We can see that we reference it here and here. And we're going to be able to see it. Now, this is an if statement. Which we will talk more about later. But we're checking if the type of myGlobal \ndoes not equal \u201cundefined\u201d. So, it will not equal \u201cundefined\u201d if it has been defined \nand the program knows about the variable. Since this is global scope, it does not equal undefined. It equals 10. The program knows about the variable \nbecause this is in global scope. So, since this function can \naccess the myGlobal variable,  it will run what\u2019s in this if statement where we just \nadd to this output variable, myGlobal. And then we put the value of myGlobal which is 10. Now, here\u2019s another example where we're going to \nsee if the type of oopsGlobal equal \u201cundefined\u201d. Well, we're going to set that here. So, it is possible to set a variable without \nusing the var keyword. So, I\u2019m going to set this to oopsGlobal = 5. So, you can see here that there is no var keyword. So, normally if you do use a var keyword, since this is \nwithin a function, it will be scoped to that function. If we have the var keyword here, \nthis would be scoped to this function  so you would not be able to see it in this function. However, since we forgot to put the var keyword \nin this example,  there\u2019s no var keyword, it becomes \nglobal automatically. That means you can access it anywhere else \nin the program including here. So, if we put the var keyword, then oopsGlobal \nwould equal \u201cundefined\u201d. And then we would never have this line in the output. However, since we did not put the var keyword, \noopsGlobal = 5  and this will be added to the output \u2013 \noopsGlobal and then the colon 5. So, when we console.log the output \nit\u2019s going to say myGlobal 10, oopsGlobal 5. Now actually it\u2019s not going to say that \nbecause this is in Scrimba. And in Scrimba it\u2019s more careful and just enforces \nthe fact that you have to use a var keyword. But if we were in our browser \nit would not enforce the var keyword. And then it would actually show myGlobal 10, \noopsGlobal 5. If this was a little complicated, \ndon\u2019t worry about that  because a lot of these concepts we\u2019ll be going over \nagain later with additional examples. [Local Scope and Functions] Variables which are declared within a function as well \nas the function parameters have local scope. That means they\u2019re only visible from \nwithin the function. Let me show you what I mean. If I declare a variable right here, myVar = 5. So, we've declared this variable inside a function. So, this variable, myVar is only visible \ninside the function. So, it says console.log(myVar). It should console.log the 5. So, we're going to call the function here. And it\u2019s going to console.log myVar. But then the program is going to run this console.log \nthat\u2019s outside of the function. It\u2019s still going to try to access myVar. And so, let\u2019s see what happens. You can see in the console that first there\u2019s a 5 \nbecause it console.log within the function,  then there\u2019s an error because it tried to access \nmyVar outside of the function. So, really, we just need to delete this where we try \nto access the variable outside of the function. And now there is no error. [Global vs Local Scope in Functions] It is possible to have both local and global variables \nwith the same name. When you do this, the local variable takes precedent \nover the global variable. Let me show you an example. Here we have a function called myOutfit \nthat\u2019s going to return outerWear. That\u2019s this variable up here. This is a global variable because \nit is declared outside of the function. So, when we console.log the output \nof the myOutfit function,  the myOutfit function is going to return outerWear \nwhich is the word \u201cT-Shirt\u201d. So, let\u2019s just check the console \nand you can see, yep \"T-Shirt\u201d is there. However, let\u2019s change this up a bit. So, you have some space here because \nI\u2019m going to put var outerWear = \u201csweater\u201d. So, now if I run this program \nyou can see in the console  it\u2019s going to say \u201csweater\u201d instead of \u201cT-Shirt\u201d. It\u2019s because this local variable outerWear took \nprecedence over the global variable. Another interesting thing about this, \nif I do a console.log. And I console.log the outerWear variable, \nwe'll see that it\u2019s still \u201cT-Shirt.\u201d So, first you see in the console it says \nsweater and T-Shirt. So, first we console.log this function \nwhich is sweater \u2013 it returns sweater. And then we console.log the global variable \nwhich is T-Shirt. [Return a Value from a Function with Return] You can return a value from a function \nwith this return statement. So, we have this function here. And we\u2019re passing a number into it \u2013 the num. And then it\u2019s going to return \nwhatever is after the return keyword. In this case, num-7. So, here we're going to console.log the function. And it returns the result of -7, is this 10-7, which is 3. So, it\u2019s going to console.log the number 3. If we look in the console, yep, it console.log \nthe number 3 because the function returns 3. Let\u2019s try creating another one. This function is going to be called timesFive. Again, we'll pass in a number. And it\u2019s just going to return something. It\u2019s going to return the num * 5. And then just like before, we can test it \nusing a console.log (timesFive)  and we'll pass in the number 5 here. And if I run this, we'll see that it retuns \nthe number 25. [Understanding Undefined Value Returned \nfrom a Function] Functions can have return statements, \nbut they don\u2019t have to. In this case, this function adds 3 to the sum variable  which is a global variable \nbecause it\u2019s defined before the function. It does not return anything. So, if you don\u2019t specify a return value, \nthe return value is just undefined. Now I\u2019m going to create another function \nthat is similar. This is going to be called addFive(). And this time we'll just do sum = sum+5. Or we can shorten this to use the +=. So now that\u2019s going to add five to the sum also, \nbut it\u2019s not going to return anything. So, if we log this out, it would be undefined. [Assignment with a Returned Value] It\u2019s simple to assign a returned value to a variable. See right here we have the function change. And you pass in a number and it\u2019s going to return \nthe result of this mathematical expression. So, when we call the function change \nand pass in the 10,  the value that is returned from this function \nis going to be stored in this variable here. We can do the same thing down here. First we initialize the variable processed \nand processedArg. It\u2019s going to return the result \nof this mathematical expression. So, I can set processed to equal \nwhat this function returns. So, I can say processedArg. And then I\u2019ll just pass in the number 7 here. And now processed equals the result \nof this mathematical expression. [Stand in Line] In computer science a cue is an abstract data structure \nwhere items are kept in order. New items can be added to the back of the cue and \nold items are taken off from the front of the cue. We're going to simulate that right now, some of the \nfunctionality of a cue using this nextInLine function. So, the purpose of this is to show \nthat in this nextInLine function  you can add an item to the array that\u2019s passed in. And then it\u2019s going to return the first item on the list. For instance, if we have this array right here,  if we add an item to this array \nit should come after at the end. So, it should come after 5. And then it should return the first item on the list. In this case, it\u2019s 1. So, you see, we had some console.log set up. So, it should show what the list looks like, \nthe array looks like beforehand. And then show what it looks like afterwards. This JSON.stringify is just a way \nto change an array into a string  that can easily be printed out to the screen. So, to do this, we're just going to have to do two \nthings that we've learned about already. So, the first thing is to add the item onto the list. So, we see right here, nextInLine passed \nin the testArr and 6. So, we're calling this function nextInLine. We're passing in this testArr here. And the number 6. We want the number 6 to be added \nto the end of the array. So, we'll just do arr.push(). And then I\u2019ll put in (num). Just like that. Oh, actually, it\u2019s (item). So, what we did, we took this array \nthat was passed in here which is in this case, testArr. And we push the time that was passed in. And in this case here, it\u2019s item 6. Now we want to return the first item on the list. We want to remove and return this item. So, that we console.log here \nit should show the number 1. So, instead of returning item, \nI\u2019m going to return arr.shift(). That\u2019s what shift does. Shift moves the first item \nand returns that first item. So, let\u2019s check this out. Okay, you can see before, [1,2,3,4,5]. Then we've popped off the 1 \nand after it is [2,3,4,5,6]. We did it. [Boolean Values] Booleans are another datatype in Javascript. There are only two values, true or false. They\u2019re basically little on/off switches \nwhere true is on and false is off. They don\u2019t use quotation marks around the Boolean. See, it just says return false. So, this is a function here. It should be indented, where it\u2019s going to \nreturn false when you call this function. It could also be true. So, we could return true. You can use true and false in more places \nthan just function returns  and we'll be talking more about that later. [Use Conditional Logic with If Statements] An if statement is used to make decisions in code. The keyword If tells Javascript to execute \nthe code in the curly braces  under certain conditions defined in the parenthesis. So, here is a full if statement right here. And there\u2019s always parenthesis after the keyword if. And here\u2019s the condition. So, if the stuff inside these parenthesis \nevaluates to true, then the code within these curly braces \nwill be evaluated or run. So, in this case, it\u2019s a variable. So, if the isItTrue variable is true, \nit will return \u201cYes, it\u2019s true\u201d. Now if this is not true, then we'll get to \nthe second return statement \"No, it\u2019s false\u201d. So, this whole function here takes in a variable. And we check if that\u2019s true or not. So, I\u2019m going to make another example just like this. We have another function \nthat hasn\u2019t been filled out yet, trueOrFalse. And there\u2019s a variable that\u2019s passed in (wasThatTrue). So, we'll say if \u2013 and then the parenthesis \n(wasThatTrue). If that\u2019s true, we're going to return something. It will be a string just like before. And the string is \"Yes, that was true\u201d. If it\u2019s not true, then we'll get to the second return \nstatement in the function. And we'll return a different string. We'll return \u201cNo, that was false\u201d. I\u2019ll just add some semicolons, \nand then I can run this. And we'll see what happens. Oh, return needs to be spelled correctly. So, let me spell return correctly. So, before I run this, I\u2019m going to add a console.log. So we can console.log the answer. So, this is the function call here, true or false. We\u2019re passing in true. And then we're going to log what is returned here. \u201cYes, that was true\u201d. Since we passed in true, this if statement evaluates \nto true and this code is run right here. [Comparison with the Equality Operator] There are many comparison operators in Javascript \nthat will return a Boolean of true or false. The most common is the equality operator. And it\u2019s often used in an if statement. So, here it just says if (val). So, we have this whole if statement right here, if (val). We're going to see if if (val) = 12. Now, to check if it equals 12, \nwe're going to have to use the ==. That is the equality operator \nand we'll say if (val == 12). The reason why we can\u2019t just use a single equal sign \nis that a single equal sign is the assignment operator. If we just had a single equal sign,  that would mean that we were setting the value \nof the val variable to equal 12. We're not trying to set this to equal 12, we're trying \nto check if the value of this variable equals 12,  so we have to use the double equal sign. So, now, this testEqual function is going to test \nto see if the number we pass in is equal to 12. I can do a console.log here. Console.log. And then we can see what appears \nin the console here. \u201cNot Equal\u201d because 10 does not equal 12. [Comparison with the Strict Equality Operator] We learned about the equality operator \nwhich is the double equal == sign. There\u2019s also the strict equality operator, \nthe triple equal sign ===. So, here we're checking if 3 equals 3 \nwith the strict equality operator. So, the difference is that the equality operator,  the double equals sign attempts to convert \nboth values being compared to a common type  while the strict equality operator \ndoes not do the type conversion. So, this is going to evaluate to true, the 3 === 3. But the 3 === \u20183\u2019 with the string on the side \nis going to evaluate to false. Both of these would be true if we were \nusing the double equals sign ==  because the string would be converted \nto a number and it would be equal to true. But with the === it does not get converted to \na number, so it would be evaluated to false \u2013  this second one with the three equal signs. So-and-so, here, we're just going to use it \nright in this if statement. And do === 7. So, now we can pass in the number 7 \nand it\u2019s going to evaluate to true. But if we pass in a string 7, it will evaluate to false. [Practice Comparing Different Values] We will do one more review with the equality \noperator and the strict equality operator. So, if I run this here, we'll see in the console \nit says \"Equal\u201d  because it\u2019s checking if the number 10 \nand the string \u201c10\u201d are equal. So, if a = b, the number 10 equals a strict number 10, \nreturn \u201cEqual\u201d. Since we're using the equality operator with \ntwo equal signs, it performs a type conversion. And it converts the string into a number. But if we use the strict equality operator \nwith three equal signs,  I\u2019ll run that again, and you\u2019ll see \u201cNot Equal\u201d \nin the console  because now it\u2019s not converting the types \nand it\u2019s just checking if a number is equal to a string,  which it\u2019s not, so we get not equal. [Comparison with the Inequality Operator] Now I will show you the inequality operator  which is basically the opposite \nof the equality operator. So, I\u2019m going to do the inequality operator \nwith an exclamation point and an equal sign. In this case, I\u2019m going to see if the value \nis not equal to 99. And again, just like the equality operator, \nthis does type conversion. So, let\u2019s just run this program \nand we'll see it is \u201cNot Equal\u201d  because 10 \u2013 we passed in 10 \ninto the function here. And 10 is not equal to 99, so we get \u201cNot Equal\u201d. [Comparison with the Strict Inequality Operator] The strict inequality operator is basically \nthe opposite of the strict equality operator. Now, it works like this. So, it says if (val) \u2013 I\u2019m going to do \nif (val) does not equal 17. So, this is the strict inequality operator. Instead of one equal sign we have two equal signs. And that means it\u2019s going to check if this is not true. But it\u2019s not going to convert types. So, for instance, if we were checking if the number 3 \ndoes not equal the string 3, that would be true. So, in this example, we're just checking \nif 10 does not equal 17. If we run this, we will see it\u2019s not equal. [Comparisons with the Logical And Operator] We can also use the greater than operator. So, in this function we're checking \nif a value is over 100. So, I\u2019m going to put greater than 100. And then here we're checking if a value is over 10, \nso I\u2019ll put greater than 10. So, here we call the function. We pass in 10. And if I run that function, you'll see \n\u201c10 or Under\u201d because we're not over 100. We\u2019re not over 10. 10 or under, because we passed in 10. [Comparison with the Greater Than \nOr Equal To Operator] We can also use the greater than \nor equal to operator. So, we'll finish this function by using greater than \nor equal to. It\u2019s just a >=. And we'll put 20 down here. Just greater than or equal to 10. If I run that, we should see \u201c10 or Over\u201d \nbecause we're passing in 10  and it\u2019s greater than or equal to 10. [Comparisons with the Less Than Operator] Now I\u2019ll show you an example \nof the less than operator. With this function, we're going to check \nif the value is less than 25. And then up here we're checking \nif a value is less than 55. So, here, it\u2019s a trick I use to remember which symbol \nis less than and which symbol is more than. If you see the less than symbol looks kind of like \nthe letter L which is the first letter in less than. And then the more than symbol is just the opposite. [Comparisons with the Less Than \nOr Equal To Operator] And we also have the less than \nor equal to operator we can use in Javascript. So, here, we're going to check if it\u2019s less than \nor equal to 12. So, we just put the less than operator 12. Equal \u2013 less than or equal. That\u2019s an important part. Here it\u2019s the less than or equal to 24 \nto make this statement true. And if we run, we see \u201cSmall Than or Equal to 12\u201d. The number 10 we passed in. [Comparisons with the Logical And Operator] Sometimes you want to check if 2 things \nare true at the same time. For instance, you may want to check \nif this value is less than or equal to 50. And you also want to check if the value \nis more than or equal to 25. So, here we have a nested if statement. So, it\u2019s going to check if it\u2019s less than equal to 50  and if it\u2019s more than equal to 25, \nthen it\u2019s going to return \u201cYes\u201d. But there\u2019s an easier way to do this. So, what I\u2019m going to do is copy this \nwhere it says value is more than or equal to 25,  I\u2019m going to delete this nested if statement. So, we don\u2019t need that if statement. And I\u2019m going to use the And operator. So, we have less than or equal to 50. And if I put two ampersands, like this, \nthat means and. Now, I\u2019m going to put value is more than \nor equal to 25. So, this says if value is less than or equal to 50 and the value is also more than or equal 25,  then we're going to return \u201cYes.\u201d So, both this statement \nand this statement  have to be true to get inside \nthis if statement here. [Comparisons with the Logical Or Operator] In this code here, we\u2019re checking \nif the value is not between 10 and 20. So, if the value is less than 10, \nwe return \u201cOutside\u201d. And if the value is more than 20, \nwe return \u201cOutside\u201d. There is an easier way to do this \nwith the logical Or operator. So, I\u2019m just going to delete this \nwhole if statement here. And then I can add an or statement. Which is just two pipes. So, I\u2019m going to put val is more than 20 here. So, now, we're checking if the value is less than 10 \nor if the value is more than 20. Either way, we're going to return \u201cOutside\u201d. And if it\u2019s not true, we'll return \u201cInside\u201d. [Else Statements] When an if statement is true, normally the block of \ncode right after the if statement will be evaluated. And if it\u2019s not true, nothing happens. But with an else statement, an alternate block of code \ncan be executed when it\u2019s not true. So, this is a perfect use case. If value is more than 5, the result is bigger than 5. If the value is less or equal to 5, \nthe result is 5 or smaller. We can do this with an else statement. So, I\u2019m just going to type in else here. And then we can just delete this whole if statement. Just like that. And now we have if the value is less than 5. The result is going to be \u201cBigger than 5\u201d. Else, if it\u2019s not more than 5, \nwe'll return \u201c5 or Smaller\u201d. [Else If Statements] If you have multiple conditions that need to be \naddressed, you can use else if statements. It\u2019s a way of chaining if statements together. In this example, we have three conditions. If value is more than 10, \nwe're going to return greater than 10. If it\u2019s less than 5, return smaller than 5, \nor else we're going to return 5 and up. So, this is a perfect use case for an else if statement. So, this is how we do it. We\u2019ll do else and then just we're going to add \nthe if statement at the end of the else. I\u2019m just going to delete all of this stuff. So, else if value is less than 5, \nand then we're going to have one final else statement. Else \u2013 and I\u2019m going to put this statement here. This final return. Just going to cut that. And then paste in right in there. So now, instead of using multiple if statements, \nwe have the if and then we have the else if,  and then we have the else. [Logical Order in If Else Statements] When you\u2019re using else if statements order \nis very important. Let\u2019s look at this example here. In this function, first we check if the value \nis less than 10 and return less than 10,  then else if we check if the value is less than 5, \nand return less than 5. Well, if we look at this example \nand we pass in the number 7. If I run this, you\u2019ll see it\u2019s going to say \"Less than 10\u201d \nwhich is what we want. However, if we put 3 it\u2019s still just going to say \n\u201cLess than 10\u201d. Really, we want this to say \"Less than 5\u201d \nbecause it is actually less than 5. However, this is in the wrong order. So, what we need to do is change the order. So, this should be 5. This should be 5. And this should be 10. And this should be 10. So, once the first condition is met, it doesn\u2019t even \ncheck for the rest of and conditions. So, that\u2019s why it\u2019s important to think \nabout the order. So, if we run this now, yeah \"Less than 5\u201d. That\u2019s what we want. [Chaining If Else Statements] You can also chain if and else if statements. So, I\u2019m going to complete \nthe following challenge here. Write chained if/else if statements \nto fulfill the following conditions. So, we have these conditions. If the number is less than 5, \nwe're going to return \u201cTiny\u201d. If it\u2019s less than 10, return \u201cSmall\u201d, and so on. So, what I\u2019m going to do is actually just copy this \nright here because this is written \u2013  part of it is written exactly how \nwe want it to be written. I\u2019ll just paste it here. And I\u2019m going to just add the if and else statements. So, it\u2019s going to be if \u2013 \nand then we put this in parenthesis  because the condition is always in paranthesis. If number is less than 5, then we're going to use the \ncurly braces and we're going to return \u201cTiny\u201d. So, I\u2019ll just move that up here. I\u2019ll cut it and paste it. Now, we're going to use an else if statement. And I got the curly braces. First of all, also I need to put the condition \nin these parenthesis. I\u2019m just going to cut this. Number is less than 10. Put it right here. And we're going to return this \u201cSmall\u201d. So, I\u2019ll put that in the curly braces here. And then we have another else if statement. Else if and the condition. Just like before, the number is less than 15. Put that in there. We always need the curly braces to show \nwhat\u2019s going to happen in the if statement. So, I\u2019m just cutting and pasting this text again. We have an else if. And then we have this here. And we have return \u201cLarge\u201d. Another \u2013 actually, the final thing \nis just going to be else. We don\u2019t even need an else if \nwith this statement at the end. We don\u2019t even need to put the condition  because if it\u2019s more than or equal to 20 \nthat\u2019s going to be everything else. So, I\u2019m just going to cut this. We don\u2019t need any of this stuff here. And we're just going to return \u201cLarge\u201d. So, with this one test here, for test 7, \nwe can actually console.log that. Console.log. And see what it returns for 7. We can try a few different things. Oh, we have an error here. Oh, forgot to \u2013 I put this parenthesis the wrong way. Let\u2019s try that again. \u201cSmall\u201d but if this is 20, it should be \u201cHuge\u201d. And if it\u2019s 19, which would be less than 20, \nwe should see \u201cLarge\u201d. Yep, that worked. [Golf Code] In the game of golf each hole has a par  which means the average number of strokes you\u2019re \nsupposed to use to get the ball into the hole. So, depending on how far above or below par \nyour strokes are, there\u2019s a different nickname. So, here are some of the nicknames \n\"Hole-in-one!\u201d \u201cEagle\u201d \u201cBirdie\u201d \u201cPar\u201d  and we're going to write a function where you pass in \nthe par and you also pass in the strokes. You can see up here, par and strokes. And it\u2019s going to return the nickname. So, that\u2019s what we're going to write. You can see this table here shows what we have to do. If the strokes are 1, then you get \u201cHole-in-one!\u201d. If the stroke is less than or equal to par-2, \nyou get an \u201cEagle\u201d. And so on. And we also have this array that\u2019s \ngoing to make it easier  because we can just use things from this array \ninstead of typing out the words. So, we're going to start with an if statement. If \u2013 and then we have to put the condition. If (strokes) == that\u2019s the equality operator. We don\u2019t want to use a single equals sign \nbecause that would be the assignment operator. If it equals 1, then we can return. And we can see down here, \nwe're going to return \u201cHole-in-one!\u201d. But we can just use it from this names array. So, it\u2019s going to be names. And this is going to be index zero of the array. So, we'll do names and then [0]. And then we can do an else if. Else if \u2013 and then we can put the condition, (strokes). I have to spell strokes right. Strokes. And then we can just actually copy this \nright from here. Less than or equal to par-2. And then we are going to return name \nand this will be the index[1] which is an \u201cEagle\u201d. At this point, I can do some copy and pasting. I\u2019m going to copy this whole thing \nbecause a lot of the rest of this will be else if. So, else if strokes is \u2013 this time \nit\u2019s going to be equal to par-1. And we're going to return \u201cBirdie\u201d \nwhich is array index[2]. And I\u2019m going to continue just like this. So, this time it\u2019s if strokes equal par, \nwe're going to return name index[3]. See? Zero. One. Two. Three. It\u2019s going to be the word par up. Keep just like this. Now it\u2019s going to be par+1. And we'll change this to [4]. Now it\u2019s going to be par+2. And we\u2019ll change this to [5] \nwhich is going to be the double bogie. And finally, if strokes is \u2013 change this to more than \nor equal to par+3  that means you did very poorly \nso you should just go home. So, it\u2019s going to be name index[6]. And we don\u2019t need this anymore. So, now we're going to do some tests here. I\u2019m going to do a console.log. And we're going to pass in the function \nthat we're calling. So, in this case, the par is 5 \nand the strokes are 4. So, that should return \u201cBirdie\u201d. Let\u2019s see what happens. Null. Okay. That\u2019s not what I expected. It\u2019s because this should be names. I spelled this wrong. That\u2019s why it\u2019s sometimes better to check \nbefore you go through the whole thing. You can test things as you go. But let\u2019s do that again. Yep \"Birdie\u201d. And if I type in 2 here \"Eagle\u201d. If I type in 8, it\u2019s probably going to tell us to go Home. \u201cGo Home!\u201d Yep. We just completed this challenge. [Switch Statements] Instead of using chained else if statements \nyou can use a switch statement. A switch statement tests a value and can have many \ncase statements which define various possible values. So, let me show you how that works. Here we're going to write a switch statement  which tests val and sets the answer \nto the following conditions. If we pass in 1, the answer should be \u201calpha\u201d. If we pass in 2, the answer should be \u201cbeta\u201d. And so on. So, let me show you how that works. We'll just type in the word switch. That\u2019s the keyword here. And we're testing the val that\u2019s passed \ninto this function. So, it starts off kind of like an if statement. And right now \u2013 so, we're going to compare \nthe val to the different cases that we have. So, we'll have case and the first number \nis going to be 1. So, here we're saying if the case of val is 1, if val = 1  and it\u2019s using the strict equality operator, \nso it\u2019s like the ===,  it\u2019s going to make sure that the type \nof the variable are the same. So, a string \u20181\u2019 and a number 1 will not be equal. But if the case is 1, then we're going to \nset answer to = \u201calpha\u201d. And then we're going to break. Break means that we're at the end \nof that case statement. And once you break it, it just goes to the end \nof the switch statement  and doesn\u2019t evaluate anything else \nin the switch statement  So, we're also going to have case 2. And one thing I forgot, that we're going to indent that \nso it\u2019s easier to see the different cases. And case 2, the answer is going to equal to \u201cbeta\u201d. And then we also need the break statement. If you don\u2019t have a break statement it will just run \nthrough to the next case statement automatically. So, if the case was 1 and you did not have a break \nhere, first it would set the answer to \u201calpha\u201d. And then it would set the answer to \u201cbeta\u201d. It would just skip over to the next case statement.  The break is here. It\u2019s going to go out of the\nswitch statement completely. So, it would go \u2013 start running the code \nafter this last curly bracket. So, now we're going to do case 3. We\u2019ll just do some copying and pasting here. And we're going to have 4 cases \nso I\u2019ll just do the rest of the pasting here. So, we\u2019ll have 3 and 4. \u201calpha\u201d \u201cbeta\u201d and then we have \n\u201cgamma\u201d and \u201cdelta\u201d. And we know that the switch statement is over \nbecause we have this final curly bracket. And then we're just going to return answer. So, let\u2019s do some tests. To really test this, we're going to have to add a \nconsole.log here to log what it\u2019s going to be. And I\u2019ll run this. \u201cAlpha\u201d good. Now 2 should be \u201cbeta\u201d. 3 should be \u201cgamma\u201d. Good. And we'll just assume 4 is correct so we're done. [Default Option in Switch Statements] Now we'll talk to you about the default option \nin a switch statement. The default option is kind of like else \nin an if else statement. So, here\u2019s a switch statement that\u2019s very similar \nto the one we already saw. And it\u2019s inside this function \nwhere we pass in a value into the function. And we're going to check if the value equals a. If it equals a the answer is going \nto be sent to \u201capple\u201d. B, answer set to \u201cbirds\u201d.\nC \"cat\u201d. So, in this example we can see \nthat we passed in here  \u2013 we passed in the a and it returned \u201capple\u201d \nbecause that was one of the options. But what if we pass in something else? If I pass in the number 2 here it\u2019s going to return \nan empty string. That\u2019s because the answer is set to an empty string \nand we never override the answer here  so it just returns the empty string. What if we want to return something \nanytime a, b, or c is not passed through. So, for anything else that\u2019s passed into the function, \nwe're going to do default. This is like the else statement. So, the default, we're going to do answer = \u201cstuff\u201d. Again, we're going to have the break. But now, whenever we pass in something \nthat\u2019s not a, b, or c, it\u2019s going to return \u201cstuff\u201d. So, we can pass in 5. It\u2019s going to return \u201cstuff\u201d. But if I go back to passing in c, one of the things \nwe have a case for, it\u2019ll return \u201ccat\u201d. And that\u2019s the switch statement. [Multiple Identical Options in Switch Statements] Sometimes you want a switch statement \nwhere multiple inputs give the same output. Well, that\u2019s easy enough by omitting \nthe break statement. Let me show you how that works. So, let\u2019s get a switch statement here. And we're going to have val, \nthat\u2019s what\u2019s passed into the function. And then this case we want the case \nof 1, 2, and 3 all to return the answer of low. So, I can do it like this, case 1 \u2013 \nand I can go straight into case 2. And then I can go straight into case 3. And since I don\u2019t have any break statement \nbetween these cases,  it will just keep going to the next one automatically. And now, I\u2019m going to say that \nthe answer is going to be set to equal \u201cLow\u201d. And here is where I put the break statement. Okay, now we're going to do the same thing \nwith cases 4 through 6. And actually, I\u2019m just going to do \nsome copying and pasting. I\u2019m going to copy all this. And now we're going to paste. That\u2019s 4, 5, 6. We're going to do the same thing with 7, 8, 9. So, I\u2019m going to do copy and paste again. And then I\u2019m just going to update the code. So, this is going to be 4, 5, 6. And we'll have 7, 8, 9. And we're going to have \u201cMid\u201d and \u201cHigh\u201d. So, if the case is 1, 2, or 3 \u2013 like for instance, if it\u2019s 1, \nit\u2019s going to pass through 2 and 3 to get low. And then it\u2019s going to break about it. If it\u2019s 4, 5, or 6, it\u2019s going to pass through to get to \n\u201cMid\u201d and then it\u2019s going to break out 7, 8, and 9. It\u2019s going to pass through to the \u201cHigh\u201d and break out. So, let\u2019s test this out and see. Since we're passing in the number 1 here \nit\u2019s going to be \u201cLow\u201d. But if we pass in 5, we should get \u201cMid.\u201d And if it\u2019s 7, 8, or 9, we should get \u201cHigh\u201d. [Replacing If Else Chains with Switch] Sometimes a switch statement can be easier \nto write and easier to understand  than a chain of if else statements. So, we're going to change this chain \nof else if statements to become a switch statement. So, let\u2019s do that right now. So, we're going to start with the switch keyword  and we're going to be evaluating \nthe value with open curly bracket,  and we'll have to make sure to have \nan end curly bracket at the end. So, for a case \u201cbob\u201d we're going to set \nthe answer to \u201cMarley\u201d. And then we need to have a break in here. For case 42 we're going to set \nthe answer to \u201cThe Answer\u201d. For case 1 we\u2019ll set the answer to \n\u201cThere is no \n1\u201d. We need a break up here. For case 99 the answer is \n\u201cMissed me by this much!\u201d. And then we need a break. Now we have for case 7 \u2013 7, 8, 9, and break. And now we just changed that chain \nof else if statements into a switch statement. [Returning Boolean Values from Functions] Here\u2019s a little trick when you want a function \nto return a Boolean, a true or false value. You can see in this function, \nwe're checking if a is less than b. And if so, we return true, else we return false. You may remember from before the all comparison \noperators return a Boolean true or false value. So, instead of using this if statement here \nwe can just \u2013  we can actually delete all of this \nand just return the result of this, return \u2013  we\u2019re just returning the result of a is less than b. So, this is going to be true or false. And we can just skip that whole if statement logic \nand just return this. So, if we console.log this out, console.log, \nwe should be able to see if 10 is less than 15. It is less than 15. It\u2019s true. But if we put a 20 here then it\u2019s false. [Returning Early Pattern from Functions] We've already seen a few examples of this. But you can return early from a function \nwith the return statement. So, if you see this function right here, \nwe return at the very end of the function,  so it leaves the function and returns this value \nfrom the function. But you can leave the function any time \nwith a return statement. So, we're going to modify this function \nso that if a or b are less than 0  the function will immediately exit \nwith the value of \u201cundefined\u201d. So, let\u2019s do that. We're going to set an if statement. If a is less than 0, or \u2013 that\u2019s two pipes. B is less than 0 then we're going to return undefined. So, we can do a test here, console.log. 8. But what if this is a negative number? It\u2019s going to return undefined. Scrimba has a little quirk here where it just shows null. But in a browser it will show undefined. [Counting Cards] We are going to create a blackjack \ncard counting function. So, how card counting works, at least \nhow this function is going to work,  is that when you see a low card, \nthe count goes up. And when you see a high card, \nthe count goes down. And if it\u2019s a middle value card, \nthe count stays the same. And then when the count is positive, \nthe player should bet high. And when the count is a zero or negative, \nthe player should bet low. So, we are going to use a switch statement \nto figure out what card has been passed in  and what to do about it. You can see that the function looks like this \u2013 \ncc and we pass in card. And depending on what the card is, \nit\u2019s going to increase this global count variable  or it\u2019s going to decrease it, \nor it\u2019s going to stay the same. And then we are going to return two things. We're not going to return \u201cChange Me\u201d. We're going to return the current count value \nand whether the player should hold or bet. So, every time you call the cc function it\u2019s going to \nchange this count value and return the total count. So, let\u2019s see how this is going to work. We are going to use the switch statement, like I said. And we're going to check the card value \nthat was passed in. So, if the case is 2, 3, 4, 5, 6, we are going \nto increment the count variable. So, we're going to do it like this \u2013 case 2. I\u2019m going to do some copying and pasting. If the case is 2, 3, 4, 5, 6, we'll just have \nto change these values. 3, 4, 5, 6. Now, there are many ways to write any program. This could be done with if statements \nand else statements. It could be even done with other ways \nthat we haven\u2019t even talked about yet. As long as the program works, in this case, \nthat\u2019s all that matters. So, if you find a different way to write this program, \nthat\u2019s great. So, if the case is 2, 3, 4, 5, or 6, \nwe are going to take the count value. And if we just do ++, it increments it by 1. And then we're going to break. Now, if the case is 7, 8, 9 \u2013 \nso let\u2019s paste in three of these. We\u2019ll do 7, 8, 9. Actually, we're going to do nothing. The count is not going to change at all. So, we don\u2019t even need case 7, 8, or 9. So, instead of doing 7, 8, 9, we just need to check \nin the case that something is actually going to happen. So, we are going to decrement the count variable \nif we have 10, Jack, Queen, King, or Ace. So, that\u2019s what we're going to change this to. 10 \"Jack\u201d. \u201cQueen\u201d. \u201cKing\u201d. or \u201cAce\u201d. In this case, we're going to decrement the count. So, we're going to do count --. So, that\u2019s the same as count = count -1. And then we will break. Now we've taken care of the count \nand updating the count,  now we have to take care of \nwhat we're going to return. We are going to return the count. And we're also going to return \nwhether we are going to hold or bet. So, we're going to actually return a variable. But first there\u2019s going to be a space. There\u2019s a space between the number \nand then we're going to return the hold variable. Now, this is a variable we haven\u2019t created yet. Normally, this would be the perfect time \nto use the turn area operator,  but we haven\u2019t learn that yet and we're not going to \nlearn that for a few more lessons  so I won\u2019t use that now. We are going to set what that hold bet value is. First, we\u2019ll create the holdbet variable. Variable holdbet. And we\u2019ll set it to \u2018Hold\u2019. However, if (count) is more than 0, \nthen we can set holdbet to equal \u2018Bet\u2019. So, now this should work. Let\u2019s test it out and see \nif we\u2019ve made any mistakes yet. holtbet is not defined. We have it right here. Oh, we spelled that wrong. So, instead of holtbet that should be holdbet. Okay. In this case, we're going to bet \nbecause we had a bunch of positive numbers  and then negative numbers. But if we change this to \u2018K\u2019 \nand we change this to 10, let\u2019s see what happens. Now we're going to hold. Okay, it worked. [Build Javascript Objects] Objects! \nObjects are similar to arrays  except that instead of using indexes to access data, \nyou use properties. So, here\u2019s an object called ourDog. Objects are going to be defined with these \ncurly braces at the beginning and the end. And these are the properties. Now, the properties are everything before the colons. So, we have \u201cname\u201d that\u2019s a property. \u201clegs\u201d is a property. And then the values are the things \nafter the colons here. So, the name is \u201cCamper\u201d. The legs, 4. Tails, there\u2019s only one tail on this dog. And \u201cfriends\u201d are \u201ceverything\u201d. Now you can see that the properties can be strings. They can be numbers. They can be arrays. They can be any datatype in Javascript. So, now we are going to create our own dog. So, this is going to have a \u201cname\u201d. Personally, I like the name \u201cQuincy\u201d. So, we'll use that for our dog\u2019s name. Also, we're going to have \u201clegs\u201d. Unfortunately, our dog has had an accident. He only has 3 legs. But to make up for only having three legs, \nhe does have 2 tails. And for \u201cfriends\u201d, another unfortunate thing, \nit\u2019s an empty array. He has no friends. Okay. We\u2019ve now created our own object. [Accessing Object Properties with Dot Notation] There are two main ways to access a property \non an object. The first I will talk about is dot notation. So, we have this testObj. And we have \u201chat\u201d \u201cshirt\u201d and \u201cshoes\u201d. And we want to find out the value of these properties. So, right here the hatvalue \nwe're going to set to testObj. Now here\u2019s where we use the dot notation. We just put a dot or a period \nand then I put the name of the property, .hat. And then for the shirt value, I will do .shirt. So, see this word right here is just a word here. So, the value of hatValue, testObject.hat \nis now going to be \u201cballcap\u201d. And the value of the shirtValue is going to be \u201cjersey\u201d [Accessing Object Properties with Bracket Notation] Besides using dot notation you can also use bracket \nnotation to access a property in an object. You can use bracket notation anytime \nbut it is required if the name has a space in it. You can see in this object we have three properties. And each of them have a space. So, to get the value of these properties \nwe're going to have to these bracket notation. So, the entreeValue we're going to do testObj. That\u2019s the name of the object. And then we're going to put brackets \nkind of like an array index. So, you need the opening and closing brackets. And inside we will put the name of the property. So, I\u2019ll do \u201can entree\u201d. And then we can do it again down here \nfor the drink value. I\u2019ll use a single quote this time instead of a double \nquote to show that each of those will work. \u2018the drink\u2019. And then we need the closing brackets here. So now, entreeValue is set to equal hamburger. And drinkValue is set to equal \u201cwater\u201d. [Accessing Object Properties with Variables] Bracket notation can also be used to look up \nobject properties using variables. So, here we have this testObj. We have these different numbers associated \nwith these names here. And we are going to set this variable \nto be one of the numbers. So, I\u2019ll set this to be 16. So, now we can \u2013 in this testObj, 16 is \u201cMontana\u201d. And we can look that up using the variable name \ninstead of the number. So, instead of putting 16, I\u2019m going \nto put [playerNumber] in here. And now player is set to the word, \nthe string \"Montana\u201d. And we use these variable to look up \nthe object property. [Updating Object Properties] We can use dot notation to update object properties. Here you can see an object called ourDog. It has a name, legs, tails, friends. And the name is \u201cCamper\u201d. However, here we used dot notation ourDog.name. And use the assignment operator, the equals sign, \nto set the name to \u201cHappy Camper\u201d. So, if we do console.log on ourDog.name  it would no longer be \u201cCamper\u201d \nit would be \u201cHappy Camper\u201d. Well, we have another dog here \nwith the name of \u201cCoder\u201d. But we want to change \nthe name to \u201cHappy Coder\u201d. So, that\u2019s what I\u2019ll do right here. So, myDog.name = \u201cHappy Coder\u201d. So, just like above, we use dot notation \nto set the object property to a new value. [Add New Properties to an Object] You can add new properties to an object \nusing dot notation or bracket notation. So, here\u2019s an example right here. We have this object, ourDog. And there\u2019s four properties here. But down here we're adding a new property. ourDog.bark = \u201cbow-wow\u201d. So, it had four properties but now it has \n5 properties as the property bark as well. Now down here we'll add a property \nto the myDog object. So, we can do myDog. And then here I\u2019m going to use bracket notation \ninstead of dot notation. \u2018bark\u2019. I\u2019m going to set that to equal \u201cwoof\u201d. And because he\u2019s yelling it \nwe\u2019ll have an exclamation point. And that\u2019s how you add properties to objects. [Delete Properties From an Object] It\u2019s simple to delete a property from an object. Our ourDog object has all these properties. And with the delete keyword, delete ourDog.bark. So, now this property here, the bark, has been deleted \nand is no longer in the object after we\u2019ve deleted it. So, we can do the same thing down here. And this time we will delete the tails property \nmyDog.tails. So, now the myDog object no longer \nhas a tails property. [Using Objects for Lookups] Objects can be thought of as a key value storage \nlike a dictionary. You can use an object too lookup values. So, in this case we have a switch statement \nthat returns certain values. So, when you pass in \u201calpha\u201d to the function \nit returns \u201cAdams\u201d. If you pass in \u201cbravo\u201d it returns \u201cBoston\u201d. We can replace this switch statement with an object  and use the object for lookups \ninstead of the switch statement. Let me show you how that\u2019s down. I\u2019m going to create var lookup. This is going to be an object here. And the object is going to have \na bunch of key value pairs. So, we have alpha \nand that\u2019s going to be \u201cAdams\u201d. And then we have \u201cbravo\u201d. And the value for \u201cbravo\u201d \nis going to be \u201cBoston\u201d. And that\u2019s it. So, we can now delete this whole switch statement \nand now we can say result = lookup. And bracket notation we put the value \nthat was passed in. And then I forgot one thing which was the equals sign \nhere because lookup equals this object. And let\u2019s do a test. So, let me put console.log \nso we can actually see what happens here. So, if we do \u201ccharlie\u201d we're going to get \u201cChicago\u201d. If we do \u201cfoxtrot\u201d the result will be \u201cfrank\u201d. So, it works. [Testing Objects for Properties] You can check if an object has a property \nwith the hasown property method. Let me show you how to use this method \nand finish making this function  where we check if an object has a specific property. If it doesn\u2019t have the property \nwe\u2019ll return \u201cNot found\u201d. So, let me show you how that\u2019s going to work. We\u2019ll do myObj \u2013 that\u2019s the object up above.\n.hasOwnProperty. And then we pass in the property \nwe're going to check which is checkProp. This is either going to come back as true or false \nif it has the property. So, let\u2019s make this into an if statement. if (myObj.hasOwnProperty(checkProp)). But if that\u2019s true, we're going to return myObj \nand then use bracket notation [checkProp]. So, we're going to return the value of that property. Else we're going to return \u201cNot Found\u201d. So, let\u2019s take off this other return statement. And I\u2019ll do a test. So, when we pass in \u201cgift\u201d here, we returned \u201cpony\u201d. But let\u2019s say we pass in \u201chello.\u201d Load that \"Not Found\u201d. Okay, it works. [Manipulating Complex Objects] A Javascript object is a way to store flexible data. So, you can store strings, numbers, and arrays. And even other objects. So, in this example we have an array called myMusic. We can see it\u2019s an array because \nwe have the open bracket and closed bracket. But inside the array are objects. So, this is one of the objects. And inside the objects are all these key value pairs \nwith the strings and the numbers and so on. So, I\u2019m going to add another object. So, since this is an array, after each element \nin an array, you have to have a comma. So, I\u2019m going to add a comma here. And then I\u2019m going to add my next record \nright below this comment here. And we're going to have just like above, \nwe're going to have an \u201cartist\u201d. The artist is going to be \u201cBeau Carnes\u201d. And then we have a \u201ctitle\u201d. The title will be \u201cCereal Man\u201d. \u201crelease_year\u201d will be \u201c2003\u201d. And for \u201cformats\u201d this is going to be an array, \njust like above. So, we can have any format. I\u2019m going to put \u201cYouTube video\u201d. And now we've created a second object \nin our myMusic array. And each object holds data and a property \nwhich is the key value format. This is very similar to JSON \nwhich we will talk more about later. [Accessing Nested Objects] Here we have an object with \nother objects nested inside that. So, in order to access sub-properties of an object \nyou can chain together the dot or bracket notation. So, I\u2019m trying to get the gloveBoxContents. So, I\u2019m going to take away this undefined here \nand I\u2019ll do a myStorage.car.inside. And then now the next thing \"car\u201d \u201cinside\u201d \nand the last thing is \u201cglove box\u201d. Because there\u2019s a space here \nwe have to use bracket notation. So, I\u2019m going to use bracket notation on the end here \nand say \u201cglove box\u201d. And now if we run this \u2013 \nsee, we're going to console.log. So, let\u2019s see if we get the contents here. Yeah \"maps\u201d. It worked. [Accessing Nested Arrays] Array bracket notation can be changed \nto access nested arrays. You can see we have this array here. And inside this array are two objects. The first element in the array is this object. The second element of the array is this object. And then inside the object we have a key value pair. The key is list and the value is another array here. So, we can combine dot notation \nand bracket notation to access the second tree. That\u2019s what we're trying to do here. So, let\u2019s do that. First we need to do myPlants. And the trees are the second element \nin the myPlants array, which is index [1]. Now we need to get the list. So, the list of trees here, \nso I\u2019m going to do .list. And since .list is an array, I can use the \nbracket notation to get the second list element  which again is array index [1]. So, if we run this it\u2019s going to console.log \nand we see \u201cpine\u201d. That\u2019s the second tree here. [Record Collection] This is a coding challenge we're going to do. We're given this object here \nwhich is a record collection. Each record has an ID and then also has different \npieces of information about the record. They don\u2019t all have the same information. But see, we have \u201calbum\u201d \u201cartist\u201d \u201ctracks\u201d \n\"album\u201d \u201cartist\u201d \u201ctracks\u201d. This just say \u201cartist\u201d \u201ctracks\u201d \nand this just has album here. And we are supposed to create \nthis updateRecords function  where we can pass in the ID, the property, \nand the value. And it\u2019s going to update our record collection \nwith the property and the value. So, for instance, if we pass in the ID \"2468\u201d \nand we put the property \u201cartist\u201d. And if we set a different value, like \u201cQuincy\u201d \nor something like that,  then we should update this whole object. So now it says \u201cQuincy\u201d instead of Prince. And we should return the full collection. So, it\u2019s going to update the collection \nand then return the collection. If we have an empty string for the value, \nit should just completely delete that property. Also, if we have the property of tracks \nand then we have a value,  instead of updating the whole tracks here \nwith what we put in,  it\u2019s just going to add the track \nto the end of this array. So, if you look really here, the comment says \n\"Keep a copy of the collection for tests\u201d. This JSON.parse and JSON.stringify  and then collection, this is just a fancy way \nin Javascript to make a copy of the object. Remember, in our function we are going \nto be changing the collection object. But we want to have a copy of the original object \nbefore anything was changed. So, that\u2019s what that\u2019s for. So, let\u2019s go ahead and do that. So, we're just updating this function here. This update records function. Okay, so let\u2019s get to this. So we'll do if (value)=== blank. Because the first condition we are going to test for \nis if we need to delete the property. Remember, if the value is set to blank \nwe delete that property. So, if the value is blank, \nwe are going to delete collection. And then we have to use bracket notation [ID] \nand then [prop]. The collection[ID][prop], that\u2019s the collection here. If we pass in the ID 1248, it\u2019ll go to there. The property, if we pass in album for the property \nit would go to here. And then it would just delete that whole thing \nif our value is an empty string. Okay, the next condition we have to look for \nis if the property is \u201ctracks\u201d. Because for most properties we're just going to \noverride that property  with the value passed into the function. But if the property is tracks, we're going to push \nonto the end of the array. So, let\u2019s do an else if. Else if (prop) === \u201ctracks\u201d), then we just have to push \nonto the end of the array. So, there\u2019s also another condition here \nwhich is if the tracks property is empty. If the tracks property is empty, we need to create it. Here\u2019s a fancy way to do that. Collection[ID][prop] So if prop = tracks,  we are going to set the tracks \u2013 \nbecause remember prop is going to equal tracks. We're going to set the tracks to equal. It\u2019s going to either equal itself if it exists. Or if it doesn\u2019t exist, we're going to create it. I\u2019ll show you how. Collection[ID][prop]. It\u2019s going to equal itself. Or \u2013 if the or operator is going to equal \nan empty array. So, if this already exists \nwe're going to set it to equal itself. But if itself doesn\u2019t exist, \nwe'll just set it to equal an empty array. So, that\u2019s just a way to create that property \nif it doesn\u2019t already exist. So, now that we know it exists we can just push \nthe value to the end of the array. Collection[ID][prop]. And we'll just do the .push \nand then put in the parenthesis, the value. So we're able to push the value that was passed in \nto the function onto the end of the array. Okay, there\u2019s only one last condition \nwhich is the kind of the default condition. Else. So, if the value isn\u2019t blank \nand the property isn\u2019t tracks,  then we just push the value onto the property. Then we just set the property to equal the value, \njust like this. collection[ID][prop]=value. Okay. Let\u2019s test this out. So, we already have this example down here, \nbut to see if it actually worked,  we're going to do a console.log \nso we can see the output there. And if I run that \u2013 oh, let me open up the console \nso we can really see it. So, let\u2019s see what we changed. Go to 5439 and we set the artist \nwhich didn\u2019t previously exist to \u201cABBA\u201d. So, let\u2019s look down here. In the console, 5439 and the artist is \u201cABBA\u201d. Let\u2019s see what happens when we add a track. So, we'll do one more example here. I\u2019ll just put it right above here, updateRecords. And I\u2019m going to pass in something. I\u2019ll pass in \u2013 let\u2019s see, the ID 2468. And we'll pass in the key which is going to be \u201ctracks\u201d. And then for the value, we'll put \u201ctest\u201d. So, let\u2019s see what happens here. If we run that, it\u2019s going to update the record here. And then it\u2019s going to update the record again, \nbut we don\u2019t care about that. We mainly care that it\u2019s going to console.log \nwhat the final value is. So, if we look at 2468 here. 2468, let\u2019s see the tracks. We got \u201c1999\u201d \u201cLittle Red Corvette\u201d and \u201ctest\u201d, \nso it\u2019s working. Great. [Iterate with While Loops] Loops allow you to run the same code multiple times. I\u2019m going to talk to you about a while loop \nthat runs while a specified condition is true  and stops once it\u2019s no longer true. So, we are going to push the digit 0 through 4 \nonto this array. Here\u2019s how it\u2019s going to work. while is the while loop. while i is less than 5. And we're going to do something while that\u2019s true. First, we have to set what i starts off at. So, var i = 0. So, while i is less than 5, \nwe'll do myArray.push(i). Just push it onto the array. And to make sure this loop eventually ends, \nI\u2019ll have to do i++ which increments i. So, then I will test this out by doing console.log. And I\u2019m going to console.log the myArray. So, let\u2019s see if this works. I\u2019ll run this and check the console. [0, 1, 2, 3, 4]. The while loop worked. Every time it went through this five different times \nand pushed 0, 1, 2, 3 and 4 onto the loop. [Iterate with For Loops] A for loop is the most common type of loop \nin Javascript. So here is an example of a for loop. You start with the keyword for. And then we have these parentheses with three \ndifferent items and they\u2019re separated by semicolons. The first thing is the initialization. Then we have the condition. Then we have the final expression. So, the initialization happens \nbefore any of the code inside the loop runs. So, we will start by initializing i to equal 0. So, this is what most for loops start with,  is you have a variable that you\u2019re going to initialize \nfor the for loop. Then the next thing is the condition. So, once this evaluates to false we break out \nof the loop. So, while i is less than 5 we'll continue to \nrun through the loop over and over  until this is false and we break out of the loop. The final thing is what we do at the end \nof each iteration. At the end of each iteration, we will increment i by 1. In this example, we are filling our array \nwith the numbers 0 through 4. I\u2019m going to do another example where we fill \nan array with the numbers 1 through 5. So, we'll start with 4. Now, we're going to initialize i to equal 1. We're starting with 1 instead of 0 this time. And we're going to do i is less than 6. So while i is less than 6 or until i is more than 6, \nwe are going to run all the code in this loop. And at the end of each iteration, \nwe are going to increment i. Now I can just do what we have before. myArray.push(i). So, the final thing we will do is test this. I will do console.log and put myArray inside here. And I\u2019ll just load this and see what we see \nin the console. [1, 2, 3, 4, 5]. It worked. We iterated five different times and each time \nwe pushed a new digit onto the array. And at the end of each iteration we incremented i \nso it pushed a larger number onto the array. [Iterate Odd Numbers with a For Loop] Loops don\u2019t just have to increment one at a time. Look at this for loop here. We have our initialization where we initialize i to 0. And then we are going to run the loop \nuntil i is less than 10. And finally, our increment, instead of \nincrementing i by 1, we're incrementing i by 2. So, now this is going to push all the even numbers \nonto the array. We have console.log, so let\u2019s log it out \nand see what it looks like. [0, 2, 4, 6, 8]. I\u2019m going to write another loop right now \nthat creates an array of odd numbers. So, let\u2019s do that. for (var) i = 1. We\u2019ll start at 1. While i is less than 10. I can use 10 again. I\u2019m going to do i +=2. So, we're still going to count by 2s,  but since we're starting at 1 instead of 0 \nthis should give us the odd numbers. So, let\u2019s see what\u2019s going to be inside our loop. myArray.push and I\u2019ll just put i there. So, let\u2019s log this out and see if we did it right. console.log(myarray). And I\u2019ll run that. [1, 3, 5, 7, 9]. It worked. [Count Backwards with a For Loop] A for loop can also be used to count backwards. So, if we see this for loop here, \nwe\u2019re initializing i to 10. We're starting at 10 and we're going back to 0. So, we're going to iterate through this loop \nwhile i is more than 0. We\u2019re going to keep iterating. And at the end of each iteration we're going to \ndecrement i instead of increment it. We're going to go down by 2. i -= 2 means i=i-2. So, we're going to continue pushing the lower and \nlower numbers onto the array until i is less than 0. So, let\u2019s log this out and see what ourArray becomes. You can see [10, 8, 6, 4, 2]. Well, I\u2019m going to write another where we\u2019re going to \npush the odd numbers from 9 through 1 to myArray. So, another for loop. And I\u2019m going to do var i = 9 \nbecause we want to start at 9. Now we\u2019ll still do i is more than 0. So while i is more than 0 we're going to \nkeep going through this array. And we'll do i \u2013 and everything else is really the same. -= 2. And this is going to get all the odd numbers \nonto the array. So, we just have to do myArray.push \nand then push on the i there. Now we'll just console.log \nso we can see what it ended up as. myArray. And I\u2019ll run the code. [9, 7, 5, 3, 1] We did it. [Iterate Through an Array with a For Loop] It is common in Javascript to iterate \nthrough the contents of an array. So, look at this example. We have this array here. Before, we were always adding items to the array. But this time the array already exists. Right here, ourArr = [9, 10, 11, 12]. So, we are going to start at 0. But now instead of going to a specific number of \niterations, we are going to the OurArr.length. So, the length is 4 here. But if we added elements to this array,  that means this loop would just go even longer \nuntil we went through every element of that array. And then at the end we're going to increment i by one \nat the end of each iteration. So, look at what we're doing inside the array. We're going doing ourTotal that starts off \nat 0 up here. And we\u2019re doing +=. That means we're going to do ourTotal = ourTotal \nplus something else. So, we're going to keep adding to the total \nwhatever is in the array at that index. So, ourArr[i]. So, it starts at 0. And then it goes 1, 2, 3 until it gets to 4  which is the length of the array \nand it doesn\u2019t even run the iteration at 4. And there is no index[4] on the array. Remember, it\u2019s 0, 1, 2, 3. So this is just going to add up all those numbers. If we run this we can see it adds up to 42. I\u2019m going to write another for loop down here that\u2019s \ngoing to add up all the numbers in this array here. So, we'll do for (var i = 0). And then we\u2019ll do i is less than myArr.length. And i++. So, just like before. For each element in myArr we're going to do a total \n+= myArr index [i]. So, we have to initialize the total variable \nright up here. So, we'll do a var total = 0. And then at the end we\u2019ll just console.log that out \nto see what the total is. So, if I just run this we can see that the total \nthis time is 20. [Nesting For Loops] If you have a multidimensional or nested array,  you can use nested for loops to access \nall the array elements. So, for instance, we have this multiple all function. It\u2019s defined up here, but we're calling it here \nand we're passing in this multidimensional array. Which is basically an array with the arrays \ninside the array. So, inside the first array there are three elements. One. Two. Three. And you can see each of those elements are in array \nwith their own set of elements. So, we are going to use nested for loops \nwithin this multiply all function  to multiply every number in these nested arrays here. So, let\u2019s get started. We're going to start with a for loop. And it\u2019s going to look just like the other for loops \nthat we started. i = 0. We\u2019re going to initialize i to 0. And then we're going to say \nwhile i is less than arr.length. And then we're just going to \nincrement i at the end of each iteration. Now, arr.length, that\u2019s going to start off \nas 3 because we're passing in this array. And the first level of the array, there\u2019s just\none, two, three elements. So, that\u2019s going to be 3. But now, we're going to go inside this for loop \nand create another for loop. So, we're going to do var j = 0. Normally, it\u2019s standard practice to call \nthe variable that we're incrementing i,  but we already have an i within this scope. So, we need to create another name and it\u2019s pretty \nstandard to call the next variable j because j is after i. So, now we're going to do a j. while j is less than \u2013 \nnow this is where it gets a little tricky. We're going to do while a \nis less than arr index[i].length. Also, we're going to increment j here. So, this is going to change. So, the first iteration of this outer for loop, \nwe're looking at the length of this array. Then we're looking at the length of this array. Then we're looking at the length of this array. The index is going to be different every time  so we're going to be going to each different array \ninside the nested array. So, at this point, we just have to multiply \nall the numbers together. So, we already have the product \nthat we've defined above. So, we're going to do product *= \nwhich is just going to multiply everything together. And we're going to do arr[i][j]. So, the i references the outer array  and the j references the inner array \nwithin what we're passing in. And now we're done. So, let\u2019s \u2013 we have the console.log here \nso let\u2019s run this and see what happens. And 5040. [Iterate with Do\u2026While Loops] Next I\u2019m going to talk about do while loops. Now we already talked about while loops \nand I\u2019m going to review this while loop  and then I will tell you how a do while loop \nis different than a while loop. So, this while loop first checks the condition \nbefore it runs any code within the loop. A do while loop will always run at least one time \nand then it will check the condition. So, here we have this empty array. We have i = 10. So, while i is less than 5, well, i is not less than 5 \nso it\u2019 not going to do anything. Let\u2019s see what happens. So, we see it logged out 10 \nand then an empty array because i started as 10  and myArray started as this empty array. So, you were logging the i in myArray. With a do while loop, it\u2019s different. So, what I\u2019m going to do is cut this line up here \nand put it at the end. And then at the beginning \nI\u2019m going to put the keyword do. In a do while loop, this is always run at least once \nbefore it checks the condition. So, first it\u2019s going to do these things \nand then it\u2019s going to check the condition. In this case, it\u2019s going to find out the condition is false \nand it\u2019s going to break out of the loop. Let\u2019s see what happens here. See, now i is 11 and the array has the 10 added to it. [Profile Lookup] This is a coding challenge. We have this array of objects in our contacts list. And you\u2019ll see each object is one of our contacts. What the first name, a last name, a number, and likes. So, these are key value pairs here. So, what we want to do is create this lookUpProfile \nfunction where we pass in a name. This is a first name. And the property. and it\u2019s going to return the value of that property. For instance, if we pass in the name \u201cKristian\u201d here  and we pass in the property of \u201cnumber\u201d \nit should return \u201cunknown\u201d. If we pass in the first name of \u201cSherlock\u201d up here \nand we return the property  and we pass in the property of \u201clikes\u201d it should return \nthe array \u201cIntriguing Cases\u201d and \u201cViolin\u201d. If the name that\u2019s passed in does not correspond \nto any contacts,  then our function should return \u201cNo such contact\u201d. And if there\u2019s no property, it should return \n\u201cNo such property\u201d. So, let\u2019s go to this function here and start creating it. So, the first thing we're going to have to do is iterate \nthrough each element in the contacts list. So, let\u2019s make a for loop. So, for (var i = 0) while i is less than contacts.length. And at the end of each iteration we'll do i++ \nto increment that. So, for each of these contacts the first thing we're \ngoing to check is if the name is a name in this list. So, if(contacts[i].firstName === The name that was passed in. So, we're checking each item to see \nif it was the name that was passed in. And if so, we're going to do something. Now, if not, we're going to do something else, \nso let\u2019s do that now. Remember, if the name that was passed in \nis not in the array,  we're going to return \u201cNo such contact\u201d. If it is in the array we're going to go something else. If the name is in the contacts list we're going to return \nthe value of the property that was passed in. So, return contacts[i][prop]. So, this will return the value of that property \nthat was passed in. However, there\u2019s another case which is if the property \ndoes not exist we return \u201cNo such property\u201d. So, a fancy way in Javascript of \nsaying use this value if it exists,  but otherwise use a different value \nis to use the or operator. So, we'll say return contacts[i][prop] or if it doesn\u2019t \nexist, we're going to return \u201cNo such property\u201d. And just so you know, there would be a way to do this \nwithout using this or operator  as long as that your code passes the requirements, \nthat\u2019s all that\u2019s important. There\u2019s many ways of doing this. But let\u2019s check it. So, right now we have our lookUpProfile. We're passing in \u201cAkira\u201d and we're trying \nto find the \u201clikes\u201d. And we're console.logging the data. And \u201cPizza\u201d \"Coding\u201d \"Brownie Points\u201d. So, what if we passed in something else? If we passed in \u201cShirlock\u201d. Pass in \u201clastName\u201d. \u201cNo such contact.\u201d Well, that\u2019s working \nbecause I spelled \u201cSherlock\u201d wrong. This is E. So, this is a good way to test that. \u201cHolmes\u201d. And the last thing we'll check is if we pass in \na property that does not exist. I\u2019ll just say \u201cHello\u201d. And \u201cNo such property\u201d. So, our function works. [Generate Random Fractions] There is a simple way to create \na random decimal number in Javascript. It\u2019s with the math.random function. So, we have this function here \nwhich just says randomFraction. And it\u2019s returning 0 currently. But we're going to use the math.random function. And you well see that when I run this \nwe have 0,2003813741 and so on. So, it\u2019s always going to be a number \nbetween 0 and it could be 0. Between 0 and 1, but it could not be 1. [Generate Random Whole Numbers] Often you want a random whole number \ninstead of a random decimal number. That can be accomplished with Math.floor. We have Math.floor here. This rounds down to the nearest whole number. So, we pass in (Math.random() * 20). And then we round down \nto the nearest whole number. This is going to create a \nrandom whole number between 0 and 19. Remember Math.random can never be 1. It can be 0, but it can ever be quite 1. So, when we multiply it by 20 we\u2019re going to get a \nnumber between 0 and 20, but not including 20. And then we round down, \nwhich will end up being 0 to 19. So, let me show you another example  where we're going to get a random whole number \nbetween 0 and 9. It\u2019s going to look just like this. So, we're going to modify this function. So, this Math.random we're going to pass \nthat into Math.floor. So, I have to put the parenthesis \nbecause we're passing that in to that function. And it\u2019s Math.random * 10. And that\u2019s going to give us a random number \nbetween 0 and 9. So, if I reload this I can see. Every time I load it, it\u2019s a different random number. [Generate Random Whole Numbers within a Range] You can also generate random \nwhole numbers within a range. So, look at this function here, ourRandomRange. It takes a minimum number and a maximum number \nand then it just runs through this calculation here. So, we have the Math.random and we multiply it \nby the maximum or min number + 1. And then we get the floor which is rounding down. And we add all that to our minimum number. So, this is just a calculation to get a random number \nbetween the min and max. So, as practiced, I\u2019m going to rewrite it down here. So, we have the random range. And instead of ourMin and ourMax, \nwe have myMin and myMax. However, the equation is going to be the same. So, we have Math.floor. You can take a chance to actually just look over the \nequation and see if you can understand how it works. myMax minus myMin. And then we just have to do + 1. And then this whole thing is going to be + myMin. So, we already have this example test set up \ndown here. randomRange between 5 and 15 \nand we're going to log it out here. So, let\u2019s try that. See, every number is between 5 and 15 \nwhenever I run it. [Use the parseInt Function] Another useful function is the parseInt function. It takes a string and returns an integer. A lot of times you want to make sure you\u2019re dealing \nwith integers and not strings  for different calculations and things like that. If the string cannot be converted into an integer \nit returns in NaN for Not a Number. So, let me show you how it works. From this convertToInteger function \nwe are going to return. And we're going to return the string except \nwe're going to convert it into an integer first. So, we'll do parseInt. And then I\u2019ll pass in the string. Now, it was a string because you can see here \nwe're passing in the string of \u201c56\u201d  but it\u2019s going to return it as a number and integer. [Use the parseInt Function with a Radix] The parseInt function can also be used with a radix. The radix specifies the base of the number \nin the string. Such as base 2 or base 7 or base 8. A base 2 would be binary. So, that\u2019s one of the most common ones to use. Now the default is base 10. That\u2019s what we use normally every day. But let me show you how that would work. We're going to convert this number \nwhich is a binary number to an integer. So, we'll do return. And I will do the parseInt. I\u2019ll pass in the string as before, but now we'll have \na second argument after the comma  which is going to be the number 2. So, instead of the default of base 10 \nwe'll be passing it as base 2. So, the computer knows that this is a binary number. [Use the Conditional (Ternary) Operator] I love the ternary operator. It\u2019s like a one line if else expression. Now this is what it looks like. You have your condition just like in an if statement. And then you would have a question mark. After the question mark you have what\u2019s \ngoing to happen if the condition is true. Then you have a colon. Then you have what\u2019s going to happen \nif the condition is false. So, we can replace an if else statement like this \ninto something using the ternary operator. So, here we have if this condition is true, \nwe're going to return true. Else, we're going to return false. Let\u2019s change this. So, now we're going to use the ternary operator. So now it\u2019s just going to say return a === b. That\u2019s the condition. Then we use the question mark. So if it\u2019s true, we're going to return true. And then we have a colon. And after the colon we have what\u2019s going to happen \nif it\u2019s false, which is we're going to return false. Now I\u2019m going to be honest. You would never write a line like this in real life \nbecause you could just write return a === b. And this line is actually going to do \nthe same thing as this line. However, I just want to give you \na simple example of using the ternary operator. [Use Multiple Conditional (Ternary) Operators] One of the great things about conditional \nor ternary operators  is that you can nest them within each other \nwhich gives them even more power. So, we're going to write a function here. The function checkSign. And it\u2019s going to return the string \u201cPositive\u201d  if this number is positive \"Negative\u201d \nif the number is negative, or 0. And we're going to use a nested conditional operator. So, here it is. return. And first we're going to check if num is more than 0. And then we'll use the ternary operator. If so, the first thing after the question mark \nis if it\u2019s true. If it\u2019s true, we're going to return \u201cpositive\u201d. If it\u2019s false, if the number is not more than 0 \nwe'll do something else. Here is where we're going to have \nanother ternary operator. We're going to check if num is less than 0. So, if the number is less than 0, well, if that\u2019s true,  we have to have the question mark \nfor the ternary operator. If that\u2019s true, we're going to return \u201cnegative\u201d. And if it\u2019s false, that\u2019s where the colon comes in, \nwe're going to return \u201czero\u201d. So, let\u2019s do this checkSign. I\u2019m going to do a console.log \nso we can see what this returns here. And we can see this is going to return \u201cpositive\u201d. If we have a negative number here \nit\u2019s going to return \u201cnegative\u201d. Or if we have a 0 it\u2019s going to return \u201czero\u201d. Now you\u2019ll see that after this colon \nwe have an entire ternary operator. So, if this is true we just return \u201cpositive\u201d. If it\u2019s false, then we do everything here  which is another ternary operator \nwhere it checks if this is true. And if that\u2019s true, we return \u201cnegative\u201d. And if it\u2019s false, it would return \u201czero\u201d. [Differences Between the var and let Keywords] For a long time in Javascript if you were going to \ndeclare a variable you had to use the var keyword. But starting with ES6 in 2015 we can now \ndeclare variables with let and const as well. Over the next few lessons I will be talking about \nwhat let and const do that is different than var. But one of the things is that let does not let you \ndeclare a variable twice. So, let\u2019s look at this example. You have var catName = \u201cQuincy\u201d. And then down here, var catName = \u201cBeau\u201d. And if I just run this code you\u2019ll see \nthat nothing is happening. It\u2019s just allowing us to set the catName twice \nand declare it twice with the var keyword. However, if we change this to let. We're going to change all the var to let. And you\u2019ll see that when we load it again, \nyou\u2019ll see an error, Duplicate declaration \u201ccatName\u201d. So, this is good that it\u2019s creating this error  because you usually don\u2019t want to declare a variable \ntwo times in the same scope. So, this allows your program to give you an error \nto tell you that you\u2019ve done something wrong. Now you can still reset it. So if we don\u2019t use the word let here \nwe could just set the catName variable. And now we're not going to get an error. In this case, we're declaring the variable \nhere to be \u201cQuincy\u201d  and we're setting the same variable \nto a new name here. This is one of the few reasons \nthat many people only use let and const  and never use var to declare variables. Another thing in this code you can see is \u201cuse strict\u201d. Now this enables strict mode which catches common \ncoding mistakes and unsafe actions. So, a lot of people will use \u201cuse strict\u201d \nat the top of a full Javascript file  or maybe just in a function to catch coding mistakes. Such as if you create a variable and don\u2019t declare it \nwith var, let, or const. [Compare Scopes of the var and let Keywords] Another major difference \nbetween the var and let keywords  is that when you declare a variable with var,  it is declared globally or locally \nif declared inside a function. However, let \u2013 the scope of let is limited to the block \nstatement or expression that it was declared in. So, let\u2019s look at this example here. If you see this code, we have this checkScope function \nand we're calling it down here. And it\u2019s setting i with a var here, the var keyword, \nto \u201cfunction scope\u201d. Then we're setting it to \u201cBlock scope\u201d in here. And you can see it\u2019s console.logging \n\u201cBlock scope i is:  \u201c. And it says \u201cBlock scope\u201d. And when we get down here \"Function scope\u201d \nit\u2019s still \u201cBlock scope\u201d. If we want this to be \u201cfunction scope\u201d down here, \nwe're going to have to use let. So, we would use let here \nand then we would use let here. And if we run the code, now you can see in the \nconsole \"\"Block scope i is:  \u201cblock scope\u201d. \u201cFunction scope i is:  \u201cfunction scope\u201d. So, even though we set i to block scope here \ninside this block. Now, a block is just anything inside \nthese squiggly braces here. So, with an i inside this block to \u201cblock scope\u201d. But then when we get out here, it\u2019s now back to \n\u201cfunction scope\u201d because of this up here. Here\u2019s another thing I want to show you. If this is \u2013 if we comment this line out and we change \nthis to var, what do you think is going to happen? Well, let\u2019s run it and find out. Look, we set the var inside this block here \nto \u201cblock scope\u201d. And it says Block scope is:  \u201cblock scope\u201d. But then when we're outside of the block,  when we're outside of this squiggly braces here, \nwe can still access i here. And it\u2019s set to block scope. But if this was a let and we're declaring it \ninside this block. If we run that now when we get outside the block, \nwe get an error because it\u2019s not defined. So, that\u2019s another reason why people use let \ninstead of var is so that they can make sure the variable is only \ndefined in the area they want it to be defined in. But for now I\u2019ll uncomment this out. [Declare a Read-Only Variable \nwith the const Keyword] Const is another way to declare a variable. It has all the features of let but it\u2019s also read-only. You cannot reassign a const. So, let\u2019s look at this program here. We\u2019re running this printManyTimes. And it\u2019s going to log out this sentence. And the sentence is up here. var sentence is declared. And then we reassign it here. So, first we declare the sentence to be the string \n\u201c is cool!\u201d. Then it\u2019s reassigned to be the string \n\u201c is amazing!\u201d. So, if we run that it should work. It prints freeCodeCamp is amazing! many times. But if we change this to const let\u2019s see what happens. Now I\u2019ll run this and we get an error. \u201csentence\u201d is read-only. If you declare a variable with the const keyword \nyou cannot reassign it afterwards. This can be very helpful to prevent you from accidentally making mistakes later. If you know for sure that you never want to \nreassign a variable,  always use const so you don\u2019t accidentally reassign \nit when you don\u2019t mean to. Another thing is when you\u2019re using const \nit\u2019s very common to use all capital letters. So, like this, SENTENCE like that. And that\u2019s another away to remember that \nit\u2019s a constant. So, if I rename this here, \nI\u2019m also going to have to repeat it here. And while we're at it, we're going to change this to let  because for the most part \nyou should only use const or let,  but there are certain circumstances \nwhere you would use var. And also in some other videos \nin this course I\u2019ll be using var. But in your own code you should mainly use \nconst and let. Let\u2019s reload this to see what happens. And it worked. freeCodeCamp is cool! many times. We can no longer say that freeCodeCamp is awesome, \neven though we know it actually is. [Mutate an Array Declared with const] While you cannot reassign a variable declare with \nconst you can mutate an array. So, look at this example that\u2019s not going to work. First we declare the variable s \nand we assign it to an array. We declare with const. And now we're going to reassign the variable s here. But if we do that we're going to get the error \u201cs\u201d \nis read-only. However, we can update the array \nusing bracket notation. So, I\u2019ll just comment that out. And using bracket notation, I\u2019ll do index [0]. I\u2019ll assign to the 2. Index [1], I\u2019ll assign that to 5. And then index [2] I\u2019ll assign that to 7. And just like that it is going to reassign the array. So, if I just do a console.log here. Console.log and put the array in there, \nwe should see the new array here, [2, 5, 7]. [Prevent Object Mutation] As seen previously, a const declaration alone \ndoesn\u2019t really protect your data from mutation. If you have an object or an array, you can still \nmutate it even if it\u2019s declared with const. There is something called object.freeze \nthat will prevent data mutation. So, let me talk to you about object.freeze. First of all, let\u2019s understand this function here. We're using this function to demonstrate \nobject.freeze. So, it\u2019s going to create this constant, \na math constant with the Pi in it. This is an object. And right now this can still be changed. So, if we look down here, this is a try catch block. We'll talk about try catch blocks in more detail later. But for now, you just have to know that it\u2019s going to \ntry what\u2019s in the first part of the block. And if there\u2019s an error, then it\u2019s going to go into \nthe catch part and it\u2019s going to log it out. So, right now we're going to try to change \nMATH_CONSTANTS.PI to 99. And if you can see right here, we're going \nto return the MATH_CONSTANTS.PI. And down here we are putting it \ninto a variable called PI. So, if we run this you\u2019ll see \nthat we console.log PI and it\u2019s 99. But wait a second, we don\u2019t want PI to change \nbecause we know that PI never changes. That\u2019s why we're going to use object.freeze. So, I\u2019ll put it right here. I\u2019m going to do object.freeze. And in parenthesis I\u2019ll put the object \nwhich is (MATH_CONSTANTS). Now I\u2019ve frozen MATH_CONSTANTS. So when it tries to change MATH_CONSTANTS.PI \nhere it\u2019s not going to work  and it\u2019s going to go into this catch block \nand it\u2019s going to log out the error or the exception. So, let me run that. And you\u2019ll see. So, we had an error. And we can see here that PI stays the same at 3,1004. So whenever you have an object and you don\u2019t want \nany of the items in the object to change,  use object.freeze. [Use Arrow Functions to Write Concise Anonymous Functions] This function here is called an anonymous function. It doesn\u2019t have a name. It is assigned to this variable magic. But there\u2019s no word right before the function keyword \nto assign the name to the function. Whenever you have an anonymous function \nyou can convert it into an arrow function. That makes it a little quicker to write. So, instead of the word function, \nI\u2019m going to take that out completely. And then put an arrow here. So, this is the same thing except \nit\u2019s just a little quicker to write. But we can shorten this even more. If we're just returning one value here \nwe don\u2019t even need the return keyword. And we don\u2019t need the curly braces. So, I can delete all this. And I can delete all this here. And now this is the full function from before, \nbut it\u2019s just really shortened up. And to make this even nicer, \nwe're not going to use var. I\u2019m going to change this to const. [Write Arrow Functions with Parameters] Just like in a normal function, \nyou can pass arguments to arrow functions. So let me show you how to convert this function \ninto an arrow function. So, it\u2019s a normal function now \nand it has two arguments. And then it\u2019s going to concatenate \nthe two arrays passed in. So, first we'll take off the function keyword. We're going to leave these parenthesis \nwith the parameters. Now I\u2019ll put the arrow. Since all we're doing is returning this,  we don\u2019t even need the return keyword \nand we don\u2019t need the curly braces. So, I\u2019ll take that off. We'll take this off. And now we\u2019ve done this. I just converted that function into an arrow function \nand it has these two parameters. So, we just have the parameters in parenthesis. We have the arrow. And then we have what\u2019s being returned \nright after the arrow. So, if I run that you\u2019ll see that we concatenate \nthe two arrays that are passed in in this example. And then for good measure we'll change this to const. [Write Higher Order Arrow Functions] Arrow functions work really well with higher order \nfunctions such as map, filter, and reduce. I\u2019ll go into more detail at a different time \nabout map, filter, and reduce. But the main thing to know is that they take functions \nas arguments for processing collections of data. Whenever one function takes another function as an \nargument, that\u2019s a good time for an arrow function. So, what we're going to do here \nis we're going to update this function right here. We want it to compute the square \nof only the positive integers in the array. So, it\u2019s passed in this array which is this. And we want to filter out everything \nthat\u2019s not a positive integer. So, I\u2019m going to use the filter \nand map functions to do that. But the main thing I want you to look at is the arrow \nfunctions that I\u2019m passing in to filter and map. This line is going to be a lot more succinct \nbecause of the arrow functions. So, ,we have the squaredIntegers \nis going to be the arr. And we're going to filter this.\nSo, .filter. Now, again, I\u2019m not really going to explain in detail \nwhat the filter function does,  but that will be something for another time. Just look at this arrow function. We're going to create this arrow function. We're starting it just like this. Now before I showed you that you passed an \narguments in parenthesis for an arrow function. But if you only have a single argument like this, \nthe number argument,  you don\u2019t need parenthesis around the argument. You can just put the argument and then the arrow. So, this is the beginning of the arrow function. And then we'll see what\u2019s returned\n from the arrow function. First we want to filter this array \nso we only have numbers that are integers  and numbers that are more than zero. So, we'll do Number.isInteger. And then we will pass in the number. And number is more than 0. So, let me complete the parenthesis here. Now the result of this filter command  will be an array with all the numbers \nthat are more than 0 and also integers. So, that will be 4, 42, and 6. But after we get that new array we want to get t\nhe square of each number in that array. So, that\u2019s where we\u2019re going to use the map function. Now the map function takes a function as its argument. But instead of writing a full function out \nwe can use an arrow function. So, we're going to pass in x to the function. And then there\u2019s going to be an arrow function. Now x just means every element from the array \nthat\u2019s being passed to it. So, remember the map is getting the array for 42, 6. x means for every element in the array \nthis is what we're going to do to it. x * x because it\u2019s going to be squared. Again, the main point of the lesson is not \nto understand the filter and map functions,  but to see that we can put an arrow function,  we can pass in an arrow function and it makes it \nso we can fit everything really succinctly on one line. So, let\u2019s reload this and see if it works. Now we have [16, 1764, 36]. [Write Higher Order Arrow Functions] In order to create more flexible functions \nyou can use default parameters. The default parameter kicks in when the argument \nis not specified or is undefined. So, for instance, with this increment function \nwe want to change it. We want to change the increment function. So, you can pass in two arguments, \nthe 5 and 2 to increment by 2. Or you can just pass in the one argument, \nthe 5 if you want to increment by 1. So, here are the numbers we're passing in. A number and a value. So, we just have to put value = 1. So now if a value isn\u2019t passed in, \nit will be set to 1 automatically,  but if it is passed in, it will be set to \nwhatever is passed in. So, if we run this we can look on the console, \nwe have 7 for this first one and 6 for the second. [Use the Rest Operator with Function Parameters] The rest operator allows you to create a function \nthat takes a variable number of arguments. The rest operator is three dots. So, we have this function here. And it\u2019s taking three arguments, x, y, and z \nand it\u2019s summing them. So, at first it\u2019s converting these x, y, z \ninto an array called args. And then it\u2019s reducing them. So, it\u2019s summing them all up here \nand then returning the results. So, right now if we just run this, \nit\u2019s going to log 6 because 1 + 2 + 3 is 6. But we can change this to use the rest operator. So, we're still going to pass in 1, 2, 3. But where it\u2019s accepted here, where we have the \narguments here, x, y, z, I\u2019m just going to put .... That\u2019s the rest operator. Just .... And I\u2019m going to put args. So, with this rest operator, ...,  it will convert everything that\u2019s passed in \ninto one array and the array is called args. So, now we don\u2019t need this anymore. And it should work the same. If we run this, we'll get 6. But we can also now add any number of numbers. So, I\u2019ll put a 4 on the end and 10. It\u2019s going to add those numbers together. So, before we could only pass in three arguments. And now, we can have any number of arguments. [Use the Spread Operator to Evaluate Arrays In-Place] The spread operator looks just like the rest operator. Three dots. But it expands an already existing array. Or it spreads out an array. So, it takes an array and spreads it out \ninto its individual parts. So, here we have an array with some months. And the spread operator can spread this array,  this arr1 into the individual months \ninstead of the actual array here. You can only use it in an argument \nto a function or in an array literal. So, let\u2019s look at this. So, right now we're setting arr2 to equal arr1. In this example we're not actually copying it. Because if we change arr1, \nif we set the index of arr1 to \u2018potato\u2019  and we log arr2, you\u2019ll see that index [0] is \u201cpotato\u201d \neven though we're logging arr2  and we only changed arr1 \nbecause these are equal. arr2 and arr1 are the same. But what if we want arr2 to be a copy of arr1 ? We can use the spread operator. Now we can\u2019t just use the spread operator like this. That\u2019s not going to work. But if we put this inside brackets, which is an array,  it will spread out the contents of arr1 \ninto this new array. So, we're not making arr2 equal to arr1. We're making arr2 equal all of the contents of arr1 \nso they\u2019ll be different. So, if we run this again,  you\u2019ll see that it says \u201cJanuary\u201d for the first element \nin the array instead of \u201cpotato\u201d. [Use Destructuring Assignment \nto Assign Variables from Objects] The next few lesson will be about \ndestructuring assignment. This is a special syntax for neatly assigning values \ntaken directly from an object to a variable. So, look at this object here. We have this object with three elements. We have the x, y, and z with their values. And it\u2019s all in the voxel variable. So, if we want to take each individual element \nin this object  and assign it to its own variable, \nthis is the old way of doing it. So, we can do vox with an x.\nThis stores x. voxel.y stores y.\nvoxel.z stores z. Now with destructuring, there\u2019s a simpler and quicker \nway to assign variables for each element in an object. So, here\u2019s the destructuring syntax right here. This time, we are creating variables a, b, and c  and assigning them to a values \nfrom the object x, y, and z. We can see we put it in curly braces here. And we just say it equals the object. It equals voxel. You can read it like this, get the field of x \nand copy into the value a. So, get the field of x from the object, \ncopy into the value a. Get the field of y from the object, \ncopy into the value b. Get the field of z, copy it into the value c. So, this is just a quicker way of assigning things \nfrom an object into variables. Now we're going to use destructuring to obtain \nthe average temperature for tomorrow  from the input object AVG_TEMPERATURES. So, we have AVG_TEMPERATURES. It has today and tomorrow\u2019s temperatures. And then the average temperature \nis inputted into this function here. So, I\u2019m going to change this line here \nto use destructuring  and destructure the AVG_TEMPERATURES \nobject here that\u2019s passed into this function. So, first I\u2019m just going to put \nthe AVG_TEMPERATURES variable here. And then on this side of the equals sign \nI\u2019m going to have to use the destructuring. So, I\u2019ll put the curly braces. And we'll put tomorrow. And then a colon, and then the other curly brace. So, this is saying get the tomorrow field \nfrom the AVG_TEMPERATURES object  and assign it to the tempOfTomorrow variable. So, if we run this, we should see it says 79 in console \nbecause we got the tempOfTomorrow variable. We returned tempOfTomorrow, \nand it was logged right here. So, we successfully used destructuring to get the \ntomorrow variable out of AVG_TEMPERATURES. [Destructuring Assignment with Nested Objects] We can also use destructuring assignment \nto assign variables from nested objects. We have this nested object right here, \nthe local forecast. And inside we have some nested objects. So, we have the forecast from today \nand the forecast for tomorrow. So, here we have getMaxOfTmrw \nwhere we\u2019re going to pass in the forecast. And here we can see the LOCAL_FORECAST \nbecomes the forecast variable. And we're trying to figure out the maxOfTomorrow. So, we are going to use destructuring \nto figure that out. So, it\u2019s going to equal forecast. And remember that is a nested object. So, here, when you\u2019re destructuring \nyou\u2019re always going to use the curly braces. And we are first going to get tomorrow. And on the other side of the colon we're going to \nhave some more curly braces because it\u2019s nested. So, we need to go inside of the tomorrow object \nand we need the max. So, we'll do max. And then we have the colon. And maxOfTomorrow. Now we need two sets of squiggly braces here. So, we have this one. And this one. And so we\u2019ve destructured two times. And the variable is maxOfTomorrow. So, we\u2019ve set the max that was inside tomorrow \nto maxOfTomorrow. So, if I run this, you\u2019ll see it\u2019s 84,600. [Use Destructuring Assignment \nto Assign Variables from Arrays] You can use destructuring assignment \nto assign variables from arrays. Look at this example here. So, we have this array of [1, 2, 3, 4, 5, 6]  and we're assigning the variable z and x to the first \ntwo numbers of the array, 1 and 2. The difference between destructuring \nfrom arrays and destructuring from objects  is that you cannot specify which element \nfrom the array to go into a variable. It just goes in order. However, if we wanted number 4 to be going to \na variable, we can just do like this. We would just add some commas. So, we put a comma with nothing in it, like that. Two commas in a row. And I\u2019ll put a y here. So, now we have the first element, \nthe second element, we skip the third element,  and then we have the fourth element. So, if I console.log z, x, and y \nwe should see 1, 2, and 4. Here\u2019s another thing you can do. You can use destructuring of arrays \nto switch the places of variables. Let me uncomment out these. And what I\u2019m going to do is use destructuring \nto switch the places of a and b. So, it\u2019ll be like this. I\u2019ll say [a, b]. And I\u2019ll say = [b, a]. So now it\u2019s just taking this and switching the places. So instead of a being 8 and b equals 6, \nit\u2019s now going to log out 6 and 8. So, let\u2019s see. Yeah, it worked. [Use Destructuring assignment \nwith the Rest Operator] We can use destructuring assignment \nwith the rest operator to reassign array elements. We can see in this example we have this array, \nthe digits 1 through 10 in the array. And we have this removeFirstTwo function. We\u2019re calling it here. And we're passing in the source. That\u2019s the source array. And it becomes the list. So, we want to return the array \nwith the first two elements removed. So, let\u2019s use the rest operator inside an array here. So, we'll use the rest operator, the three little dots. And to remove the first two, I just have to put two \ncommas here with nothing in between them. So, it\u2019s saying do nothing for the first element, \ndo nothing for second element. Everything else, put into the arr variable. We could have assigned the first two numbers \nin the array to two other variables. I could do a, b, and then a would be 1, b would be 2, \nand then arr would be an array of 3, 4, 5, 6, 7, 8, 9, 10. But right now we just need to return the array \nwith the first two elements missing. So, if I run that you\u2019ll see that we did that. If you look in the console, we've logged the array \nand the first two elements are missing. And then we have the original array down here. [Use Destructuring Assignment to Pass an Object \nas a Function\u2019s Parameters] You can use destructuring assignment \nto pass an object as a function\u2019s parameter. Let me show you what I mean. Right now we have this half function. And it\u2019s getting the stats argument. So, the stats is being passed what is called down here. And it\u2019s passing in this whole object, \nso this whole stats object. But you can see within this function \nwe're only using stats.max and stats.min. So, instead of passing the entire stats into this \nfunction, we can just pass in what we need. So, this is what we're going to do. I\u2019m going to put in some curly braces here \nand just put max and min. So, now when the stats get passed in, \nit\u2019s destructured into just the max and min variables. And the max and min from the function \ngets passed in. So now instead of doing stats.max \nwe can just do max. Instead of stats.min we can do min. So, if we reload that it\u2019s going to work \nexactly like it did before,  but now we only pass in what we need. This is commonly used with API calls. When you are getting information \nfrom an Ajax request or an API request,  it will often have a lot more information \nthan what you need. And you can use destructuring to get it down to \nwhat we actually want to work with. [Create Strings using Template Literals] Template literals are a special type of string \nthat makes creating complex strings easier. You make them with this backtick. So, here\u2019s an example of a template literal right here. We have the beginning backtick \nand we have the ending backtick. This would be in place of using a quotation, \na single or double quotation mark. A few advantages of using these template literals,  these backticks instead of quotation marks, are one, \nyou can make multiline strings. You can see this has two lines. Here\u2019s the first line and here\u2019s the second line. And if we log the greeting, it\u2019s going to \nput the new line right in there. Another thing is you can add single or double \nquotation marks right in the string  and you don\u2019t have to escape them. The third thing is you can put variables \nright in the string. So, if we see this, see the $. And then we have these curly braces. And so, anything in between these curly braces \nthat start with the $ is Javascript. So, right now we just have this variable,\n person.name which gets the name from up here. And then here we have person.age \nwhich gets the age from right there. So, it makes things easier \nthat you can put variables right in the strings. So, if we run that, you\u2019ll see. And normally it would actually also be printed \nwith a new line. But with this exact code editor and console, \nit doesn\u2019t show the new line. So, there\u2019s going to be a coding challenge \nthat we're going to do right down here. We have this makeList function. And we want it to create a list based \non the array that\u2019s passed in. So, when we call makeList, we pass in result.failure. Well, here\u2019s result. result.failure is this array here. And we want it to return an array that looks like this. Each element in the array is a template literal \nthat has some HTML in it  and then it also has this no-var, var-on-top,  and linebreak that comes right from this array \nthat\u2019s passed in. So, let\u2019s use template literal to create that. So, instead of setting this to equal null, \nI\u2019m going to start this off to be an empty array. Now, there\u2019s many ways to do this, \nbut I\u2019m going to use the classic for loop. So, we'll do for(). And hopefully, you\u2019ll remember \nhow to make a for loop. We'll do (let i = 0 while i is less than arr.length). And then at the end we will increment i. So, inside this for loop we'll do \nresultDisplayArray.push. And then here is where I\u2019m going to \nuse the template literal. Put a backtick. And I\u2019ll put this HTML code here. . And now this next part is going to be a variable \nbecause it changes for each array element here. So, I\u2019m going to do dollar sign \nand then the curly braces. And now I can just do arr. And then index[i]. Now end curly brace. And then I can just put the . Okay. And if we console.log this out \nbecause we just finished that,  I do console.log(resultDisplayArray) \nthe array looks just like it\u2019s supposed to be. If you look in the console, it returns correctly. [Write Concise Object Literal Declarations \nUsing Simple Fields] ES6 added some nice support \nfor easily defining object literals. If we look at this function here, \nthis function is an arrow function. It takes in three variables, name, age, and gender. And it\u2019s going to return an object. And the object is going to have a series of key value \npairs where the key is the name, age, and gender. And the values are the passed in variable names. The passed in names, age, and gender. So, if you look in the console \nyou can see this currently does. We did the createPerson. We passed in a name, age, and gender. And you can see in the console, the object is name. And \u201cZodiac Hasbro\u201d, age 56, gender:  \u201cmale\u201d. So, you can see there\u2019s some repetition. We\u2019re repeating name:  \nname, age:  age, gender:  gender. Now the first name is the key \nand the second name is the value. But there\u2019s a way to just make this simpler. If you know that you want to create an object \nwhere the key is the name of the variable  and the value is the value of the variable, \nthere\u2019s an easier way to do it. We can actually delete this whole thing here. And this is how we're going to do it. We'll just do name, age, gender. Javascript knows that it\u2019s going to return this object  and it\u2019s going to have three key value pairs, \nthe name, age and gender. So, if I reload this, you\u2019ll see in the console \nit looks exactly the same  because this code does the same thing \nthat the previous code did. [Write Concise Declarative Functions] An object can contain a function. This is the long way to put a function within an object. But there is a simpler way. We have the setGear function. But instead of using the function keyword \nand this colon, we can just delete all that. And the now this is the new way. If I load this again, you\u2019ll see 3 in the console \njust like it was before. Because we've been able to set the gear \nusing that function. [Use class Syntax to Define a Constructor Function] ES6 provides a syntax to create objects \nusing the class keyword. So, here\u2019s the older way to create an object. It\u2019s with the new keyword. We can instantiate an object using this new keyword. And we're instantiating the SpaceShuttle object. We have to have this constructor function up here. So, we use this to construct the object. Where we pass in the target planet, \u2018Jupiter\u2019. And we said the targetPlanet of this.targetPlanet. Once we create the new object like this, \nthat allows us to do zeus.targetPlanet. So, zeus.targetPlanet which we set to Jupiter. So, in the console you can see Jupiter. The class syntax replaces \nthe constructor function creation. So, I\u2019m going to delete that. We're going to use the class syntax. So, I\u2019ll do class SpaceShuttle. And then we have the curly brace here. And so, inside here we have a constructor. So, do constructor(targetPlanet). And then that\u2019s all. We just have to put in the curly brace. And this works exactly the same as before. We\u2019re using the class keyword and this constructor. So, down here we are going to do the same thing \nfor a vegetable class. So, for the vegetable class, \nwe'll have class Vegetable. And we're going to have a constructor \nwith the (name). this.name = name. So, now that we have this, we can set this Vegetable \nto makeClass which will return a Vegetable class. So, that\u2019s up here. And then when we do new Vegetable \nand passing \u2018carrot\u2019, this carrot will go into here. And it\u2019ll get set as this.name. So, when we console.log carrot.name, \nwe should get carrot. [Use getters and setters to Control Access \nto an Object] With the class object you often want to obtain \nvalues from the object  and set a value of a property within an object. This are often called getters and setters. So in this class object, we have the constructor \nwhich we already talked about. We also have a getter and setter \nto get and set the writer. So we can get the writer \nand we can set the writer. Getter functions are meant to simply return  or get the value of an object\u2019s private variable \nto the user  without the user directly accessing \nthe private variable. So, the private variable is this _author \nthat gets set when you construct the object. And then when we do get writer, \nit\u2019s going to return this ._author. So, you never actually interact directly \nwith this variable,  but it\u2019s going to get the writer \nwhich is the author here. And when you\u2019re setting, it\u2019s the same. So, you\u2019re never interacting with the _author, \nbut you can set that with the writer setter. This change could invoke calculations or even \noverriding the previous value completely. So, you can have any number of code lines \nin this setter  to ultimately maybe do different calculations before \nyou set it or calculations before you get the property. So, what we're going to do is make our own getter \nand setter for the Thermostat class. We're going to create a Thermostat class \nand we're going to have a getter and setter. So, here\u2019s the thing about this challenge, \nis that when we construct the class,  it\u2019s going to accept Fahrenheit temperature,  but we're going to create a getter and setter \nin the class to obtain the temperature in Celsius. So, it\u2019s going to have to do the calculation \nright within the class. So, let\u2019s do that. We're going to do a class of Thermostat. And in this class we need the constructor. When you first create the Thermostat \nyou\u2019re going to pass in a temperature. And remember, this is going to be Fahrenheit. Now within this constructor, \nwe're going to set a private variable. this._temp. So, the word this just means that this variable \nis only accessible within this class here. And the _temp \u2013 whenever you start a variable \nwith an _  that\u2019s going to generally signify \nthat it\u2019s a private variable. That you\u2019re not supposed to access it \noutside of that scope or outside of that class. So, we're going to set the temp. And we're not going to just put this._temp = temp \nbecause it\u2019s passed in as a Fahrenheit  and we want to convert it to Celsius. I just happen to have the equation for Celsius, \nso it\u2019s 5/9 * (temp \u2013 32). So, now we can create the getter and setter. So, for getter we\u2019ll do get temperature. And we're just going to return this._temp. Which now it\u2019s in Celsius \nbecause we're storing the value in Celsius  even though the thermostat is created in Fahrenheit. So, with the setter, it\u2019s going to be the same. set temperature(updatedTemp). And it\u2019s now going to still be in Celsus. So, this._temp = updatedTemp. So, let\u2019s look at the code down here, \nhow we're using it. So, the const Thermostat = makeClass(). This makeClass function is going to return \nthis thermostat object here. And then we're going to do \nconst thermos = new Thermostat. So, when you\u2019re instantiating an object \nyou always use the new keyword. new thermostat, that\u2019s this. And we're passing in 76. That goes into the constructor, the temp. And so we do this calculation to convent that \nFahrenheit to the Celsius in this local variable here. And then let temp = themos.temperature. So, thermos.temperature is going to use the getter, \nget temperature, and it\u2019s going to return this._temp. So, a key thing to look at is that there are now parenthesis after this. So, generally, if something is a function, \nyou would see parenthesis after the function name,  but if it\u2019s a variable or a property name, \nit\u2019s going to not have parenthesis. So, getters and setters \nare accessed similar to properties. And then we can use the setter here, \nthermo.temperature = 26,  and then it sets it with the updated temperature. And now we can say \ntemp = thermos.temperature. And if we do a console.log here, \nwe can do that with the temp. And it should have the new temperature if load that. 26. [Understand the Differences Between \nimport and require] In the past people would use the require function \nto import functions and code from other files. But now we have import and export. You can export code in one file and then import it \nin another file. It also allows you to only import certain functions \nfrom a file or certain variables. Let me show you how it works. So, in this file, we have this capitalized string function. We're passing in this string \u201chello\u201d. And we want to log out the capitalized strings. But right now it just has an error because \nthere is no capitalizeString function in this file. However, in this other file, \nwe do have a capitalizeString function. In this string function .js we have export. This is the export statement I was talking about. And then it\u2019s exporting this function. It\u2019s actually a variable. Capitalize string, that\u2019s set to equal a function. This is an arrow function, where we pass in a string. And then we return the string.toUpperCase. Now toUpperCase is just a string function \nthat makes ever letter uppercase. So, we can import this in our other file. So, let\u2019s go back to our other file. And I will import \u2013 and with the import statement \nwe're going to use curly braces. And then I\u2019ll put capitalizeString. And then we have to say \nwhat we're importing it from. We want to import it from. And this is where I put the file name. Now normally you\u2019re going to start with a ./ \nwhich just means the current directory. And I\u2019ll type in the file name. \u201cstring_function\u201d. Now, the file name has a .js after it, \nbut that\u2019s assumed. So, you don\u2019t have to put .js. You can just put the file name without the extension. So, if I run this, you can see HELLO! \nin all capital letters. It successfully imported this function \nfrom the other file and we used it in this file. [Use export to Reuse a Code Block] I\u2019ve talked a little bit about export in the last lesson, \nbut now I\u2019m going to go into more detail. You export functions and variables from one file \nso that you can import them into another file. That\u2019s how you can reuse different code. So, we have this function here. This is a capitalizeString function. It actually just capitalizes the first letter of the string. And then leaves the rest of the string lowercase. And before, I showed you \nyou can just put export right before here. But we can export it a different way. So, I\u2019ll do export and then curly braces \ncapitalizeString. And so now we just exported this function. And to export a variable like this \nwe have const foo =\u201dbar\u201d, const bar = \u201cfoo\u201d. To export these variables \nyou just type in export before. So now in this file, we're exporting this function \nand these two variables. And then we can import them into another file. [Use * to Import Everything from a File] If a file exports multiple different things,  you can import each thing individually \nor you can import everything. So, let me show you how you would import \neverything from a file. It\u2019s just import. And then you\u2019re going to put an asterisk or a star. And then you\u2019re going to put as.\nimport * as. And then you have to create an object \nto store everything in. So, I\u2019m going to import stuff from a file \ncalled capitalizeStrings. I\u2019m going to call this captalizeStrings. So, this could really be anything. I\u2019m creating an object with this. And then I\u2019m going to see what I\u2019m importing it from. And then I just put the file name. In this case, it\u2019s just going to be \u201ccapitalize_strings\u201d. Sometimes you would have to put a ./ \nif it\u2019s in the same directory there. And then I\u2019ll make sure to put a semicolon at the end. So, if you\u2019re importing everything, \nyou always start off with import * as. And then this could be anything. It could be any object name that you create. And then you\u2019re going to put from. And then you put the \u201cfile name\u201d \nin quotation marks just like that. [Create an Export Fallback with export default] Before when I talked about exports, \nI was talking about named exports. There\u2019s also something called an export default. This is a fallback export. And it\u2019s often used if you only want to \nexport one thing from a file. So, let\u2019s say I want this to be my fallback export. I\u2019m just going to only export this one thing \nfrom the file. I can just put export default. So, now we know that this is just the fallback. Basically, just the one thing we're going to \nexport from this file. [Import a Default Export] So, we talked about exporting a default export. Now I\u2019m going to show you how to import \na default export. It\u2019s pretty much the same as before \nbut there is a slight difference. So we are going to pretend we have a file \ncalled math_functions  that has a default export name subtract. So, let me show you how you would import that. So, it\u2019s going to be import subtract. And we\u2019ve already reached the difference here. If it\u2019s not a default export, \nyou\u2019ll put curly braces around this. But it is a default export so we are not \ngoing to use curly braces. But we still have to say what it\u2019s from. So, from \u201cmath_functions\u201d. Okay, so that is how you would \nimport a default export. Well, thanks for watching. Don\u2019t forget to subscribe. And remember, use your code for good. Visit freeCodeCamp.org"
        },
        {
            "video_id": "HXV3zeQKqGY",
            "title": "SQL Tutorial - Full Database Course for Beginners",
            "description": "In this course, we'll be looking at database management basics and SQL using the MySQL RDBMS. Want more from Mike?",
            "published_at": "2018-07-02T17:13:32Z",
            "channel_name": "freeCodeCamp",
            "transcript": "SQL Tutorial - Full Database Course for Beginners In this course I\u2019m going to teach you everything you \nneed to know to get started using SQL. Now SQL is a language which is used to interact \nwith relational database management systems. And a relational database management system  is basically just a software application which we can \nuse to create and manage different databases. And so, we're going to talk about \nall of this stuff in this course. We\u2019re going to start off with the basics. So, we'll just look at what is a database. We\u2019ll talk about the different types of databases. We'll talk about what SQL is and what it actually \nmeans and how you can use it to create databases. And then we're going to go ahead \nand we're going to install something  called a relational database management system. Which like I said, is just software \nthat we can use to manage a database. We're going to install a relational database \nmanagement system called MySQL. And MySQL is one of the most popular database \nmanagement systems for beginners. And also, just in general. So, MySQL is a great first system to learn. And so, once we have that all install, \nthen we'll start writing SQL. So, we can write out little SQL code, \nlittle queries  in order to create databases \nand create database tables and, you know, input information, \nretrieve information. And then we're going to get into writing SQL queries. And queries are used to query a database. So, we'll create a database. We\u2019ll populate it with information. And I\u2019ll show you guys how you can write these little \nSQL queries to get specific pieces of information. So, we'll start off with the basics \nand we'll just learn all of the fundamentals. And then I\u2019m going to show you guys \nsome more advanced techniques  to getting information out of a database. And finally, I\u2019m going to show you guys \nhow you can actually design database schemas. So, a database schema is basically just like all of the \ndifferent tables and all the different relations  that the database is going to store. And if you don\u2019t understand what any of that means, \ndon\u2019t worry, we're going to cover all of it. But this course will cover basically everything \nabout SQL, all of the fundamentals,  all of the things that you need to get started. And we'll also look at database \ndesign and schema design. So, it\u2019s going to be a pretty awesome course. I\u2019m excited to be bringing you guys this stuff. And just know that all of the code, \nall the stuff that\u2019s in this course  is going to be available \non the Giraffe Academy website. GiraffeAcademy.com. And there\u2019s also going to be some \nadditional things on the website  that isn\u2019t going to be in course just because \nI didn\u2019t have time to cover all of it. So, check out the website for more information. But without further ado, lets get into it. Let\u2019s learn SQL which is one of the most popular \nlanguages for not only jobs,  but just for developers in general. [What is a database?] In this video I\u2019m going to give you guys a full \nintroduction into databases. So, we're not going to get too specific \non any one point. Basically, I want to show you guys \njust what databases are in general. We're going to talk about how databases are used, \nwhy we use databases. And the different types of databases \nthat you\u2019ll find out in the world. So, this should basically just give \nyou an introduction to databases in general. If you don\u2019t know anything about databases, \nthen this video will kind of walk you through  and get you up to speed \nwith what you need to know  so you can then go off and start learning \nhow to use an actual database. So, I just have a little PowerPoint slide here \nthat I want to kind of walk you guys through. And we'll look at some different \nfeatures of databases. So, the first question is, \n\u201cWhat is a database?\u201d You\u2019ll often see databases \nabbreviated as DB. So DB would stand for database. And, a database is any collection \nof related information. What I\u2019m sharing with you guys here is the absolute \nmost general definition of this word. A database really, if you want to get down to it, \nis just any collection of related information. So, that could be something like a phonebook,  a shopping lists, a to-do list, \nyour five best friends, Facebook\u2019s userbase. All of these are examples of databases. All of these are collections of information \nthat store related stuff, right? So, the phone book, right? This stores people\u2019s phone numbers. Their names and their phone numbers. It\u2019s a collection of related information. A to-do list \u2013 this stores a list of things \nthat you want to do during the day, right? It\u2019s related information. Your five best friends. That\u2019s information. It\u2019s information that you\u2019re storing somewhere. You have \u2013 you know, if I came up to you \nand asked you who your five best friends were,  I\u2019m sure you could list them off. That, in essence, is a database. It\u2019s a collection of related information. And then Facebook\u2019s userbase, right? So, all of the users that Facebook \nkeeps track of and stores. That\u2019s another example of a database. So, databases can be stored in different ways. So, you could store a database on paper. If I had a shopping list or a to-do list, I might \njust scribble that down on a piece of paper. You could store a database in your mind. So, your five best friends, for example. If I came up to you and I asked you, \n\u201cList off your five best friends.\u201d And you probably don\u2019t have it \nwritten down somewhere. You don\u2019t have an app on your phone \nthat tells you who all your friends are, right? You just know that information in your mind naturally. And so, that\u2019s another way \nthat you can store a database. You can just store the information in your mind. You can store information on a computer. And this is probably the most common use case \nis people will create a database  and they\u2019ll store all the information \non their computer. This PowerPoint, the PowerPoint \nthat we're looking at right now. This is an example of a database. It has related information on it. And I\u2019m using it to teach this lesson. And then finally like a comment section. So, if you go down to the comment section \nof this video, that\u2019s a database, right? It\u2019s a general database that\u2019s storing \ncomments for the video. So, that really, in essence, is everything you need \nto know about databases to get started. It\u2019s a collection of related information \nthat can be stored in different ways. So, now that we understand \nthe very general definition,  I want to kind of walk you guys through more \nspecifically what we can do with databases. So, over here I have another slide. It\u2019s Computers + Databases equals heart. Now, the point I\u2019m trying to drive home \nwith this slide is that storing a database,  storing a collection of related information \non a computer is extremely useful. And computers are actually great \nfor storing databases. So, I have here two things. We have over here on the left \nAmazon vs a Shopping List. So, these are two examples of situations \nwhere we have a database. We kind of talked about how \na shopping list is a database. It\u2019s a collection of related information, right? A collection of products that you \nwant to buy from the store. Amazon.com is also a database. Amazon is storing all this product information, \nall this user information. They\u2019re storing reviews on the products, \nthe prices of the products. They\u2019re storing all of this information. So, let\u2019s take a look and we'll compare \nand contrast these two databases  and we'll see why computers \nare the preferred medium for storing data. So, Amazon.com keeps track of products, reviews, \npurchase orders, credit cards, users, media, etc. So, Amazon is keeping track of so much information. Trillions of pieces of information \nneed to be stored and readily available. Over here we have a shopping list. A shopping list keeps track of consumer products \nthat need to be purchased, right? We're talking 10 to 20 pieces of information \nneed to be stored and readily available. So, Amazon, we need to store \ntrillions of pieces of information. With the shopping list, \nwe need to store 10 or 20. Both of these are databases, \nbut the one we have trillions of stuff. The other one we have 10 to 20 things. And so, over here on Amazon, the information \non Amazon is extremely valuable  and it\u2019s critical to Amazon.com\u2019s functioning, right? So, the information that Amazon is storing \nit\u2019s database is absolutely essential. And another thing is that security is essential, right? Amazon stores people\u2019s personal information, like \nsocial security number or credit card, address, phone. Like that information needs to be \nlocked down and secure. A shopping list on the other hand, the information \nis for convenience\u2019s sake only, right? It\u2019s not absolutely necessary for shopping. Like if you didn\u2019t have a shopping list, you could still \ngo to the store and, for the most part,  you\u2019d be able to find everything that you need. Also, with the shopping list, \nsecurity is just not important at all, right? If you drop your shopping list on the ground \u2013 \nI mean if somebody else was to pick it up  and look at it, it\u2019s like not a big deal. It\u2019s a shopping list. Finally, over here on Amazon, \nthe information is stored on a computer. Whereas with the shopping list, the information \nis stored maybe on a piece of paper,  or it could even just be stored \nin someone\u2019s memory, right? So, maybe you just memorized your shopping list  and that\u2019s where you\u2019re storing \nyour shopping list database. So, what I\u2019m trying to show you guys is that \na database doesn\u2019t just have to be on a computer  and it doesn\u2019t just have to be like in your memory \nor on a piece of paper, right? Databases are in all of these different environments. But here\u2019s the thing, for an application like Amazon, \nstoring information on something like a computer  makes it really easy to store \ntrillions of pieces of information. And really easy to secure the data \nand make sure that security is taken care of. And it also makes it really easy \nto back up that information  and duplicate that information and store \nthat information on different computers. So, the main point of this slide is that computers are \ngreat at keeping track of large amounts of information. And so, going forward, we're going to be talking about \nhow can we create databases on the computers  because computers are so good \nat storing that information. So, let\u2019s talk about how we can go about \ncreating databases on a computer. Now, a database could be as simple \nas like a text file where you store information. Or it could be like an Excel file, right? Microsoft Excel file. But generally, if you\u2019re going to be using \na database with an application  or you\u2019re going to be using a database \nto store huge amounts of information,  a lot of times what people will do is \nthey\u2019ll use special software  which is designed to help you create \nand maintain the database. This is called database management systems. So a database management system \nis a special software program  that helps users create and maintain a database \non a computer. So, it makes it really easy for us \nto manage large amounts of information. So, if you\u2019re a company like Amazon \nand you have trillions of pieces of information  that you need to keep track of, well, \nthe database management system  can make it pretty easy for you to store \ntrillions of pieces of information, right? It\u2019s not like all that information \nis just in like some single text file. The database management system \nwill make it really easy for you to store that. Database management systems \ncan also handle security. So, they can make it so only certain people with the \nusernames and passwords can access the data. It\u2019ll also help you to backup your data and import \nand export data from other sources. So, if you have a bunch of information \nand you want to back it up,  a database management system can help you do that. Database management systems \ncan also interact with software applications. So, you know, Amazon.com is a website. And it\u2019s interacting with the Amazon database  which is stored mostly likely \nusing a database management system. So, you could write a program that could interact \nwith the database management system. All right, so let\u2019s take a look at \nthis quick little diagram that I have here. So, we have Amazon over here. And this would be like Amazon.com. And Amazon is communicating \nwith a database management system. And I don\u2019t work for Amazon so I\u2019m not 100% sure \nexactly how they're doing this. But for the most part, this is the general use case. So, we have our database management system \nwhich is this little box here. And the database management system is creating \nand storing and keeping track of a database. So, the database management system \nisn\u2019t the actual database. The database management system \nis the software application  that is creating, maintaining, updating, deleting \ninformation from the actual database. So, Amazon.com will interact with \nthe database management system  in order to create, read, update, \nand delete information. So, Amazon isn\u2019t creating or reading \nor updating this information directly. Amazon is telling the database management system \nto do that for it. And by going through \nthe database management system,  we can be sure that all the data \nis getting stored correctly  and there\u2019s going to be no problems with the data. So, let\u2019s talk about C.R.U.D. And this is an acronym that you\u2019re going to hear a lot. C-R-U-D. It stands for Create, Read, Update, and Delete. You\u2019ll also hear people call this \nCreate, Retrieve, Update, and Delete. Now, CRUD represents the four main operations \nthat we're going to be doing with the database. So, you\u2019re going to be creating information \nin the database. So, creating new database entries. You\u2019re going to be reading information \nfrom the database. So, you know, retrieving or getting \nthe information that you already stored in there. You\u2019re going to be updating the existing information. And you're going to be deleting the information \nthat\u2019s already in there. And these are the core four operations that we want \nthe database management system to perform for us. So, any good database management system \nis going to be able to do all four of these things. So, now that we've talked a little bit about \ndatabase management systems,  I want to talk to you guys about the two main types \nof databases that you'll find in computing. So, the first is called a relational database. You\u2019ll hear people refer to these as SQL[Sequel] \ndatabases or S-Q-L databases. And then we also have what are called \nnon-relational databases. And you\u2019ll hear people refer to non-relational \ndatabases as no-SQL or not just SQL databases. We're going to talk about what SQL is in a second. But I want to show you guys these two types. So, a relational database which we have over here \non the left, organizes data into one or more tables. So, each table has columns and rows \nand a unique key identifies each row. Now, relational databases are by far \nthe most popular types of databases. And relational databases are going to store \neverything inside of these tables. So, we'll organize all the data that we want \nto store inside of these predefined tables  and then we can just insert information into there. A relational database is a lot like an Excel spreadsheet. So, if you\u2019ve ever used a spreadsheet \nwhere we have columns and rows  and we're storing information, \nthat\u2019s essentially what a relational database is. And then over here on the right \nwe have non-relational databases. And a non-relational database is basically just any \ntype of database that\u2019s not a relational database. So, like I said, relational databases \nare by far the most popular type. And so, because they\u2019re so popular, \nany other type of database  that\u2019s not technically relational is just referred \nto as non-relational. And non-relational databases, you know, \nit\u2019s very general. Because any database that\u2019s not relational \nis getting put into this category. So, non-relational database is organized database \nin anything but a traditional table. So, you\u2019ll have things like key-value stores documents  which would be kind of like \nJavaScript Object Notation. Or like XMl. They\u2019ll store data in graphs. Or even flexible tables. So, really non-relational database \nis a very general category. It\u2019s just anything that\u2019s not relational. So, let\u2019s take a look real quick at a relational database. Or you\u2019ll hear people, like I said, \nrefer to this as a SQL database. So, over here, we have two examples of tables. So, this would be basically how we would store \ninformation in a relational database. So, over here I have a student table. And this student table might store individual students. So, you\u2019ll see over here we have \nan ID, a name, and a major. So, for every single one of my students, \nI have an entry just like this. And you'll notice over here, \nI\u2019m giving each of these entries an ID. And that ID will uniquely identify that row in the table. And over here, we have a users table. So, maybe you're creating users for your application. So, they have a username, \na password, and then an email, right? So, the username is something \nthat\u2019s going to be unique. It\u2019s something that uniquely identifies \neach row in the table. And then we're also storing like password and email. So, we kind of talked about how \nrelational databases store data in tables. And when we want to create a relational database,  we can use a \nrelational database management system. And a relational database management system, \nor an RDBMS  is just a database management system that helps you \ncreate and maintain a relational database. And some of the most popular are my MySQL, \nOracle, PostgreSQL, and MariaDB. There\u2019s a bunch of these that are, \nyou know, extremely popular. And relational database management systems use \nsomething called Structured Query Language, or SQL. And SQL is a standardized language for interacting \nwith relational database management systems. So, remember, \na relational database management system  is just a software application that we can use \nin order to create, maintain  and do different things to our relational database. And SQL or Structured Query Language \nis the language that we can use  to interact with those relational \ndatabase management systems. So, we can use SQL to perform CRUD operations \nas well as other administrative tasks  like user management, security, backup, etc. And we can use SQL to define tables and structures. So, a relational database uses tables \nin order to organize its information. And we can use SQL to define those tables. And then insert information into those tables. And SQL is a standardized language \nwhich means it\u2019s pretty much used  on every relational database management system. However, different relational database management \nsystems will implement SQL just a little bit differently. So, not all SQL code that you use on one \nrelational database management system  will port over to another one \nwithout slight modification. So, now let\u2019s talk a little bit \nabout non-relational databases. And in non-relational databases \nis just anything that\u2019s not relational. So, a non-relational database stores data \nin anything but a, you know, a static table. So, I\u2019m showing you guys a couple different \nexamples of non-relational databases  and how they would store data. So, over here we have a document database. And this would store information inside of like \nlittle objects or documents. So, we're talking about things like JSON or XML. Basically, I think JSON is kind of a very popular format \nand that\u2019s kind of what I have up here. So, JSON is JavaScript Object Notation. So, there\u2019s a lot of non-relational databases \nthat will store data in documents just like this. They\u2019ll also store data in graphs. So, over here we have graphs. And there\u2019s like these little nodes. And then there\u2019s, you know, connecting lines between \nthe nodes which would represent like relationships. And then over here we have a key value hash. So, we would have a key \nand it gets mapped to a value. And that could really be anything. It could be a string. It could be JSON. It could be a graph. It could be anything like that. So, these are just three common examples  of what SQL or non-relational databases \nmight look like or how they might store their data. And just like with relational databases we can have \nnon-relational database management systems. And these help users to create \nand maintain non-relational databases. So, some examples would be mongoDB, \nDynamoDB, apache cassandra, firebase. There\u2019s a bunch of these popular noSQL databases  that have been sprouting up \nover the last decade or so. And these are all implementation specific. So, unlike relational database management systems \nwhere we have SQL  which is just a standard language \nthat can interact with all of them,  there isn\u2019t a standard language for interacting with \nnon-relational database management system. So, generally, the non-relational \ndatabase management system  will implement their own language for performing \nCRUD and administrative operations on the database. So, now that we've looked at the different types \nof databases,  I want to talk to you guys about \nsome core concepts within databases. So, one of the most common things \nthat you\u2019re going to be doing are queries. So, a database query is a request that\u2019s made \nto the database management system  for specific information. So, you\u2019ll hear the word query thrown around a lot. And generally, a query is you\u2019re just asking \nthe database management system  to give you some information. So, as a databases structure becomes \nmore and more complex,  it becomes more difficult to get \nthe specific pieces of information that we want. And if you have a very complex \ndatabase layout or schema,  then getting a specific piece of information \ncan be a little bit tricky. And that\u2019s why we write database queries. So, can write a very complex database query \nwhich in a lot of ways is like a program,  if you\u2019ve ever used a programming language before. And that query will then instruct the \nrelational database management system  to grab a specific piece or specific pieces \nof information from the database. So, a good way to think of a query, \nis it\u2019s kind of like a Google search, right? So, if I go on Google and I would generally \ntype in the specific information that I want. And then Google would give me the information \nthat matches that search query. That\u2019s a lot like a database query. Except with a database query we're \nnot going to be writing the query in English  like we would with Google. So, I can, you know, go up to my Google search bar  and I can type something in in English or Spanish \nor whatever language you speak. But with a relational database management system \nwe have to write our queries using either SQL  or a specific language that\u2019s meant for that \ndatabase management system. So, let\u2019s wrap this up real quick. We kind of covered a lot of \nthe main points with databases. So, a database is any collection \nof related information. It\u2019s a very general term. And computers are great for storing databases \nbecause computers are really fast. They can store lots of pieces of information. And they can handle things like security really easily. And database management system \nmake it easy to create, maintain,  and secure a database on a computer. Database management systems will allow you \nto perform the CRUD operations  and other administrative tasks on the database. There\u2019s two main types of databases, relational \nand non-relational databases. Relational databases use SQL and they store data \nin tables with rows and columns. Non-relational databases store data \nusing other data structures. So, things that aren\u2019t relational database tables. And then we talked a little bit about querying. A query is just a require that you would make \nto the database management system  for a specific piece of information. So, that is kind of the basics, \nthe overall high-level basics of databases. And really, if you understand everything \nin this PowerPoint,  then you have a good grasp of database fundamentals. And as we go forward, we're going to learn more and \nmore things about databases like how to create them,  how to store data, and how to organize our data\n so that it\u2019s easy to retrieve when we want it. [Tables and Keys] In this tutorial, we're going to look at some \nof the core concepts in relational databases. So, we're going to talk about how we store \ninformation in relational databases. Namely, in tables. Let\u2019s talk about the different things \nabout those tables. We're going to talk about things called keys. We're also going to look at rows and columns. We'll talk about different tables can be related \nto each other  and how we can define relationships between tables. So, this will really just give you guys a full introduction \ninto some of the core concepts of relational databases  which you can then apply when \ncreating your own relational database  using a relational database management system. So, let\u2019s get started. Over here I have an example of a table. And this is a student table. And so, the student table defines \nspecific information about a student. So, up here we have the column names. So, the student ID, the same of the student, \nand then the major. So, I\u2019m storing three pieces of information \nabout each student, right? They have their ID, their name, and their major. So, over here we have Jack. His student ID is 1. And he\u2019s majoring in biology. Down here, we have Claire. Her student ID is 3 and she is majoring in English. So, all tables in relational databases \nare going to have two things. They\u2019re going to have columns \nand they're going to have rows. Now, columns are these vertical sections right here. So, a column would define a single attribute, right? So, we have our name column. And inside the name column \nwe have the names of all the students. We have the major column. Inside the major column we have \nthe majors of all the students, right? Makes sense. And then we have rows. And a row is an individual entry \nin the student table. So, a row or a horizontal entry \nwould represent a single student, right? So, in a single row we're storing \nthe student ID, the name, and the major. So, the columns represent a single attribute and \nthe row represents an entry or an actual student. Whenever we're creating a table \nin a relational database  we always want to have one very special column \nwhich is called the primary key. And a primary key is basically an attribute which \nuniquely defines the row in the database. So, it\u2019s an attribute about a specific entry \nwhich will uniquely define it. So, over here, we have student ID. And notice that I colored this in red \nand I also underlined it. And this underline is basically going to specify \nthat this column or this attribute of the student  is going to be the primary key. In other words, we can use this attribute \nto uniquely identify a specific row. So, over here we have Kate \nand she\u2019s a sociology major and her ID is 1. So, we would say that Kate\u2019s primary key is 1. Now, let me show you guys why primary keys \ncan come in handy. So, down here, inside of these gold squares \nI have two entries in this database. So, we have two students, both of which \nare named Jack. And both of which are biology majors. Now, this isn\u2019t that, you know, special of a case, right? You can imagine that in a school you might have \ntwo students with the same name  who are the same major. But in this case, how can we differentiate \nbetween this guy and this guy? Well, we can use this primary key. So, even though the name and the major \nof this row in the table  are the same as the name and the major of this row, \nthe student ID is different. The primary key is different. And that\u2019s the whole point of a primary key,  is that the primary key is always \ngoing to be unique for each row in the table. So, even if all of the attributes of the row \nare the same, the primary key won\u2019t be. And therefore we can differentiate \nbetween the two rows. So, I can differentiate between this Jack and this Jack\n by referring to their student IDs. And so, generally, whenever we have a table \nin a relational database,  you always want to define a primary key. And a primary key can be anything. It can be a number. It could be a string of text. It could really be anything that you want. But it has to uniquely identify the specific row. So, in other words, another row in this student table \ncouldn't have a primary key of 2. So, down here I have another example \nof a database table. This is a user table. So, just like that student table, \nexcept it\u2019s storing information about users. So, over here we have email, password, \ndate created and type. So, email is going to be our primary key. You can see I put that in red and I also underlined it. And these emails are unique to each entry \nin the table, right? So, fakemail@fake.co. No, other rows in this table could have \nthat exact email. And then over here we're storing the password. We're also storing a date. So, a lot of times in databases \nyou can store date values or time values. And then over here we're storing a type. And so, basically whenever you want to store data, \nwhat you\u2019re going to do is define a table. So, you\u2019re going to define, you know, \nall this information up here  and then you'll just insert specific pieces \nof information into that table. And so, over here we have one more example \nof a database table. And we're actually going to be looking \nat this example as we go forward. So, this is an example of an employee. So, imagine that we have like a company database \nand we were storing information about employees. So, we have the employee ID which is the primary key. We're storing first name, \nlast name, birthdate, sex, and salary. And we're storing all of this specific information \nabout an employee. Now, I want you guys to notice \nthe primary key over here. So, employee ID, this is just a, you know, \nsome sort of random number  that we\u2019ve assigned to each employee, right? This employee\u2019s ID is 100. This employee ID is 101, etc. And this over here, this employee ID, \nthis is what we would call a surrogate key. And a surrogate key is basically a key that has no \nmapping to anything in the real world, right? It\u2019s essentially just, you know, like in this case a \nrandom number that we assign to an employee, right? So this, employee Jan has an employee ID of 100. That doesn\u2019t necessarily mean anything. 100 is just a value that we're using to represent \nJan inside of the database. And so, we would refer to that as a surrogate key, \nwhich is just a type of primary key. Surrogate key is a key that has no mapping to \nanything in the real world. We can also have something called a natural key. And over here you'll see that \nI have the same exact table  except instead of having employee ID, \nI have employee SSN. And SSN stands for Social Security Number. So, Social Security Number is a number \nthat we use here in the United States  in order to uniquely identify each citizen. So, in this case we're using the Social Security Number \nin order to uniquely identify each row in the table. In other words, we're using the Social Security Number \nas the primary key of the table. And this is an example of \nwhat we would call a natural key. And this is a key that has a mapping or has a purpose \nin the real world, not just in the database. So, a lot of times you'll hear people refer to surrogate \nkeys or natural keys and that\u2019s the difference. A surrogate key is a primary key \nthat has no mapping to the real world. And a natural key is a key that has a mapping to the \nreal world, just like Social Security Number. So, those are kind of the two different types of \nprimary keys that you might see being stored. Another thing I want to talk to you guys \nabout are what are called foreign keys. And a foreign key is basically an attribute \nthat we can store on a database table  that will link us to another database table. So, over here I have this same exact employee table. And then I also have this  \nother attribute over here, branch_id. And you notice that I colored this in green. And this is what we would call a foreign key. And a foreign key stores the primary key \nof a row in another database table. So, here we have our employee table \nand I\u2019m defining information about the employee. But let\u2019s say that an employee belongs \nto a specific branch in our company, right? So, a company might have different branches. And we can store the information about what branch \nthe employee belongs to inside of a foreign key. So, the foreign key over here is actually \na primary key inside of another table. In our case, a branch table. So, let me show you guys that. So, down here, we have this branch table \nin our database, right? So, the branch is it\u2019s own separate table. And we have \u2013 the branch has a primary key \nover here which is 2, 3, 1. And the branch names are Scranton, Stamford, \nand Corporate. So this in itself is its own table, right? It\u2019s the branch table. And over here we can define which branch \na specific employee belongs to,  by referring to the ID, the primary key of the branch. So, here, Jan Levinson, her branch ID is 1, which \nmeans she is in the corporate branch, right? Because branch ID number 1 is corporate. Michael Scott, his branch ID is 2, \nwhich means he\u2019s in the Scranton branch. So this number is mapping this row over here \ninto this other table. And that\u2019s what a foreign key does. A foreign key is essentially just a way that we can \ndefine relationships between the two tables. So, a foreign key is just a primary key of another table. So, Andy Bernard, right? His branch ID is 3 which means he belongs \nto the Stamford branch. And so, that\u2019s what a foreign key does. A foreign key allows us to link up or define \nrelationships between tables. I can say that Andy belongs to the Stamford branch \nand I can define that using the foreign key. And over here you'll see on the branch table, I also \ndefined another foreign key which is manager ID. mgr_id, that would stand for manager ID. And now this is actually going to be a foreign key \nwhich connects branch to the employee table. So, manager ID is going to be the ID of a particular \nemployee who is the manager of the branch. So, let\u2019s take a look at the Scranton branch. So, the branch ID is 2. The name of the branch is Scranton, \nand the manager ID is 101. So, let\u2019s go check it out. So, over here in the employee table,\n employee 101 is Michael Scott. What that means is that Michael Scott \nis the manager of the Scranton branch, right? We were able to define that relational \nby using these foreign keys. So, down here, the Stamford branch, \nthe manager is 102. If we come up here, we can see \nemployee 102 is Josh Porter. So, Josh Porter is the manager \nof the Stamford branch. Corporate over here, the manager ID is 108. So, over here we didn\u2019t actually include \n108 over there. So, obviously, this isn\u2019t like, you know,\n a huge table of employees. But the manager for the corporate branch \nwould be the employee with the ID of 108,  whatever that would be inside of this table. So, that\u2019s what a foreign key does. A foreign key is able to help us to define relationships \nbetween the tables, right? I can define which branch \na specific employee belongs to  by including the branch\u2019s ID as a foreign key \nin the employee table. Similarly, I can define which employee \nis the manager of a branch  by including that employee\u2019s ID as a foreign key \nin the branch table. And so, that\u2019s really why foreign keys \nare going to come in handy. And it\u2019s also important to note that a particular table \ncan have more than one foreign key on it. So, ever here I have my employee table, right? And it\u2019s the same exact thing as we have before. But I also added another attribute \nor other column over here which is super_id. And that stands for supervisor ID. And so, what this is going to do is it\u2019s going to define \nwho is the supervisor of a particular employee. And what\u2019s cool about this foreign key \nis it\u2019s actually relating back to the same table. So, an employee can be a supervisor \nof another employee. So, over here we have Angela Martin, right? Her employee ID is 103. And her supervisor ID is 101. And that means her supervisor \nis the employee with the ID 101. So, if we come over here we can look. Angela Martin\u2019s supervisor is Michael Scott because \nMichael Scott has an employee ID of 101. So, Michael Scott. Michael Scott\u2019s super ID is 100. That means Michael Scott\u2019s supervisor is the \nemployee with ID 100, which is Jan Levison. So, we can these this foreign key over here \non the employee table  to define relationships between employees. So, before we define the relationship between \nthe employee table and the branch table,  and now we're defining a relationship between the \nemployee table and the employee table, right? And so, what\u2019s cool about this is \nthen basically inside of this table,  we can tell what the different supervisor \nor supervisee relationships are, right? I can tell that Josh Porter\u2019s supervisor is Jan Levinson. And I can tell that Angela Martin\u2019s supervisor \nis Michael Scott. Defining that information by using a foreign key. All right, so let\u2019s take a look at another table. I actually added in another table down here. So, over here we have employee, \njust like we had before. We have branch. And then we also have branch supplier. And branch supplier is another table \nthat we can look at. So, a branch supplier would basically define \nwho the suppliers are for specific branches. So, we have these branches. Maybe they're selling a certain product. Maybe they're selling like paper products. And the branch suppliers would define \nwho are the suppliers for that branch. And you'll notice up here, the primary key actually \nconsists of two columns. And this is what we would call \na composite key or a composite key. And a composite key is basically a key \nthat needs two attributes. So, this key is made up of two columns, right? It\u2019s made up of branch_id and supplier_name. So, branch_id is actually going to refer \nto the specific branch. And supplier_name is going to refer \nto the specific supplier, right? So, we can say over here that Hammer Mill \nsupplies paper to branch number 2. So Hammer Mill supplies paper to Scranton. Uni-ball supplies writing utensils to \nbranch ID number 2, which is Scranton. Patriot Paper supplies paper to \nbranch ID number 3 which is Stamford. So, inside of this branch supplier table,  I\u2019m able to define which different suppliers are \nsupplying what to which different branches. Now, the reason that I need this composite key \nor this composite key,  is because the supplier name doesn\u2019t \nuniquely identify each row. And the branch_id doesn\u2019t uniquely identify each row. Only together can they \nuniquely identify each row, right? So, for example, supplier name, Hammer Mill. You\u2019ll notice that Hammer Mill shows up here \nand it also shows up here. So, Hammer Mill supplies to branch number 2. And they also supply to branch number 3. Uni-ball supplies to branch number 3 \nand Uni-ball supplies to branch number 2. So, this column has repeated values, right? This column has Hammer Mill repeated. It has Uni-ball repeated. branch_id also has those things repeated, right? So, branch_id 2 shows up here \na bunch of times. branch_id 3 shows up here a bunch of times, right? And so, the branch_id column \ncan\u2019t uniquely identify the table. And the supplier name column \ncan\u2019t uniquely identify the table. Only together can they uniquely identify it, right? So, we would say Hammer Mill supplies branch 2. That combination only shows up once. We wouldn't put that combination again \nbecause we\u2019re already defining it. So, Hammer Mill supplies branch 2. Hammer Mill supplies branch 3. These two rows are uniquely identified by the \nidentified by the supplier name and the branch ID. And so, over here in these employee and the branch \ntable, we only find one column as the primary key. But over here, we define two columns as \nthe primary key, which would be a composite key. And that\u2019s actually pretty common, where we're going \nto have two columns uniquely identifying each row. All right, so down here I want \nto show you guys one more example. And this is going to show you one other way that we \ncan define like different relationships with these tables. So, I actually added in two other tables. We have a client table \nand we have this Works With table. So, let me kind of walk you guys \nthrough this a little bit. We still have employee.\nWe still have branch. But over here, we're defining clients. And so, a client might be like a customer, right? So, a client would buy paper products or, you know, \nwhatever products from the branch and employee. So, the client has a client ID. They have a client name. And then they also have a foreign key \nwhich is a branch ID. So, a client is going to be associated \nwith a specific branch, right? So, we would say Lackawana County \nis associated with branch 2. Which means the Lackawana County \nis going to buy products from the Scranton branch. The John Daly Law, LLC is going to \nbuy products from branch ID number 3. So, they're going to buy products \nfrom the Stamford branch, right? So, this is a client table. And down here, we have this Works_With table. And what the Works_With table is doing \nis it\u2019s defining the relationships  between the employees and the clients. Namely, how much paper \nan employee sells to a specific client. So over here we have employee ID. We have client ID. And we have total sales. So, the employee ID is going to refer \nto an employee in the employee table. The client ID is going to refer \nto a client in the client table. And then we're going to define how much in product \nthe client has bought from the employee. So, employee 101, for example, that is Michael Scott. Michael Scott has sold client ID 401. Michael Scott has sold Lackawana County \n$267,000 worth of product, right? How about this one, 104. So, Andy Bernard has sold client number 403 \u2013 \nhas sold John Daly Law $5000 in paper products. And so, this Works_With table is able to define how \nmuch an employee has sold to a client. And you'll notice over here \nwe have a composite key. And the composite key \nis employee ID and client ID. And this is actually a special type of composite key  because both of these columns \nare actually foreign keys. So, employee ID is a foreign key, right? It relates to the employee table. Client ID is also a foreign key. It relates to the client table. And both of those foreign keys together \nmakes up the primary key of the table. And that is actually a very useful way \nto define a primary key. Because when we do something like this, \nwe can define a relationship, right? So, I can define how much product \nthe client has bought from the employee. And that is something that can \nbecause were useful to keep track of. So, as you can see, like these tables can either \nbe very simple or they can be very complex. And the more complex your database design \nor your database schema is,  the more complex these tables \nand these keys are going to have to be, right? So, this employee table has a primary key \nand two foreign keys. The client table has a primary key and a foreign key. This Works_With table has a composite key. You know what I mean? Both of which are foreign keys. Like it can get very complex, but we can use \nthe primary keys and the foreign keys  in order to define different relationships. But really, that is just a, you know, I think a pretty \ngood introduction into kind of how tables work. We talked about rows and columns. We talked about primary keys. We talked about surrogate keys and natural keys. You know, the different types of keys \nthat might map to the real world or not. We talked about foreign keys. We talked about composite keys. And I kind of showed you guys a few different \nexamples of ways that things might work. So, this would be like our company database. And obviously, we would have \na lot more information in here. But this is kind of a good example of \nhow we might define different tables  and then define the relationships between \nthose tables in a relational database. [SQL Basics] In this tutorial I\u2019m going to walk you guys through SQL \nwhich stands for Structured Query Language. So, SQL is a term that you're going to hear \nthrown around all the time  when you're talking about databases. And SQL actually is a language. And it\u2019s a language that\u2019s used for interacting with \nrelational database management systems. So, SQL is \u2013 it\u2019s similar to \u2013\n kind of like a programming language. A lot of times you\u2019ll hear people refer to SQL \nas a programming language. It\u2019s not technically a programming language \nin the tradition sense. Although, you can use SQL to provide instructions \nto a relational database management system. So, I guess if you want, you could call it \na programming language. So, like I said, SQL, it\u2019s a language that\u2019s used  for interacting with relational database \nmanagement systems. A relational database management system \nis a piece of software. It\u2019s a software application that you can use to create \nand maintain a relational database. You might use a relational database \nmanagement system  to create a database for an application \nthat you're building. And then that relational database \nmanagement system  can make sure that the database \nis structured correctly  and store everything the way \nthat it needs to be stored. So, in order to interact with a relational \ndatabase management system,  we need to use a special language. So, I can\u2019t just talk to it in English. I can\u2019t just be like, \u201cHey, relational database \nmanagement system,  get me this piece of information.\u201d Relational database management systems \ndon\u2019t speak English. But what they do speak is a language called SQL. They speak Structured Query Language. And so, if we want to ask a relational database \nmanagement system to do something for us,  for example, like store a piece of information \nor create a table, update a piece of information. We can ask the relational database management \nsystem to do that using SQL. So, SQL is the language that we can use to \ncommunicate with the database management system. And, you know, we can use SQL to get the relational \ndatabase management system to do stuff for us,  like create, retrieve, update, and delete data. Create and manage different databases. Design and create database tables. So, we can define like a database schema \nwhich would just be like the overall like table design. And perform administrative tasks. So, things like security. We could do like user management, importing, \nexporting, backup, all that stuff. So, SQL can be used to tell the relational database \nmanagement system to do all of that stuff for us. Now, here\u2019s the thing, SQL implementation \ncan vary between the systems. So, SQL, the actual language actually does \nhave a formal specification. So, there is like an overall formal specification \nwhich defines, you know, how SQL needs to be used  and all the different commands that can be used. But the problem is that there\u2019s a bunch of these \nrelational database management system. Some of the popular ones we hear about, like \nPostegres, MySQL, Oracle, Microsoft SQL Server. Like all of these relational database \nmanagement systems  are going implement SQL just a little bit differently. So, you could write SQL code that would work on \none relational database management system,  but then if you tried to use it on another one, \nit might not work 100%. Now, for the most part, everything \nshould be the same,  but you might just need to tweak \na couple little things. So, one thing you want to keep in mind with SQL  is that, you know, SQL is used on all of the major \nrelationship database management systems,  but it\u2019s used slightly differently. So, certain instructions might work \non one database management system  and they might not work on another, or vice versa. Or you might do things just \na little bit differently, depending. But for the most part, they\u2019re all implementing SQL \nwhich means it\u2019s all basically the same. So, the concepts are the same \nbut the implementation may vary just a little bit. So, let\u2019s talk a little bit more about SQL. It\u2019s actually a hybrid language. So, it\u2019s basically four types of languages in one. And you know, you don\u2019t need to \nworry too much about all this stuff,  but you are going to hear people talking \nabout these different aspects of SQL. And so, I want to introduce them to you \nso you understand what they are. So, SQL, you know like I said, it\u2019s four types of \nlanguages all mashed into one single language. So, SQL is a data query language, which means it can\n be used to query the database for information. So, you can write queries in SQL which tell the \nrelational database management system  what pieces of information \nthat you want to get from the database. And so, a data query language is used to get data \nthat\u2019s already stored in the database. SQL is also a data definition language. And what that means is you can use \nSQL to define database schemas. Now, a schema is basically just like the \noverall layout of the database. Like what tables are going to be in the database, \nwhat columns those tables are going to have,  and the data types that those columns \nare going to be able to store. So, we can use SQL to define data in the different, \nlike I said, database schemas. SQL is also a data control language which means  it\u2019s used for controlling access \nto the data in the database. Basically, you can use it to configure \nlike users and permissions. So, I could define a bunch of different users \nfor the database. And I can say like, okay, \nthis user can write to this table. Or this user can read information from this table. Or this user can update \nand delete information from this table. So, you can use SQL to control the access to the data. And SQL is also a data manipulation language. So, it\u2019s used for inserting, updating, \nand deleting data from the database. So, these are the four different types \nof things that you can do with SQL. And you'll hear people using these terms kind of a lot. And even like database management systems \nmight throw error messages or certain things. And they'll say like data query language \nor data definition language. So, it is good to just understand these \ndifferent types of things that SQL can do  and how they're broken up into these four \nlike broad types of languages. But basically, the whole point of this slide \nis that SQL can do a bunch of stuff. And it\u2019s super powerful. And that\u2019s one of the reasons why it\u2019s used in \nall these relational database management systems. So, now let\u2019s talk about queries. And one of the things that we're going to be \ndoing a done of in this course,  and you know, if you\u2019re working with databases, \nyou\u2019re going to be doing this all the time,  which is querying. So, query is a set of instructions given to the \nrelational database management system  generally written in SQL, that tell the RDBMS \nwhat information you want it to retrieve for you. So, if you have a database that has like millions \nor billions of records in it, like there\u2019s tons of data. And a lot of times that data is, you know, \nspread out across different tables, right? It\u2019s sort of hidden in this complex schema. You know what I mean? Like you have one piece of information \nstored over here  and then another piece over here, \nanother piece over here in different tables. And you want to kind of grab all that information \nand organize it in a specific way. We can use queries in order to tell \nthe RDBMS to do that for us. So, the goal of writing a query is that we only want \nto get the information that we need, right? Imagine that if you, you know, \nevery time you wanted a piece of information  from the database you had to grab all of the \ninformation in the database, parse through it,  and then find the information that you want. We don\u2019t have to do that. Instead, you can write a query which will tell the \nRDBMS exactly what piece of information you want  and it\u2019ll be able to grab just that information \nand send it back to you. So, over here I just have a little example of a query. So, this would be like maybe we're trying to get \u2013 \nthis would be SELECT employee.name, employee.age. So, select the employee\u2019s name and the age \nfrom the employee table  where the employee\u2019s salary is greater than $30,000. So, what this will do is it\u2019ll give us every employee \nin an employee table  who makes more than $30,000, right? That\u2019s kind of like a general query. Don\u2019t worry too much about specifically \nwhat all this stuff means. We're going to get into that in this course. But that\u2019s kind of like what a query would look like. We're telling the RDBMS what information we want \nand then it only gives us back that information. Not like all the information in the database. All right, so that is kind of an overview of SQL. I mean obviously I didn\u2019t get into everything. We're going to look at all of these, you know, \nlittle specific things  that we can do with SQL as we go forward. But for now, that should kind of give you \nan idea of what SQL is, why it\u2019s useful,  and you know, sort of what it\u2019s doing for us \nand how we can use it to work with our databases. [MySQL Windows Installation] In this tutorial I\u2019m going to show you guys \nhow to download  and install two things that we're going\n to need going forward in this course. The first thing and the most important \nis called MySQL. And MySQL is a RDBMS. Which basically means it\u2019s a software application  which we can use to maintain and create \nand do all that sort of stuff with databases. And so, when we have MySQL \ninstalled on our computer,  we can actually set up what\u2019s called \na MySQL database server. And that would basically be a server \nwhere MySQL is running. And then we can write SQL in \nall sorts of queries and instructions  in order to create \nand do all sorts of stuff with databases. So, the first thing we'll do is download \nand install MySQL. And the second thing we're going to do \nis we're going to install another program  which is called PopSQL, or PopSQL. And it\u2019s basically a program \nthat I\u2019m going to be using in this course  in order to kind of like write all of my queries. It\u2019s essentially a text editor. But it\u2019s a text editor that can hook up \nwith our MySQL database. And it\u2019ll just be a really easy interface \nand a really easy way for us to write queries  and get the information back. So, I\u2019m going to show you guys how to download \nand install both of those things. The first thing we want to do is open our browser \nand we're going to install MySQL. So, you just want to come up here  and you're just going to search in Google \nfor MySQL community server. So MySQL community server is this first link \nright here. It\u2019s just dev.MySQL.com. And this is actually a free \nand opensource piece of software. It\u2019s basically like the most basic version of MySQL. And it\u2019s the version that we're going to be using. So, if you\u2019re a beginner, \nthis is probably what you want to go for. It\u2019s kind of just like a great environment \nfor you to learn in. It\u2019s pretty simple. So, down here you have a couple different options. You can download just like a zip \nor you can download the actual installer. So, you\u2019ll see over here there\u2019s \nthis option for the MySQL installer. So, you\u2019re going to go ahead and click on that. And then that\u2019ll bring you to this menu over here. And you can see here\u2019s the MSI installer. So, we're just going to go ahead and download that. And it brings you to this page. It\u2019s asking you to like log in or sign up, \nbut you can just click No Thanks down here. And it\u2019ll go ahead and start the download. So, this installer is really great \nbecause it will kind of configure everything for us  and it\u2019ll allow us to pick and choose what MySQL \nproducts that we want to actually download. So, let\u2019s go ahead and accept the license \nand I\u2019m going to click Next now. Here we have a couple options \nfor how we want to set this up. You can see you can just do like Developer, \nDefault, Server only, Client only. What we want to do is \u2013 \nactually, we're going to do a custom install. Now, here\u2019s the thing, if you want, \nyou can just do the developer default. But that\u2019s going to install a bunch of stuff \nthat we're not actually going to be using. Or at least that I\u2019m not going to be using \nin this course. So, I\u2019m going to ahead and click custom \nbecause I only need to install a couple things. So, the first thing we\u2019ll do is come down here \nto MySQL Servers  and I\u2019m just going to click MySQL server 5,700 right here. And I\u2019m going to go ahead and add that over here \nto the right side. And then I\u2019m going to come down here \nto applications. And I\u2019m going to come down here to MySQL Shell. And I\u2019m going to do the same thing. So, I\u2019m just going to click down here to MySQL shell. I\u2019m doing the 64 bit version. I\u2019m going to add that over here. So, these are the only two things \nthat I\u2019m really going to be using for this course. But if you want, you can download everything. That way, you just have it. So, I\u2019m going to click Next. I\u2019m going to click Execute. And this is going to go ahead \nand install both of those things for us. So, now you can see they\u2019re downloading. And this shouldn't take too long. They should be downloaded pretty quickly. And then we'll be able to move on. All right, once those two things are finished \ndownloading, then we can just click next. And we can also just click next through here. And you\u2019ll see it\u2019s asking us what we want. I\u2019m just going to click standalone, \nMySQL Server, Classic, MySQL Replication. That\u2019s all we need. And you can just leave all of this stuff, \nall this Type and Networking stuff as the default. And then over here, it\u2019s asking us to create \na root password. So, whenever we're using this MySQL database server, \nwe're going to have to log into it using an account. So, there\u2019s already a default admin account \nset up for us which is called Root. But we're going to have to give this a password. So, I\u2019m just going to type in password \nas the password. And again, down here. So, make sure that you remember what this password \nis because we're actually going to need it later. And if you want, you can add additional users. I\u2019m not going to do that. So, then we can just click Next. And you'll see there\u2019s an option here. It says Start the MySQL Server at system start-up. And if you want, MySQL to start whenever \nyou start-up the system  you can go ahead and keep that checked. And then I\u2019m just going to click Next. And click Next. And just click Execute. So, this is going to go through and do a bunch of stuff \nthat we need to do to get this set up. So, you'll notice that it\u2019s actually, you know, \nnot super trivial for us to set this up. I mean obviously the installer makes it really easy. But MySQL is a complex program. And that\u2019s why there\u2019s all these little things \nthat we have to keep configuring. But we're almost done \nand then we'll be able to move on. So, now that everything is finished configuring, \nwe can just click finish and I\u2019m going to click Next. And we can just click Finish. All right, so once we've finished installing everything,  now what we need to do is we're going to actually \ncreate a database that we can use. So, I\u2019m going to come over here and we're just going \nto come over here into the Start Menu. And you\u2019ll see there\u2019s this option here, \nMySQL 5,700 command line client. So, we're going to actually go ahead and use that. And what this will do when I open it up, \nyou\u2019ll see it says Enter Password. So, I\u2019m just going to enter in that password \nthat I created. In my case, it was just password. And you'll see here we're actually logged in. So, now we're connected to that MySQL server \nthat is running on our computer. So, from in here, what we can actually do \nis create a database. So, I\u2019m just going to say create database. And I\u2019m going to give it a name. So, I\u2019m going to call it giraffe. And then I\u2019m going to type a semicolon. So, what this will do, is it\u2019ll create a database \nfor us called giraffe. Now remember, MySQL is a database \nmanagement system  which means it\u2019s an application or a software program \nthat\u2019s designed to help us manage various databases. So, in order to start building a database, \nwe need to create one. So, I\u2019m just going to say create database giraffe. I\u2019ll hit enter. And this is going to go ahead and create \nthat database for us. So, now we've created this database, \nwe're kind of ready to go. So, for the rest of the course, what I\u2019m going to be \ndoing is teaching you guys like SQL commands. So, we're going to be learning \nall about this SQL language  which is used to interact with MySQL \nand other database management systems. Now, if you want, you can do everything \nthat I\u2019m doing for the rest of the course  here inside of this terminal. So, inside of this little terminal window you can \nbasically do everything that I\u2019m doing. You can type in SQL like this up here. Create database. That\u2019s all valid SQL. But I\u2019m actually going to be using a different program \nwhich is called PopSQL. And that program just makes it a lot easier \nfor us to visualize what\u2019s going on. It\u2019s not like some kind of boring terminal window. So, that\u2019s basically a text editor \nwhich will connect to our database server  and we'll be able to write our SQL \nfrom inside of there. So, I\u2019m going to show you guys real quick \nhow to download that. You\u2019re just going to come up here. I\u2019ll make a new tab. And we're going to come up to the search bar \nand just type in P-O-P S-Q-L, PopSQL. And you'll see this link here, PopSQL.io. So, we're just going to click that. So, here there should be an option \nto download for Windows  so we can just click on that \nand that\u2019ll start downloading it for us. So, PopSQL is cool. Actually, it\u2019s kind of like Google Docs \nbut for writing SQL queries. Now, we're not going to be using that functionality. We're just going to be using it as a text editor. But it\u2019s a great way for us to visualize \nlike the SQL queries that we're writing  and then also like what gets returned \nfrom those queries and stuff like that. So, once that\u2019s done downloading, we can just click on \nit and we're going to go ahead and run the installer. When that\u2019s done installing, \nit should open up right away. And you\u2019ll see we have to sign in. So, you can either create \nan account just with Google  or you can create an account with your email, \nbut you have to sign in in order to use it. So, I\u2019m going to go ahead and sign in. And you\u2019ll see it says, \u201cWelcome, Mike.\u201d So, we're able to sign in. And I\u2019ll open the app. So, now that we have the app open, \nwhat it\u2019s asking us to do is connect to a database. So, remember, we set up our MySQL database server \nand we created a database. So, what we can do now is we can connect \nto that database from inside of PopSQL. So, over here, it\u2019s just asking us to type in our \nnickname, so I\u2019m just going to type in Giraffe. And the type, if you click down, \nyou\u2019ll see we have MySQL right there. Host name \u2013 so the host name \nis actually going to be localhost. And that just refers to like the local address \nof the computer that you're currently on. Port is going to be 3306. Assuming that you used all the defaults \nwhen you're installing MySQL,  then that should be the port number. And then finally down here, the database \nwe want to connect to was called giraffe. So, that\u2019s what I named it. If you named it different from giraffe, \nbut in the name there. And then username is going to be root and the \npassword is going to be the password that you set up. So, in my case it was just password. So, once all that information is in, \nwe can just click connect,  and you'll see it\u2019s connected us to our database. So, now we basically have a text editor \nthat we can use,  which is hooked up to our database so we can write \nall of our SQL code, all of our SQL queries in here. And it\u2019ll actually get run \non our MySQL database server. So, now everything is set up. And we're ready to go off \nand learn some awesome SQL commands. Now, I realize that this was kind of \nlike a little bit of a complex setup. Unfortunately, that\u2019s just unavoidable  because database management systems are, \nby nature, you know, complex programs. I mean this isn\u2019t \u2013 they\u2019re not designed to be like \nextremely user friendly, so. But now we're ready to go and everything is set up. [MySQL Mac Installation] In this tutorial I\u2019m going to show you guys \nhow to download and install two things  that we're going to need going forward in this course. Now, the first thing we're going to download \nand install and the most important is MySQL. And MySQL is a relational database \nmanagement system. And it\u2019s actually one of the most popular relational \ndatabase management systems around. And a lot of people use MySQL \nas they're first sort of dip  or they're first dive into \na database management system. So, for that reason, I\u2019ve picked MySQL as the \nrelational database management system  that we're going to use in order to learn SQL. Now it\u2019s important to note that the focus of this \ncourse isn\u2019t so much on MySQL as it is on SQL. So, SQL is Structured Query Language. It\u2019s an actual language. And MySQL is a relationship database \nmanagement system. So, we're going to be using MySQL \nin order to kind of learn about  and use and learn all the most \ncommon stuff with SQL. The second thing we're going to install in addition \nto MySQL is actually going to be optional. You don\u2019t have to install it, \nbut it\u2019s going to be a text editor  that we can use in order to \nwrite our SQL commands. So, it\u2019s called PopSQL. And it\u2019s an awesome program which basically allows \nyou to write out SQL statements. And then you can execute them \nfrom inside the program  and it\u2019ll show you all the results that you get back. So, I\u2019m going to be using PopSQL in order to kind of \nvisualize everything that we're doing  and just make it a lot easier for you guys \nto follow along. So, I\u2019m going to show you guys how to download \nboth those things so you can follow along with me. First thing we're going to do is head over to our \nbrowser and we're going to install MySQL. So, you just want to type in MySQL community server. And we're just going to type that in to Google. And then down here, this should pop up. It\u2019s just download MySQL Community Server \nfrom dev.MySQL.com. So, MySQL Community Server is a free and \nopensource version of MySQL that anybody can use. And if you\u2019re just starting off and learning about \nSQL and learning about databases,  then this is a great starting point. And then all we have to do down here is scroll down  and you\u2019re going to see that \nthere\u2019s a couple different options here. Basically, what we want to download \nis the DMG Archive. So, it\u2019s just this first one right here. So, I'm just going to go ahead and click Download. And that\u2019s going to start downloading for us. Now, it brings you to this page. It\u2019s kind of asking you to log in or sign up, \nbut you don\u2019t have to. You can just click No thanks, just start my download. And then it\u2019ll start the download for you. So, this is \u2013 it\u2019s probably around like 400 megabytes. It\u2019s not too too big of a file, \nbut it\u2019s also not like a super small file. You\u2019re probably going to need at least over \na gigabyte of storage on your computer  to hold everything that SQL is going to need. All right, once that is finished downloading, \nthen we can just click on it  and we're going to go ahead and install MySQL \nonto the computer. All right, so here we just have this like PKG. So, I'm just going to double click on this. And it\u2019ll open up this installer. So, we're just going to click through. And you can basically just leave everything \nas the default. Just keep it in the default install location \nand it\u2019s asking me for my password. All right. So once that is done running the installer, \nthis window right here is going to pop up. It says, MySQL Installer. It\u2019s giving me this date. And it says \u201cA temporary password \nis generated for root@localhost.\u201d Now, when we're using MySQL  we\u2019re actually going to have to \nlog into the SQL server using a username and password. And in order to log in, you\u2019re actually going \nto need this temporary password  that they provide for you right now. Now, it\u2019s root@localhost. So, root is the actual username \nthat we're going to use to login. Localhost is going to be address of the SQL server \nthat\u2019s running on our computer. And then this is going to be \nlike a temporary password. So, what you want to do is just copy this. You want to make sure that you keep this. So, what you could do, is you could \njust click Command+Shift+4. And you'll see this little like thing comes up. If you just drag around here, \nthat\u2019s going to screenshot this for you. And so, now we'll have a picture of this \non your desktop. Point is, is you don\u2019t want to lose this. So you want to make sure that you have this \ntemporary password accessible. If you don\u2019t, then it\u2019s going to be a problem because \nyou're not going to be able to get into the account. So, make sure that you record that. And then I\u2019m just going to click Okay \nand then we're done here, so we can close it. And I\u2019ll move it to trash. All right, so once we've installed MySQL, \nnow what I want to do is set up our MySQL server  which basically means that we're going to be running \nMySQL on our computer. Now the way this works is MySQL is a relational \ndatabase management system. And it\u2019s basically going to act as like \na little database server for us. And so, we can connect to MySQL. We can login and then we can \nmanage the database from there. So, we need to make sure that the MySQL server \nis started on our computer. So, I\u2019m just going to come up here to the search bar. And I\u2019m just going to search for System Preferences. And then down here there should be \nthis little icon for MySQL. So, we're just going to click on that. And you\u2019ll see it\u2019s going to open up \nthis window over here. So, it says, \u201cMySQL Server Status. The MySQL Database Server is currently stopped.\u201d So, what we want to do is start it. And I\u2019m going to put my password in. And then if you want, you can have it automatically \nstart when you open your computer. It says, \u201cAutomatically start MySQL Server \non Startup.\u201d If you want to do that, you can. You don\u2019t have to. So, basically, now a MySQL database server \nis running on our computer. And what we can do now is we can connect \nto that database server  and we can log in and then we can \nstart creating our databases  and creating all of our tables and stuff like that. So, now that this is set up, \nthere\u2019s actually a couple things that we have to do. The first thing I want to do is update our password. So, we were given that temporary password. So, I'm going to open up the terminal. And you can just go over here to the search bar \nand type in terminal. And that\u2019ll open this guy up right here. So, from in here, we need to start configuring \na couple different things. First thing we need to do is get this terminal \nto recognize the MySQL command. So, if I come over here and I try to type in MySQL, \nyou\u2019ll notice that it says command not found. Basically, our Mac doesn\u2019t know about this MySQL \ncommand because we haven\u2019t told it where it is. So, there\u2019s a couple things that we have to do \nin order to get this MySQL command to work. So, all we have to do is basically just tell \nour computer where we installed MySQL. So, what I\u2019m going to do, \nis I\u2019m just going to type this over here  and you guys can type exactly what I\u2019m typing. Echo single-quote, export PATH in all caps \nis equal to /usr/local/mysql/bin. And then you\u2019re going to type a colon$PATH \nin all caps. Just like that. And then you're going to end off the quotation mark. So, you\u2019re going to do single-quote. And then two greater than signs. And we're just going to say ~ \nwhich is this little tilde character. /.bash_profile. So, what this is doing is it\u2019s actually adding this line \ninside of this file called .bash_profile. Basically, what this will do is it\u2019ll make it so we can use \nthat MySQL whenever we want inside the terminal. So, I'm just going to hit Enter. And then I\u2019m just going to .tilde/.bash_profile. This will kind of reload that file. And now what you want to do is type in MySQL. And we'll see if this works. So, you notice now when I type in MySQL, \ninstead of saying the command wasn\u2019t found,  we got this error message that says,  \u201cAccess denied for user \u2018giraffeacademy\u2019@\u2019localhost\u2019 \n(using password:  NO). What this means is that \nthe MySQL command is now working. So, basically we're able to give commands to MySQL. We're able to do stuff like that. So, I\u2019m just going to clear this out. And now what we want to do is we want to \nactually connect to the MySQL server  that\u2019s running and we want to log in. So, I can just type MySQL just like that. And you're going to type hyphen u. And you're just going to type root. And then you\u2019re going to type hyphen p \nand your going to hit enter. And this is going to ask you to enter a password. And so, now is the time where we want to \nenter in that temporary password. So, in my case, I took a screenshot of it. So, that screenshot is now going to be stored \non my desktop. It\u2019s over here. And so, what I can do is I can just look at this \nscreenshot now and I can type in the password. So, I'm going to go ahead and type in that password. All right, so now that I\u2019ve typed in that password, \nI was able to log in. So, basically now we are logged into the SQL server,  or to the MySQL server that is running \non our local computer. So, what we can do now is we can actually\n change that temporary password. So, I\u2019m just going to type in the following command. ALTER.\nSo ALTER USER. And then I\u2019m just going to type in \u2018root\u2019@\u2019localhost\u2019. And you'll notice that I have single quotes around \nroot and single quotes around local host. So, then I\u2019m going to type in identified by \u2013 \nso I\u2019m just going to type in a new password. I\u2019m just going to set it as password just \nso it\u2019s easy to remember. And then you're going to type a semicolon. And now you want to hit enter. And so, what that\u2019s going to do, \nis its going to update your user information. So, now you can actually login using something \nother than that temporary password. So, you'll be able to login using the password \nthat we set over here. So, now what we want to do is just make sure \nthat everything works. So, I\u2019m going to type in exit. Just like that. And I\u2019m going to clear this out. And now what we want to do is try to log in again. So, I\u2019m going to say MySQL-the root -p. And this time I'm going to enter in the new password \nwhich was password. And you\u2019ll see that I\u2019m able to login. So, as long as that worked and you\u2019re able to log in,  then you updated your password, \nso now you're going to be able to get in, no problem. So, the next thing I want to do really quick \nis we're actually going to create a database. So, MySQL is a database management system. So, what it allows you to do is manage \nand keep track of different databases  and the information that are in those databases. So, what we want to do before we can actually get \nstarted is we want to create an actual database, right? So, what we can do is we can just type \nout create database. And then I\u2019m just going to \nname this database giraffe, just like that. So, I\u2019m creating a database named giraffe. And you can name your database whatever you want. Generally, it\u2019s going to correspond \nto the type of data that you're storing in it. I\u2019m just going to be using this as a general purpose \ndatabase to go throughout this course. But we can just say create database giraffe. And this will create a database for us called giraffe. And then you\u2019re going to type a semicolon after that. And then you're going to click Enter. So, now we actually have a database \ncalled giraffe that we can use. All right, so once you\u2019ve done all that, \nwe're actually done here inside of the command line. Now, here\u2019s the thing. If you want, you can actually write out \nall of your SQL commands. You can do everything that I\u2019m going to be doing \nin this course here inside of this terminal. So, you can interact with the MySQL database server \njust from here inside the terminal. You can write SQL. You can give it SQL commands. You can do all sorts of stuff like that. In our case though, I\u2019m actually going to be using \nanother separate program in order to do that. And this environment, this terminal environment \nis not a very good environment  for like visualizing things and seeing things. So, there\u2019s actually another program called PopSQL \nwhich I\u2019m going to use. I\u2019m going to show you guys how to download \nthat right now. But just know that this part is optional. So, if you want, you can do everything \nfrom inside of the terminal. So, I\u2019m going to open up my web browser again. We're going to come back up here. And I\u2019m just going to do a Google search for PopSQL. And this page should pop up It\u2019s PopSQL.io. So, basically what this is, is it\u2019s a program that \nwe can use to write SQL queries and write SQL code  in order to do different things. And PopSQL actually has some really cool features. It\u2019s kind of like Google Docs \nbut for writing SQL queries. In our case though, we're just going to use it \nto write out our SQL. So, over here there should be a button \nto download it for MAC. So, I\u2019m just going to click that. And then it\u2019s going to go ahead \nand start downloading for us. Once that\u2019s downloaded, then I\u2019m just going to \nopen it up And we'll be able to run the installer. See, over here all we have to do is just drag \nthis over here to the applications folder  and then it\u2019s going to be on our computer. So, now what we want to do \nis we're going to open that up. So, I\u2019m just going to go over here to applications. And we'll scroll down to PopSQL. And we're going to open this program up. So, in order to use PopSQL \nyou're actually going to have sign in. So, you can just sign in with a Google account \nor with an email address. I\u2019m going to go ahead and sign in. So, you can see it logged me in. It says, \u201cWelcome, Mike!\u201d \nSo, now we'll go ahead and return to the app. So, now that we're logged in, what it\u2019s going to ask us \nto do right away is connect to a database. So, basically what this application is going to do  is it\u2019s going to connect to that \nMySQL database server that we have set up. So, what we can do over here \nis just give this a nickname. So, I\u2019m just going to call this Draft. And it\u2019s asking us for the type. So, over here if you scroll down \nyou'll see the first option is my MySQL. So, we'll just click MySQL. Now, it\u2019s asking us for a host name. And the host name is basically the address \nwhere this database server is located. So, in our case it\u2019s just at localhost. Just like that. So, just type in localhost. Leave the port number the same. 3306 is going to be the default port number. And then the database we're going to connect to \nis named giraffe. So, if you remember, like a minute ago \nwe created that giraffe database. That\u2019s what you want to put in here. So, if you named it something other than giraffe, \nput that name in here. And then we need a username. So, the username is going to be root. And then the password which they're asking for down \nhere is going to be the password that you set up. So, in my case, it was just password like that. And then I\u2019m just going to click Connect. And this is going to go ahead \nand connect us to the database. So, at this point we installed MySQL. We set up our first database. And we connected everything with PopSQL. And so, now we are able to start using PopSQL. We can start learning all sorts of SQL stuff. And it\u2019s going to be awesome. But keep in mind, if you don\u2019t want to use PopSQL, \nwhich I honestly would recommend using it. You can do everything from inside the terminal here. [Creating Tables] In this tutorial I\u2019m going to \ntalk to you guys about datatypes. We're going to talk about creating tables. We're also going to talk about \naltering and deleting tables. So, in the last tutorial we set everything up. So, we got MySQL set up. We also downloaded this program PopSQL  which is basically just a text editor that we can use \nto write all of our SQL code and all that stuff. So, what I want to do in this tutorial \nis show you guys how to create tables, right? So, we created a database. In our case, we created a database \nnamed giraffe in the last tutorial. And now what I want to do is start populating \nthat database with different tables. In other words, I want to start defining \nour database schema. Now whenever you're working with \na relational database management system,  your first step is always to create tables. So, before we can start inserting any information, \nbefore we can start querying for information,  we actually have to create the physical tables \ninside of our database. And we can do that by defining the tables layout. And so, what we want to do is we basically want to \nuse a SQL command which is called Create Table. And then inside of that command \nwe can pass in all the different attributes  or all the different columns \nthat we want our table to have. And so, the first thing I want to show you guys \nis the different types of data  that we can store inside of our database. So, over here I actually just have a little list. And I\u2019m just going to paste it in here. So, these are all of the basic data types \nthat we're going to be using in SQL. Now, these aren\u2019t all of the datatypes. There are actually tons of datatypes. And depending on the relational database \nmanagement system that you're using,  a lot of them have different datatypes \nto do different things. I would say that these six datatypes \nright here make up like the core SQL datatypes. Like these are probably the most \ncommon datatypes that you're going to see. But just keep in mind that there are a few others. Now, we're using the MySQL database. And all of these datatypes are going to be able to be \nused in the MySQL database management system. And all of these are going to be used, for the most \npart, in any relational database management system. But like I said, specific database management systems \nwill allow you to use different datatypes  depending on how they want to implement things. So, let\u2019s go through these different datatypes \nand I\u2019ll kind of talk you guys through how to use them. So, INT. This is actually going to refer to an integer. So, anytime you see INT just like that, I-N-T, \nthat basically means any whole number, right? So, this is any sort of whole number. But it can\u2019t have decimal places after it. If you want to be able to store decimals, \nyou can use this decimal datatype. And the decimal datatype \nwill allow you to store decimals. And you'll see, we have \nthis parenthesis here after decimal. And I have M and N in here. Now these are actually both going to \nend up being numbers. So, M is going to be the total number of digits \nthat you want to store for this number. And N is going to be the number of digits \nthat you want to store after the decimal point. So, when we're working with databases you have to \nbe very specific about the different information. And specifically, the amount of digits \nthat you want to store for a number. So, what we could do is I could say like 10 here \nand I could put a 4 over here. And what this means is we want to store\n a decimal number with 10 total digits  and 4 of those digits coming after the decimal place. So, you can specify, you know, depending on how \naccurate you want these numbers to be stored,  you can modify those numbers. Down here we have VARCHAR. And this actually stands for Variable Char \nor Variable Character. This is basically a way that we can store \na string of text. So, VARCHAR, we have these parenthesis after here. And you can put a number in here. So, if I put a 1 in here, then this is going to \nstore a string of text, length 1. If I put (100) in here, this is going to \nstore a string of text with 100 characters. So, that means that the maximum amount \nof characters  that you can store inside of a VARCHAR(100) \nwould be 100. Down here we have BLOB \nwhich stands for Binary Large Object. And this is basically just a structure \nthat can store large amounts of binary data. So, if you have \u2013 a lot of people will use these \nfor like images or files. Like you can store those inside of a BLOB. And they'll be able to be stored in the database. We also have DATE. So, DATE will be like a specific date and time. And you can see we format a date like YYYY-MM-DD. So, this would be the year, the 2-digit month, \nand then the 2-digit day. You can also have a TIMESTAMP, \nwhich is similar to date,  but it\u2019s generally used for recording \nlike when things happen. So, you can record like when an item got inserted \ninto the database or something like that. So, over here it\u2019s just YYYY-MM-DD \nand then we have the hours, minutes, and the seconds. So, those are all, like I said, the main datatypes \nthat you're going to be using. But these aren\u2019t all the datatypes. So, depending on the database management system \nthat you're using,  you want to check to see \nwhat specific datatypes they offer. But like I said, for the most part, \nthese should work in just about any system. So, now I want to talk to you guys \nabout creating database tables. So, what we can actually do is we can create tables  and we're going to have use those datatypes to tell \nthe relational database management system  what types of data we want to store \nin each column in the table. So, in order to create a table, \nwe're actually going to type out some SQL. Now, I\u2019m just going to type out CREATE TABLE. And these are two SQL reserve words. CREATE and TABLE. And you'll notice that I typed them \nin all capital letters. Now, this is actually a pretty common convention \nwhen writing SQL queries. A lot of people will write these reserve words \nin SQL in all capitals. But you don\u2019t have to. If I wanted, I could write create table just like that. And you\u2019ll see it\u2019s getting highlighted the same way. The reason that people write these in all caps is  because then it\u2019s easy to distinguish the SQL \nfrom any other text that we might be writing. So, I would say for the most part, just stick with \nmaking these all uppercase and you should be fine. So, I\u2019m going to say CREATE TABLE. And then I want to type in the name of the table \nthat I want to create. So, what we're going to do is we're going to \nactually create a database table. So, I actually have a database table set up over here. You'll see it\u2019s a student table. And it\u2019s storing just a list of students \nfor like maybe in a college or university. So, there\u2019s three things that we're storing \nabout this student. The student\u2019s ID, the student\u2019s name, \nand the student\u2019s major. So, we're storing all of this information \nabout this student. So, what I can do now is I can actually create \nthis exact table inside of my database. So, I can say CREATE TABLE. We'll call it student. And you'll notice that I made this lowercase. So, this isn\u2019t an SQL reserve word, \nso I\u2019m not going to make it uppercase. And then what I can do is I can just make an open \nand closes parenthesis and a semicolon. Now, any command that you write in SQL \nis always going to end with a semicolon. And if you're just starting out, \nyou might forget to put that semicolon in there,  but you want to make sure that you always \nput it in there otherwise it\u2019s not valid SQL. So, I\u2019m just going to click Enter. And I\u2019m going to down here \nin-between these parenthesis. And what I\u2019m going to is I\u2019m going to start defining \nthe different columns  or the different attributes on this table. So, what we can do is we can define a column name \nand then a column datatype. So, I can come over here \nand I can say the first attribute. So, in my case, the first attribute for this table \nis going to be student ID. And you'll also notice that student ID is a primary key. So, on this table, student ID is the primary key. Meaning it\u2019s the column on the table \nwhich will uniquely identify the specific row. So, I'm just going to call this student_id. And now I need to give this a datatype. So, I\u2019m going to give this a datatype of INT because all \nof these ID\u2019s as you can see, are integers, right? They\u2019re just integer numbers. Now because this is going to be the primary key \nfor this table, I need to denote that. So, over here I can just say PRIMARY KEY, \njust like that. And what that\u2019s going to do is it\u2019s going to tell MySQL \nthat this is going to be the primary key for the table. The next thing we want to store is the student\u2019s name. So, I\u2019m just going to say name. And the name is actually going to be a string. So, this could be like Jack or Tommy or Kara, right? It\u2019s a name that we're storing about this table. So, over here I\u2019m going to make this a VARCHAR. And then I\u2019m going to make an open \nand closed parenthesis. Now, remember, with the VARCHAR datatype \nwe have to tell MySQL  how many characters we want this to be able to store. So, with someone\u2019s name, what you want to do  is you basically just want to think like how many \ncharacters do we really want to allocate  to storing someone\u2019s name? Because here\u2019s the thing, if I allocated like 1000 \ncharacters for someone\u2019s name,  will in reality, normal people don\u2019t have a name \nwith 1000 characters, right? I mean maybe your name would be 20 characters \nor 30 if you're really pushing it,  but 1000 is just totally out of the bounds of reality. And you have to think if you're storing \nlike millions of names,  potentially, you know, allocating 1000 characters \nto each name when you only need 20  is going to take up a lot of extra space \nin your database. So, I think what we should do is maybe say like 20. So, let\u2019s say that the maximum length of someone\u2019s \nname we want to store is going to be 20 characters. And really, you know, depending on the domain \nof the application that you're building,  that\u2019s going to be different. But in my case, let\u2019s just say it\u2019s 20. And then finally we wanted to store \nthe student\u2019s major. So, I can say over here, major. And this is also going to be a VARCHAR. So, why don\u2019t we also allocate 20 characters \nto their major. And that should be enough. So, you'll notice that I\u2019m defining each of the \nattributes, each of the columns on the table. And then I\u2019m putting a comma. And then I\u2019m defining the next column. And then I\u2019m putting a comma. And then the final column. So, this right here, this CREATE TABLE statement is  basically going to create \nthis table over here for us, right? We have the primary key, which is an INT. And we have a name and a major which are strings. So, that\u2019s going to go ahead and do that for us. Now, from inside PopSQL, what\u2019s really cool \nis we can just click on this query right here. Click on this SQL statement. And I can come over here and click Run. And what this will do is it\u2019ll automatically \nrun this SQL on our MySQL server. So, I'm going to click Run. And you'll see over here we get a success message \nthat says Rows affected:  0. So, that actually was able to create \nthat new table in our database. So, that is basically how we could create a table. And now we have this table stored in our database. I want to show you guys another thing we can do. So, over here I\u2019m defining the primary key. So, student_id was the primary key, right? It\u2019s the one column that\u2019s going to uniquely \nidentify each row. And if you want, you can put primary key over here \nafter like student_id. Or what you can do is you can get rid of this \nand you can define this down below. So, instead of defining the primary key up here \nnext to student_id,  I can come down here and I could change it. So, I could say now PRIMARY KEY, \nand then I can make an open and closed parenthesis. And in here, I could put the name of the column \nthat I want to be the primary key. So, in my case, I\u2019ll just say student_id. So, now what this is system is that the primary key \nis going to be student_id. So, this is a equivalent to what I was doing up here. It\u2019s just another way that you can do it. And so, now we already have our table created, \nso I\u2019m not going to go ahead and create it again. All right, so now that we have \nour student table created,  let\u2019s go ahead and make sure they created correctly. So, what I\u2019m going to do \nis I\u2019m going to come down here  and I\u2019m going to type out another MySQL command. So, I\u2019m just going to type out DESCRIBE. And then I\u2019m going to type in the name of the table. So, in our case it\u2019s going to be student. And you'll notice with PopSQL, if I click over here on \nthis query, it gets highlighted in that blue color. And if I click down here on this query, \nit gets highlighted. So, what you can do with PopSQL \nis you can have like a query up here. And you can run that query or you can click \non this query down here and run it. So, I\u2019m going to click on DESCRIBE student. And then I\u2019m going click Run. So, you'll see that it\u2019s actually describing \nthe table that we just created. So, there\u2019s a list of all these different fields. We have student_id, name, and major. It\u2019s telling us the datatypes that we're storing. So, like varchar(20). And then it\u2019s telling us a bunch of other information which we're going to get into later. So, what this is, it basically described \neverything about this table. So, now what I want to show you guys \nhow to do is delete and modify a table. So, now that we've created a table \nand we saw that it got created correctly,  if you wanted, you could delete the table. So, what I could do is I can come down here \nand type out DROP TABLE  and I can just type the name of the table. So, in our case, it\u2019s the student table, and a semicolon. And now I\u2019m going to click on here and I\u2019ll click run. And what this is going to do \nis it\u2019s going to drop that table. So, now if I came up here \nand I click on describe student,  in other words, I\u2019m saying \nI want to execute this command. And I click run, you'll see that it says \n\u201cNO_SUCH_TABLE\u201d. Table \u2018giraffe.student\u2019 doesn\u2019t exist \nbecause remember, we just dropped it. So, what we can do, is we can actually create again. So, I\u2019m going to click on this CREATE TABLE query \nand I\u2019ll click Run. And that will go ahead and create it. So, now if we click DESCRIBE student, you\u2019ll see \nwe get the table back because we created it again. So, you can drop the table. You can also modify the table. So, let\u2019s say that after the table was created, \nyou wanted to give it another column. What I could do is I could add another column. So, I could say ALTER TABLE. And then say student, \nbecause that\u2019s the name of the table. And then I could say ADD. So, what this is going to do \nis it\u2019s going to add an extra column onto the table. So, why don\u2019t we add a column for GPA. So we could store a student\u2019s GPA \nand that\u2019s going to be a decimal. So, I\u2019m just going to click a semicolon. And this is going to go ahead \nand end off this command. Now, with decimal, remember I showed you \nthat you could put numbers after here, like 1 and 2. So, what we're going to do is generally a GPA \nwould be like 3. something something. Or 4. something something. So, we're going to have this be three total digits with \ntwo of the digits occurring after the decimal point. So, now I can go ahead and run this command \nand you'll see it says success down here. So, if we were to describe the student table again,  if I just click on this and click Run, now you'll see \nwe have that extra column in here, GPA. And it\u2019s a decimal (3,2). So, that is how we can drop a table \nand that\u2019s also how we can alter a specific column. If you wanted, you could also drop a specific column. So, I could say ALTER TABLE student. And over here, I can just say DROP COLUMN \nand just type in the name of the column. So, what this will do is it\u2019ll drop that GPA column \nfrom the table. So, let\u2019s go ahead and run. We get this success message. Now, if I describe the table and I clicked run, \nyou'll see that the GPA field went away. So, I actually dropped that field. So, you can create tables. We can add columns onto tables. We can remove columns from tables. And then we can just remove the table altogether. So, hopefully that show you guys some of the basics \nof doing those operations on tables. Now, obviously whenever \nyou're creating your database,  the first thing that you want to do \nis define your database schema. In other words, you want to create \nall the different tables  and then you can start inserting data \ninto the tables as such. So, in the next tutorial I'm going to talk to you guys \nabout inserting data into tables,  so we'll actually insert some student information \ninto our student table. [Inserting Data] In this tutorial, I\u2019m going to talk to you guys \nabout inserting data into a database tables. So, in the last tutorial we set up our first table \nwhich is this student table. And you can see it up here. And then down here we described the student table. So, it has student_id, name, major, etc. So, now that we have our table set up, we want to \nactually start inputting information, right? We want to start storing some different data. So, I\u2019m going to show you guys how to do that. I\u2019m going to leave this \nCREATE TABLE statement up here  because we're actually going to \ncome back to that in a sec. But down here, I\u2019m going to \nshow you guys how to insert values. So, in order to insert a piece of information into \na table, we just want to type out INSERT INTO. And now I want to type out the name of the table. So, in our case, we have this student table. And then I just want to type out VALUES. So, basically, we're saying insert \ninto the student table the values. And then over here I\u2019m going to make an open \nand closed parenthesis and a semicolon. So, now this is actually a full statement. So, remember, we need to \nend this off with a semicolon. Inside of these parenthesis I can actually \nput the information that I want to store. So, the way that the table is set up, we have the \nstudent_id first, then the name, then the major. And that's the order that we want to \nput this information into the table. So, I need to put this student_id first, \nthe name, and then the major. So, over here I\u2019m just going to type in the student ID. So, we're going to be actually entering in the same \ninformation that we have over here. So, this is kind of like our little template. So, we have the first student, Jack, \nwho\u2019s a biology major and his student ID is 1. And you can see we just keep going from there. So, I\u2019m going to insert, you know, \nroughly the same information. So, the first thing we want to do is put the student ID, \nso that\u2019s going to be 1. And you'll notice that with an integer \nI can just type out the number 1. And then over here we're going \nto put in a VARCHAR(20). So, basically this is going to be a string. Anytime we're typing out strings in SQL, \nwe're going to make these double quotation marks. And then in here we can type out the string. So, the student\u2019s name is going to be Jack. And then another comma \nand we're going to put in his major which is biology. So, we have Jack with the student ID of 1. And his major is Biology. So, insert into student values 1, Jack, Biology,  this is going to go ahead \nand insert this value into the database table. So, now when I click Run \u2013  and you'll notice all I have to do is \njust click on this query and then click Run. It says down here Success. Rows affected 1. So, we affected one row in the student table. So, now what we can do is we can actually see \nhow this got inserted into the table. So, what I\u2019m going to do is actually below here, \nI\u2019m just going to type out select asterisk from student. And this is actually a very simple SQL command. What this is going to do is it\u2019s going to \ngrab all the information from the student table. And we're actually going to spend \na whole tutorial just talking about using SELECT. But for now, just know \nyou can type SELECT * FROM student. And this is going to go ahead and give us \nall the information from the student table. So, I\u2019m just going to click on this query here \nand I\u2019ll click Run. And you'll see down here we get this table. So, it says student_id 1. Name, Jack. Major, Biology. So, so far in the student table, we have 1 student \nwhich is Jack and he\u2019s a biology major. So, why don\u2019t we actually insert another student. So, I\u2019m  going to keep this same line of code except \nnow I\u2019m going to insert a student with ID 2. And this student\u2019s name is going to be Kate. And she is going to be a sociology major. So, we have Kate who\u2019s ID is 2, sociology. So, if I click on this command here and I click Run,  this is going to go ahead and insert Kate \ninto the database. So, now I\u2019m going to click on Select All \nfrom students, or Select * from students. And we'll click Run. And now you can see we're getting \nall the information from the student table. So, we have Jack and then we also have Kate. So, we added in \u2013 so far, \nwe've inserted in 2 people into there. So, what you can do is you can basically \nuse this same format  in order to keep inserting students \ninto the student table, right? As long as you have their ID and you have their name \nand their major, then everything is good. But I want to show you guys another thing we can do. So, let\u2019s say there\u2019s a situation where \nwe had a student who didn\u2019t have a major. Maybe they just had no major or we didn\u2019t know \nwhat their major was  so we couldn't insert it into the database. Well, in a situation like that we could \nactually modify this statement a little bit. So, I could say INSERT INTO student \nand then after student here  I can make an open and closed parenthesis. And I can type out the names of the columns \nor the names of the attributes that I have  or that I want to insert. So, I can say like student_id and then name. So, you'll notice that I\u2019m not including major in here. And what that means is that over here \nin this value section,  we can include the student ID and the name. But we don\u2019t have to include the major. So, like if I don\u2019t know what the major is, \nlike I can\u2019t obviously put anything there. So, by saying student open and closed parenthesis \nand then specifying the 2 attributes that I do have,  I can then just put them over here \nand I won\u2019t get an error by not including it. So, now we can change these values. So, we'll change the primary key to three. And then let\u2019s see who the next student \nin our database is. So, it looks like it\u2019s Claire. So, we'll have Claire. And then we can go ahead and run this query. And you'll see rows affected, 1. So, we added in another row. But if I was to select all this data \u2013 so I\u2019m going to click \nSelect again and I\u2019m just going to click Run. Now you'll see that Claire\u2019s student ID is 3. Her name is Claire, but here major is NULL. So, we didn\u2019t actually enter in a major for Claire. And therefore, inside the major field, \nshe\u2019s getting a value of NULL. And that\u2019s actually pretty common. So, that\u2019s basically going to be what happens \nwhen we don\u2019t enter in something. And so, what you can do is you can specify what \npieces of information you want to insert into the table  by specifying them over here. And then here in the value section, \nyou just have to add those pieces of information. So, that\u2019s two ways that you can insert something \ninto a database table. And it\u2019s important to notice \nthat you can\u2019t insert duplicate entries. So, if I was to try to insert this again, \nyou'll see that the primary key is still 3  which means I\u2019m not going to be able to \nenter this record in  because a record with that primary key \nalready exists inside the table. So, if I was to click Run again, \nyou'll see I'm getting this error. It says Duplicate Entry \u20183\u2019 for key \u2018PRIMARY\u2019. Basically, what that means is we have a duplicate key \nand it\u2019s not going to work. But if I was to change this to 4. So, instead of having an ID of 3, it\u2019s 4. Now, this is going to work. And we'll be able to see we have \ntwo entries with Claire,  but they have different student ID\u2019s \nso we're all good to go. So, that is the basics of inserting stuff into a table. And really, those two techniques are really useful. So, that\u2019s kind of the basics of inserting into a table. Now, there\u2019s a lot of more things \nwe can get into with this. And in the next tutorial, I\u2019m going to show \nyou guys some other stuff that we can do  in order to make inserting into the tables a lot easier. [C] In this tutorial I\u2019m going to talk to you guys some \nmore about inserting information into a database. So, in the last tutorial we kind of looked at \nthe basics of inserting information. So, we have our table here. It\u2019s the student table. And down here we kind of looked at \nhow we can insert information. So, we can insert into the name of the table, \nand then values. And we can pass in the values. We can also say insert into the name of the table. And then over here we could specify \nwhat information we want to insert. And then here in the values \nwe just insert that information. So, we've kind of been using this photo over here of \nthis like, you know, student database. And I actually just went ahead \nand wrote out all the code  for inserting all of these different students \ninto the database. So, you'll see we're inserting Jack \nwho\u2019s a biology major. Kate, sociology. Claire, who doesn\u2019t have a major. There\u2019s another one name Jack \nwho\u2019s also a biology major. But you'll notice that it has a \ndifferent primary key than this guy up here. And then there\u2019s Mike who\u2019s computer science. So, these instructions will actually insert \neach of those students into our database. And you'll see over here \nwhen I run this Select * FROM command. So, with PopSQL, if you just click on the SQL statement  and then you click Run, it\u2019ll go ahead \nand run it for you. So, you'll see down here we get all that information. So, there database is set up. And that\u2019s sort of like the general use case, right? That\u2019s like we set up our database table \nand we're just straight-up inserting information into it. But there\u2019s some other stuff we can do. Namely, we can actually set up our database table  in order to make it easier for us to insert elements or \nto control the type of information or the type of rows  that we can insert into the database table. So, what I\u2019m actually going to do \nis I\u2019m actually just going to drop this table. So, I\u2019m just going to say DROP TABLE student. And we're actually just going to start over. So, again, with PopSQL all you have to do \nis click on the SQL command. Like I can click on DROP TABLE right here. And then when I click Run, it\u2019ll go ahead and drop it. So, now if I tried to SELECT ALL from the student table, \nyou'll see it says there\u2019s no such table. So, let\u2019s go ahead and I\u2019m going to show you guys \nhow we can create this student table  in order to make it a little bit easier \nfor us to insert stuff. So, the first thing I\u2019m going to show you guys \nis something called NOT NULL. And NOT NULL will basically allow us to define \nthat a particular column in the table cannot be NULL. So, let\u2019s say that when we're storing our students,  we don\u2019t want the student \nto be able to have a NULL name. And NULL is basically just a value \nthat represents no value. So, if something is NULL it means \nthat it doesn\u2019t have a value. So, let\u2019s say that we always want the student \nto have a name no matter what. Well, after I same name VARCHAR(20) \nwhat I could do is I can say NOT NULL. And I'm just putting that right after here. What that means is this column can\u2019t be null. So, if you insert a row into the table, \nyou can\u2019t insert NULL for a name. I could also do something else \nwhich would be UNIQUE. So, UNIQUE is another keyword which we can use. And basically, what this is going to mean is that the \nmajor field has to be unique for each row in this table. So, if somebody else or another row in the table \nhas the same major as another entry,  then that will get rejected. So, NOT NULL and UNIQUE \nare actually pretty useful. So, now what we can do \nis we can actually create this table. So, I\u2019m just going to click on this query. And I\u2019m going to click Run. And you'll see that we get a success message. So, we were able to create the table. And so, now why don\u2019t we start populating \nthis table with information? So, I\u2019ll come over here and I\u2019ll click insert \ninto student \u2013 Jack, biology. So, we're going to insert Jack. And then we'll select the table and you'll see \nthat Jack got inserted just fine. Let\u2019s click on this second one. Kate, sociology. So, we'll run this. And again, we'll just select all from the table. You'll see both of those got inserted. So, now we get down here into this next one. So, insert into student. So, for Claire, we're inserting in \nstudent_id and name. But let\u2019s actually switch this up. So, why don\u2019t we get rid of this and instead \nof saying this, we'll give her a major. So, we're going to say that Claire\u2019s a chemistry major. But we're actually going to get rid of this name. So, instead of Claire, \nI\u2019m just going to say  NULL here. And you'll notice up here, \nI said that the name cannot be NULL. So, when I created this table, \nI specified that the name field cannot be NULL. So, if I come down here and I try to \ninsert a student with no name,  with a name that\u2019s set to NULL and click Run, \nyou'll see that we get this error. And it says, \u201cYou have an error in your SQL.\u201d And basically, what that means \nis we can\u2019t insert in  a value here that\u2019s NULL  because we specified that it can\u2019t be NULL up here. So, you\u2019re actually not going to be able to do that. Now, we also, over here on this major field, \nwe defined that it has to be unique. So, if I come down here \nand I try to execute this line,  so you\u2019ll see, we're trying to insert \nthis person\u2019s name as Jack  and they're a biology major. But we already defined one person \nthat was a biology major up here, right? It was this first one. So, if I try to enter in another biology major, \nit\u2019s going to give me another error. So, I\u2019m going to click run. And you'll see down here it says \nDuplicate entry \u2018Biology\u2019 for key \u2018major\u2019. So, it yelled at us because we entered \nin a duplicate entry. So, NOT NULL and UNIQUE are really \ngood ways for you  to kind of control the data \nthat gets stored on the table. And actually, funny enough, \nif you have a primary key \u2013  a primary key is actually just an attribute or a column \non the table that is both NOT NULL and UNIQUE. So, a primary key is basically just something \nthat\u2019s NOT NULL and UNIQUE. So, there\u2019s a couple other ones. We're actually going to drop this table again. So, I\u2019m just going to click DROP TABLE \nand we'll go ahead and drop the table. And over here, I\u2019m going to create the table again, \nbut we're going to give this some other stuff. So, these are actually what we would call constraints. So, I would say like a constraint would be \nthat it\u2019s NOT NULL or that it\u2019s UNIQUE. But there\u2019s a couple other constraints \nthat we can add that I want to show you guys. So, let\u2019s say that we wanted to set a default value. So, let\u2019s say that if somebody didn\u2019t enter in a major, \nwe wanted to be able to give them a default major. Well, I can actually say that something has a default. So, I can come down here \nand I can say after major, DEFAULT. And then inside of single quotes I can just type in \nwhat I want the default to be. So, in our case, if somebody doesn\u2019t provide us with a \nmajor, why don\u2019t we just say that they\u2019re \u2018undecided\u2019. So, basically if the major field is left blank, \nwe'll say that the person is undecided. So, then down here, why don\u2019t we go ahead \nand insert a student into the table  that doesn\u2019t have a major. So, here we can just say INSERT INTO student  and we'll go ahead and specify \nthat we're going to enter in the student_id. And also the name. But you'll notice that I\u2019m not putting major in here. Which means that we don\u2019t have to give this a major. So, now we'll get rid of Jack\u2019s major. And when I go ahead and run this, \nyou'll see that we got a success message. And if I was to select all the entries from the student, \nit says student_id is 1. His name is Jack and his major is undecided. So, because I didn\u2019t insert a major,  it\u2019s going ahead and populating that major \nfor us with the value undecided  because that was the default value \nthat I placed over here. So, that\u2019s another really useful constraint \nthat we can put on this. All right, so there\u2019s one more of these \nlittle constraints that I want to show you guys. And it\u2019s actually really useful for working \nwith primary keys. So, you'll notice that the primary keys \nfor all of these guys were like 1, 2, 3, 4, 5, etc., right? I like manually went in and incremented \nall those primary keys. But what you can actually do \nyou can have the database do that for you. So, I can come over here right here after students, \nso remember, student_id is the primary key, right? We defined that down here. I can come ever here and say AUTO_INCREMENT. And AUTO_INCREMENT is basically going to specify \nthat the data that gets inserted into here  is going to automatically incremented \nevery time we add one in. So, I could actually come down here and instead of \ninserting a student ID, I can just leave it out. So, I can just insert the name and the major. And then I can add that information in here. So, Jack is going to go ahead and study biology. And actually, let me get rid of these. So, we can kind of see how this works. So, I can copy this for another one. And we'll make this Kate and she\u2019s studying sociology. So, notice that I\u2019m not actually \ninserting the student_id, right? All I\u2019m inserting is the name and the major. But because we said that this table \nwas going to be auto incremented. In other words because we said that the student_id \nwas going to be auto incremented  we don\u2019t actually have to do that. So, I can come down here and I can run this. And actually, whoops. I have to create the table again. My bad. So, we're going to create the table. And I can insert in this first entry, Jack, \nwho\u2019s a biology major. And I\u2019ll run this. And you'll see it says 1 row affected. And then I\u2019m also going to insert this next one \nwhich is Kate who is studying sociology,  so I\u2019m just going to click Run. And so, now I\u2019ve inserted \nboth of these students into the table. And if I select all from the student table, you'll see \ndown here that we get both of these entries. But Jack has an ID of 1 and Kate as an ID of 2 even \nthough I didn\u2019t rigorously specify that, right? So, I didn\u2019t actually add in the ID\u2019s \nfor either of these guys,  and yet they still showed up down here in the table \nwhich was pretty useful. So, that\u2019s a great way for you to just like automatically \nincrement like something like a primary key  or really any other row in the table \nby using AUTO_INCREMENT. So, those are just a couple little things \nthat you can do when you\u2019re creating the table. We would call those constraints. So, you can add constraints onto the specific columns \nof the table and that can control  like what types of information \ncan be put inside of there. So, that\u2019s \u2013 there\u2019s a little bit more \nof an advanced way  for you guys to insert information into the database. [Update & Delete] In this tutorial I\u2019m going to talk to you guys about \nupdating and deleting rows inside of a database table. So, in the last few tutorials we've looked at creating \ndatabase tables and inserting information into them. But now once we have that information \ninside those tables,  I\u2019m going to show you guys how to update it \nand delete it whenever you want. So, we have here our student database. And this is \u2013 or the student table and it\u2019s the table \nthat we've been using throughout the course. And so, down here you can see \nit\u2019s just a bunch of students. And they have names, majors, and ID's. So, right now, these are all the students \nthat are stored inside of our database. So, these are the database entries \nthat we can work with. The first thing I\u2019ll show you guys show to do \nis update some of these entries. And so, you know, let\u2019s say that we wanted, \nyou know, update something. So, let\u2019s say that we wanted to change the name of \none of the majors in our school, right? So, let\u2019s say I am the database \nadministrator for my school. And we decided that instead of calling the major \nbiology, we wanted to call it bio. So, the official name for the major \nis no longer biology. It\u2019s just going to be bio. Well, we could actually make that change \ninside the database. So, I can use the special keyword called UPDATE. And I can just type out the name of the table \nwhere I want to do the update. So, in our case, it\u2019s student. And over here I can say UPDATE student \nI want to set major equal to \u2018Bio\u2019, right? But here\u2019s the thing. I don\u2019t want to set the major equal to bio \nfor all the students. I only want to set the major equal to bio for the \nstudents who have their major as biology. So, over here we can specify that. I can say WHERE. And here I can put a condition. So, I can say major is equal to \u2018Biology\u2019. And I\u2019m going to be semicolon. So, this whole thing now is \none SQL statement or query. And so, what I'm doing is \nI\u2019m updating the student table  and I\u2019m setting the major column equal to \u2018Bio\u2019 \nwhere the major column is already equal to \u2018Biology\u2019. So, now if I was to go ahead and run this, \nyou'll see it says Rows affected:  2. So, we updated to of the rows in this database. And if I was to select all of them \nand I\u2019m going to click Run,  you'll see down here now for the two students \nwho are biology majors,  it\u2019s now saying that they\u2019re bio majors, right? So, it updated the database only in those places \nwhere the student\u2019s major was equal to \u2018Biology\u2019. And that\u2019s what we can do here. So, this is just a very basic update statement, \nbut we can use this in order to all sorts of stuff. So, let\u2019s do another one. We can do the same for computer science. So, I could say UPDATE student. SET major equal to \u2018Comp sci\u2019 \nWHERE major = \u2018Computer Science\u2019. So, I\u2019m basically abbreviating this major. So, let\u2019s go ahead and run this. And again, I\u2019m just going to \nSELECT ALL from the table. You'll see down here, Mike, who used to be a \n\u2018Computer Science\u2019 major is now a \u2018Comp Sci\u2019 major. So, I was able to update that. Another thing you can do \nis you can update specific things. So, I can say like UPDATE student. SET major equal to \u2018Comp Sci\u2019, WHERE. And then over here I can do a different condition. So, I can say like student_id is equal to 4. So, now I\u2019m updating the student\u2019s major \nwho has an ID of 4. So, this is like a different type of query. So, down here I\u2019m running that. And then I\u2019m going to SELECT ALL. And so, now you can see that Jack \nwho used to be a biology major  is now a comp sci major \nbecause his student ID was 4. So, you can get kind of creative, you know, \nplaying around with setting different things  and then checking different conditions. You can also use more complex conditions down here. So, down here we have bio majors \nand we have chemistry majors, right? Well, let\u2019s say that any student \nwho is either a biology or a chemistry major  is now going to be a biochemistry major. So, we're combining those two majors together. Well, I could update that here. So, I could say UPDATE student. SET major equal to \u2018Biochemistry\u2019. WHERE major is equal to \u2018Bio\u2019. And over here we could say OR. And then we could also say major \nis equal to \u2018Chemistry\u2019. And this is going to give us some OR logic. So, now if the student has a major of bio \nor if they have a major of chemistry,  we're going to set it equal to biochemistry. So, we're basically combining those two majors together. So, now I\u2019ll click Run \nand you can see rows affected is 2. And I\u2019ll SELECT ALL from students. And you can see now Jack and Claire \u2013 \nJack used to be a bio major. Claire used to be a chem major. Are both now biochemistry majors. So, you can use OR in order to \ncheck multiple things like that. You can also set multiple things. So, over here I\u2019m actually going to \nget rid of this condition. And I can say SET name equal to \u2018Tom\u2019. And major equal to \u2018undecided\u2019. WHERE student_id is equal to 1. So, whoever has the student equal to 1 \nis going to have their name set to Tom  and their major set to undecided. So, let\u2019s go ahead and run this. And you'll see it says 1 row affected. So, let\u2019s SELECT ALL from the student\u2019s table. And you'll see down here, the student with the ID of 1 \nis now named Tom and their major is undecided. So, you can change multiple columns \nwithin the same query like I did up here. All right, so there\u2019s one more thing we can do, \nwhich we can actually get rid of this WHERE. So, this is actually optional. So, if I got rid of WHERE, I can then set something. So, why don\u2019t we set major equal to undecided. So, if I get rid of that WHERE statement, this is just \ngoing to apply to every single row in the table. So, now when we run this, \nyou'll see rows affected was 5. And now when we SELECT ALL from the students \ntable, all of their majors are now undecided. So, you can either select specific rows \nor groups of rows with that WHERE  or you can just do it to all of them \nby dropping the WHERE. So, now I\u2019m going to show you guys \nhow we can delete rows from the table. And it\u2019s actually pretty similar \nto how we would update rows. So, instead of updating a specific row \nor a group of rows,  I can actually delete a specific row \nor a group of rows. So, it\u2019s like I said, pretty similar to UPDATE. I\u2019m just going to type in DELETE FROM \nand then the name of the table. So in our case it\u2019s going to be student. And you can actually just end this off right here. I can put a semicolon here. And this will go ahead and delete \nall of the rows inside of the table. But why don\u2019t we try to get more specific? So, I\u2019m going to try to delete a specific row. I can say DELETE FROM student. WHERE \u2013 and now I can specify a condition. So, I can say like WHERE student_id is equal to 5. So, what this will do is it\u2019ll delete any students or any \nrows from the table that have a student ID of 5. So, down here we just have one like that. So, Mike, who is an undecided major has an ID of 5. So, if I was to run this. Now you'll see it says rows affected, 1. And we'll select all from students \nand Mike is no longer inside the table. So, we actually deleted a specific row. And just like update, \nyou can get more fancy with these queries. So, I could say like WHERE name is equal to Tom. And you can also do an AND. So, instead doing OR, we're doing an AND here. And I can say like major is equal to \u2018undecided\u2019. So, this will delete any students from the table \nwho have the name of Tom  and who are an undecided major. So, now when I run this query, you'll see \u2013 \nand I select all the students again \u2013  that Tom got deleted from the table. So, he\u2019s no longer there. So, just like we used WHERE \nin the UPDATE statements,  we can use WHERE with the DELETE statements \nto do all of that. But if you wanted, \nyou can just delete everything from the table. So, now I\u2019m just going to run this command. And if I query the table, \nyou'll see that nothing is there. So, we deleted everything. So, updating and deleting is extremely useful. And you can use that WHERE statement in order to \nspecify what specific row you want to update  and what specific row you want to delete. [Basic Queries] In this tutorial I\u2019m going to talk to you guys about \ngetting information from the database. More specifically we're going to \nlook at the SELECT keyword  and we're going to look at the different ways \nthat we can ask the database management system  to give us some information back. So, one of the core tenets of interacting \nwith the database management system  and using SQL is writing these little queries. And a query is essentially just a block of SQL that\u2019s \ndesigned to ask the database management system  for a particular piece of information. And so, one of the things that we need to be aware of \nis that when you\u2019re keeping track of, you know,  huge amounts of information in a database,  you want to be able to grab \nspecific information easily. So, let\u2019s say that I\u2019m trying to, you know, grab a bunch \nof students from our little student table right here. Well, imagine that we had like a million students \nstored inside of that table, right? I might not want to just grab every single student. I might want to just grab students \nwho meet a certain condition  or students who have a certain major \nor students with a certain name. And we can use SQL queries in order to \nspecify those things. So, instead of the relational database management \nsystem giving us back all the entries in a specific table,  instead it can just give us back very specific entries \nwhich meet a certain condition. So, we're going to talk a little bit \nabout the basics of doing that stuff. Now, this is actually a huge topic  and it\u2019s the topic that we're going to be talking about \nfor most of the rest of course. So, this is going to kind of give you guys an \nintroduction into writing all of these little queries. So, over here, you\u2019ll see that I have this query here. And it\u2019s just SELECT * FROM student. And actually, if you want, \nyou can put this on two different lines. A lot of people will do that. So, this SELECT keyword is a very special word. And this SELECT keyword is basically going to tell \nthe relational database management system  that we want to get some information from it. So, I can say SELECT. And then right next to it I can specify \nwhat information I want to get. And so far in this course we've \nbeen using this star or this asterisk. And basically, the asterisk means \nthat we want to grab all of the information. But if we wanted, we could specify a specific column. So, we can select specific columns of information  that we want to get back \nfrom the database management system  and then we can say FROM whichever table. So, SELECT * FROM table could also be read \nas select every column from the student table. So, over here you'll see when I run this, \nwe get this information down here. So, we're getting all of the students in the table. We're getting their student ID\u2019s \nand their names and their majors. If I wanted, I could change the columns up here. So, I could say like name. And now what this will do is \nit\u2019ll select all of the names from the student table. So, if I was to run this query, \nyou'll see down here we get just the names. So, we have the name \nand then it\u2019s Jake, Kate, Claire, Jack, and Mike. So, these are all of the names \nthat were stored inside of the database. I could also include something else. So, I could say name, major FROM student. And then down here when I run this query,  you'll see we're getting the \nstudents, names, and the majors. But we're not getting the student\u2019s ID. So, we're able to specify \nwhich specific columns we want to get back. You can also pre-pen these \nwith the name of the table. So, I could say like student.name. And student.major. And sometimes people will do this \njust because student.name,  it\u2019s clear which table the name is coming from. And as we write more and more complex queries, \nthat can come in handy more. So, for the most part, I\u2019m probably going to be writing \nthem both ways, just depending on the situation. But you could do something like this. We can also order the information that we get back. So, here I\u2019m getting the student\u2019s name \nand the student\u2019s major from student. And if I wanted, I could order that information. So, I could use another command which is ORDER BY. And then over here I can just put the name \nof the column that I want to order these by. So, I can say ORDER BY name. And now when I run this, \nyou'll see we get the same results,  but they're in alphabetical order based off the name. So, we get Claire, Jack, Jack, Kate, and Mike. So, these are now ordered in alphabetical order. And by default, these are going to be \nin ascending order. But if you wanted, you could put them \nin descending order. So, you could say DESC and this stands for descending. So, now if I run this, you'll see that all the names \nget returned in the opposite order. So, Claire is all the way at the bottom. And then we go all the way back up to Mike. So, you can order by anything. So, I can even order by like student_id. So, I\u2019m not returning the student_id. In other words, I\u2019m not getting the student ID up here, \nbut I can still order by it. And so, now these are going to be in descending \norder of student ID\u2019s. So, actually why don\u2019t we just get all of these now. So, I\u2019ll just say SELECT ALL from student. And you'll see now it\u2019s ordered in descending order \nby student ID. It\u2019s a little bit clearer, 5, 4, 3, 2, 1. But I can also get rid of it or I can just say ASC \nwhich stands for ascending. And now it will order them in ascending order. So, you can order by a bunch of different stuff. You can also order by different sub columns. So, I could say like ORDER BY \u2013 \nand we'll start with major. And then after that we'll do student_id. So, SELECT ALL from student. ORDER BY major. And then student_id. So, it\u2019s going to order them by major first. And then if there\u2019s any of them \nthat have the same major,  it\u2019ll order them by student ID further. So, I\u2019m going to run this. And you'll see down here, \nit\u2019s ordering everybody by major. So, we're getting biology, biology, chemistry, \ncomputer science, sociology. In this case, these two students \nhave the same major. They also have the same name too. But their student ID\u2019s are different. So, the student ID\u2019s are now order \nin ascending order. But I said descending right here. And I run this query. Now you'll notice that the biology major \nwith student ID 4 came first and then 1. So, it ordered it first by major and then within that, \nif they have the same major,  it ordered them by student ID. And you can specify as many of those as you want. You can also limit the amount \nand results you're getting. So, I can say like SELECT ALL from student. And then I can say LIMIT. And here I can put like 2. And now what this will do, \nis it\u2019ll limit the results I get back to 2. So, now instead of getting all the students back, \nwe only got 2. So, if you only want like a specify number of rows \nback from the table, then you\u2019ll only get that. And you can also combine these. So, I could also like order them. So, I could say ORDER BY student_id, descending. So, now this is going to select all the students. Order them by student ID \nonly give us 2 of them back. So, now when I run this \nyou'll see we're getting 2 back. And it\u2019s ordering them in \ndescending order by student ID. So, that can be pretty useful. And that\u2019s just another way \nthat you can make these more complex. The final thing that we can do that I\u2019m going to show \nyou guys in this tutorial is filtering. So, I can say WHERE. So, if you remember in a previous tutorial \nwe were updating and deleting students. And we wanted to only update or delete specific \nstudents where certain conditions were true. And we used this WHERE condition. You can do the same thing for SELECT. So, I could say like SELECT ALL FROM students \nWHERE major is equal to \u2018Biology\u2019. And so, now this is only going to give us \nthe students who are biology majors. And you can see down here we get back the \ntwo Jacks who are both biology majors. You can do the same thing for chemistry. So, let\u2019s see if we have any chemistry majors. We do. Looks like Claire is a chemistry major. And if you wanted, we can only return \nspecific columns, like I said. So, we can say SELECT, you know, \nthe name and major from student. WHERE major is \u2018Chemistry\u2019. And now we're only getting the name \nand the major back. And you can make these more complex. So, I could say like WHERE major is equal to \n\u2018Chemistry\u2019 OR major is equal to \u2018Biology\u2019. And so, now this will give us all of the chemistry \nand the biology majors  so we get the two Jacks and Claire. And we can also do different things. So, like I said, like WHERE major is equal to \n\u2018Chemistry\u2019 OR name is equal to \u2018Kate\u2019. And so, now we'll get back any of those students. So, we get back Kate and Claire \nand they have different majors. So, you can play around \nwith those WHERE statements  to get specific entries from the individual table. So, I want to talk to you guys about how we can make \nthese where\u2019s a little bit more complex. So, obviously over here we're using equals, \nbut there\u2019s a bunch of other stuff you can use too. So, this is actually comment in SQL. So, if you put two dashes, then anything \nafter it is going to be a comment. But here I have all the different comparison operators. So, we have equals. We also have less than, greater than, less than or \nequal to, greater than equal to, equal to, not equal to \u2013 which is these less than/greater than signs. And then AND and OR. So, you guys have seen some of these, \nbut we can use these. So, I can say like major not equal to chemistry. So, this is going to select all the students \nwhere the major is not equal to chemistry. So, if I run this, now we get all the students except \nClaire because Claire is a chemistry major. Or we can do the same thing for numbers. So, I can say like student_id. So SELECT ALL the students where student_id \nis less than 3. And we need to get rid of this. And so, now we'll get all the students \nwho have student ID\u2019s. Let me get all of these. So, we're only getting students 1 and 2. We're not getting anything \u2013 \nor we can do less than equal to 3. And now this will also give us that student ID \nequal to 3. And you can combine these. So, like where student_id is less than 3 \nand name is not equal to Jack. So, if we run this now, you'll see we get Kate \nand Claire,  but we don\u2019t get Jack who is student ID number 1 \nbecause it didn\u2019t fit the condition. So, you can these all these comparison operators \nto compare, you know, different things. And by using them inside of this \nWHERE statement over here  you can seriously filter the results down to \nonly like the few that you need. All right, so I want to show you guys one more cool \nthing we can do which is using the IN keyword. So, instead of just like putting a little condition \nlike this, we could say WHERE. And then we could say like \nthe name of one of the columns. So, like name. And then I can say IN. And then over here I can put some parenthesis \nand I can put some values in here. So, if the name is Claire, Kate, or Mike. So, basically what this is saying is SELECT ALL \nfrom student WHERE the name is IN these  like this group of values, right? So, if the name is Claire, Kate, or Mike, \nthen it\u2019s going to select that. So, now I can click Run and you'll see down here, \nwe get all the entries, Kate, Claire, and Mike. So, this is a really easy way to compare like \none column to a bunch of different values. So, like we could check to see if the name is in there. We could also do the same thing for like major. So, like WHERE major IN \u2018Biology\u2019 or \u2018Chemistry\u2019. And now if we run this, you'll see that we get Jack \nand Claire because they\u2019re both biology. So, we can use IN. And you can also combine all these things together. So, you could say like WHERE major IN \u2018Biology\u2019 and \n\u2018Chemistry\u2019 AND student_id is greater than 2, right? And now I'll click Run and you'll see \nthat we get these two students, right? So, you can combine the SELECTs \nand the WHEREs and even like the LIMITs  and all that other stuff to make these \nkind of complex queries. But that\u2019s sort of the basics of doing these queries. I mean obviously these are very simple queries. And as the database schemas get more complex,  the queries that you need to select specific pieces \nof information are also going to get more complex. And we're just using one table here, right? We're just getting information from the student table. But if we had multiple different tables,  you know, maybe certain tables \nhave like foreign keys to other tables,  like getting information can get pretty complex. And as we go forward in the course, we're actually \ngoing to design a more complex database schema. And using that database schema, we're going to learn \nmore about using these select commands. But for now, that kind of shows you guys the basics. And so, what you want to do is \njust kind of play around with these, right? I mean we have our student table. It\u2019s very simple. It has three columns. And you know, just play around with getting \nspecific pieces of information  using these WHEREs and INs \nand all of these different keywords  in order to select the information that you want. [Company Database Into] In this tutorial I\u2019m going to introduce you guys \nto a more complex database query  that we're going to be using \nfor the rest of the course. And so, up to this point in the course \nwe've learned a lot of stuff with SQL. We learned how to create tables, \ninsert data into those tables. We learned about the different datatypes. We also learned how to update and delete data. And we learned how to query \nand select data from the database, right? So, we learned a lot of the core concepts in SQL. And up to this point, if you guys \nhave been following along,  then you have a pretty good \nfundamental understanding  of the different things \nthat we can do in SQL. Now, obviously we didn\u2019t cover everything, \nbut we covered a lot of the basics, right? And we've been using this student table \nwhich just has three columns. One primary key. And, you know, we learned how to create this table. We learned how to insert all this information. We learned how to update and delete. And then also just, you know, \nquery for the specific language. Here\u2019s a problem though, \nis this is a very simple example, right? I mean it\u2019s one database table \nand it only has three different columns. But in reality database schemas are going to be \na lot more complex than this, right? The chances sort of your database schema \njust having one table is going to be pretty slim. And so, you know, to really master SQL \nand to really learn about all the different features. And there are certain features that we haven\u2019t \ncovered yet that I want to cover. We're going to need \na more complex database schema. There\u2019s certain things that I just can\u2019t show you guys \non this student table  because it\u2019s just not complex enough, right? So, what I actually did is I went ahead \nand designed another database schema. So, I actually designed a database \nthat could be used for a company. So, I\u2019m going to go ahead and pull that up. And right here we have our company database. And you can find this .pdf \nin the description below. I\u2019ll put a link to it. But basically this is the database schema that we're \ngoing to be using for the remainder of the course. So, this is a more complex database schema. But because it\u2019s complex, it\u2019s going to give us some \nawesome opportunities to query it, right? In other words, the more complex \nthe database schema,  the more complex the queries we're going to be able \nto write and play around with. Because there\u2019s only so many types of queries \nthat we can write for that student table. But this is going to be a better example for us to learn \nabout different types of queries and stuff like that. So, I\u2019m going to go ahead and walk you guys through \nthis schema in this tutorial. That way you guys understand it. Because if you don\u2019t \u2013 \nif you can\u2019t wrap your head around it,  then you\u2019re not going to be able to follow along \nwith the rest of the course. So, I\u2019m just going to give you guys \nan explanation of this. And that way we have it going forward. So, this database schema maps out \nthe database for a company, right? So, this would be like the information \nthat we might want to store about a company. So, up here we have our first table \nwhich is the Employee table. And so, this is just going to store \ninformation about employees. So, we're storing like the employee ID, \nthe first name, the last name, birth date. So, you'll see here, this is actually a date. Sex which is going to be male or female. Salary, which will be like how much they make. And then over here we have two foreign keys. So, the primary key of this table is the employee ID \nover here which we have in red. The foreign keys are going to be \nthese keys over here in green. And basically, a foreign key is just \u2013 it\u2019s going to store \nthe primary key of an entry in a different table, right? So, we have two foreign keys. The first here is super_id. That stands for supervisor ID. So, an employee in our company \nis going to be able to have a supervisor. And a supervisor is actually going \nto be another employee. So, super_id is going to point to \nanother employee in the employee table. We also have branch_id. So, different employees in the company are going to \nbe able to work for different branches. And you'll see down here we have this branch table. And it just has a branch ID, a name, and then also \nsome other stuff which we'll talk about. So, an employee can work at a branch, right? And that\u2019s kind of what we're storing over here. So, let\u2019s take a look at this. We would say that the employee Michael Scott, \nhis super_id is 100. That means Michael Scott\u2019s supervisor \nhas an ID of 100. So, Michael Scott\u2019s supervisor \nis going to be David Wallace, right? Because David Wallace has an employee ID of 100. Kelly Kapoor has a supervisor ID of 102. That means Kelly Kapoor\u2019s supervisor \nis going to be employee 102. So, it\u2019s going to be Michael Scott, right? So, hopefully that makes sense, right? An employee can have a supervisor. And super_id is a foreign key which points \nto the employee ID of another employee. And then we also have branch_id over here again. And this will point to the branch. So, branch_id. Angela Martin has a branch ID of 2. That means Angela Martin works \nat the Scranton branch. Andy Bernard has a branch ID of 3. That means Andy Bernard works \nat the Stamford branch. So, hopefully that kind of makes sense. And then down here, like I said, \nwe have the Branch table. And the Branch table just has an ID, a name. And also has a manager ID. So, on the Branch table we're actually storing \nthe ID of an employee who is the manager. So, this is actually a foreign key. So, manager ID is going to point to \none of the employees up here. So, we would say that the manager \nof the Scranton branch has an ID of 102. So, the manager of the Scranton branch \nis going to be Michael Scott because he has a 102. The manager of the Stamford branch has an ID of 106. So, the manager of the Stamford branch \nis Josh Porter because he has an ID of 106. Hopefully that makes sense. And then we're storing the date \nthat the manager started being the manager. So, now we'll check out the client table. So, the client table has a client ID, client name, \nand also has a foreign key branch ID. So, we would say that the client Dunmore High \nSchool, you know, works with branch number 2. Or the client Times Newspaper works \nwith branch number 3. So, Dunmore Highschool \nwould be a client of branch number 2  which is the Scranton branch over here, right? Hopefully that makes sense. The Times Newspaper is a client of branch number 3 \nwhich is the Stamford branch. So, that\u2019s kind of how those are connected. And then over here we have another one \nwhich is branch supplier. So, this has a compound primary key, \nor a composite key. And the first part of it is the branch_id. So, a Branch Supplier is obviously going to \nstore the branch_id. And it\u2019s also going to store a supplier name. So, it\u2019s important to notice \nthat we need a composite key here  because the branch_id doesn\u2019t \nuniquely identify each row. And the supplier_name doesn\u2019t \nuniquely identify each row. Only together can they uniquely identify each row. And then the last table down here \nis the Works_With table. So, this basically defines the relationship \nbetween employees and clients. So, we're going to go ahead and assume  that an employee can work with a client \nand sell the client different products. So, employee 105 sold $55,000 \nworth of paper to client 400. Employee number 108 sold $22,500 \nworth of product to client_id 402, etc. So, this is kind of mapping the relationships \nbetween employees and clients  so telling us how much \na certain employee sold to a certain client. And you'll see this is also a composite key. So, this is the database schema that we're going to be \nworking with for the rest of the course. And like I said, in order to kind of show you guys \nsome more advanced SQL queries,  we're going to need a database schema that is, \nyou know, complex just like this one. If this isn\u2019t super clear to you, what you might \nwant to do is just kind of look over the pdf that I'm going to include in the description below. And really, what you want to do \nis just trace the relationships. So, you know, like really make sure  that you understand how this \ndatabase schema is put together,  how everything relates to each other. And then going forward in the course, \nwe're going to be using this database schema. So, in the next tutorial I\u2019m going to \nshow you guys how to create this. So, I\u2019m going to actually give you all the code \nfor creating this entire database. And then from there we'll go ahead and we'll start \nlearning some more advanced queries  and some more advanced stuff that we can do. [Creating Company Database] In this tutorial I\u2019m going to show you guys how we can \ncreate a complex database schema in SQL. So, in the last tutorial I showed you guys \nthis database over here. It\u2019s this company database. This is basically just an example database \nthat I created. And it\u2019s a database that we're going to be using\n for the remainder of the course  in order to learn a little bit more advanced SQL \nquerying and stuff like that. So, this is a company database. And we have a bunch of tables like this employee \ntable, branch table, works with table, etc. In the last video I kind of talked about \nwhat each of those did. We looked at some of the different relationships \nbetween the tables. So, in this video I\u2019m going to show you guys \nhow we can actually implement this database. So, how can we take this database \nand actually create it in MySQL? So, not only are we going \nto create all of these tables  and we're going to define all of these relationships, \nlike the foreign keys and all that stuff. We're also going to populate all of that information. So, I\u2019m going to populate these database tables \nwith all this information. That way we can use that information going forward \nfor the examples. So, this tutorial is going to be pretty cool  because I\u2019m going to show you guys how to build \nan advanced database schema just like this. It\u2019s a little bit more complex than the student table \nwe had looked at before. And before we get started, I just want to say all of \nthe code that I'm going to be using in this tutorial  is going to be available in the description below. So, there\u2019ll be a link that you can click on \nand I\u2019ll have all of this. So, you know, you don\u2019t have to type out \neverything that I'm typing out. And in fact, I\u2019m just going to be pasting in a bunch of \nstuff so that way you don\u2019t have to type anything. So, the first thing we want to do is \nwe're going to drop that student table. So, I\u2019m just going to go ahead \nand DROP TABLE student. And we'll go ahead and drop that table. That way we don\u2019t have to worry about it. And so, once we've gone ahead \nand dropped the student table,  now we can start creating all of these tables \nfor our company database. So, I\u2019m just basically going to paste in the code \nfor creating each of these tables. I already have it all written out. And I\u2019ll kind of walk you guys through what it is \nand what we're doing. So, here we have CREATE TABLE employee. So, we're going to create this Employee table. We have our employee ID which is an integer. And this is going to be the primary key of the table. And then we also have \nfirst_name, last_name, birth_day. So, birthday is actually a DATE \nas you can see over here. We haven\u2019t used the DATE datatype yet, \nbut we're using it now. DATE will allow us to store a date just like this, \nwith a 4-digit year, 2-digit month, and a 2-digit day. We\u2019re also storing their sex. So, like male or female. And that\u2019s just a VARCHAR(1). We're storing the salary. And then we're also storing these supervisor ID \nand the branch ID. And if you guys remember \nfrom the last video, the supervisor ID  is a foreign key which points to another employee. And the branch ID is also a foreign key \nwhich points to the branch table. Now, here\u2019s the thing. We can\u2019t actually make these foreign keys just yet  because the employee table \ndoesn\u2019t technically exist yet. And the branch table doesn\u2019t technically exist yet \nbecause I haven\u2019t created them. And so, I can\u2019t define these guys \nas foreign keys just yet. We're going to do that later \nand we'll add that in afterwards. So, I\u2019m going to go ahead and run this \nand we'll create the employee table just like that. So, now we're going to go ahead \nand create the branch table. So, I have the code for the branch table right here. So, we're going to CREATE TABLE branch. And this is just this guy down here. So, it has a branch_id which is the PRIMARY KEY. Branch name. And the manager ID. So, remember, the manager ID is down here in green. The manager ID is also a foreign key. So, the manager ID, we're actually going to be defining \nas a foreign key which points to the employee table. And then we have the manager start date, \nwhich is DATE. So, down here, I\u2019m defining a foreign key. So, in order to create a foreign key \nI can just say FOREIGN KEY  and then inside of parenthesis put the name \nof the column that I want to be the foreign key. In our case, it\u2019s mgr_id. And then I can say that it references employee. And then inside parenthesis just the name \nof the column in the employee table,  which is going to be emp_id. And then finally, I'm going to do one more thing \nwhich is over here. I\u2019m going to say ON DELETE SET NULL. And we\u2019re going to talk more about what \nON DELETE SET NULL does in a future video. But for now, just know that whenever \nwe're creating a foreign key,  we're going to put \nON DELETE SET NULL. Or we can also put something called \nON DELETE CASCADE. Which again, I\u2019m going to \ntalk about in a future video. But just put that in there and that\u2019ll make it \na lot easier for us to manage this foreign key. So, now I'm going to go ahead and run this \nand we'll create the Branch table. So, looks like that went well. All right, so next thing we need to do  is we need to set the super_id and branch_id \nof the Employee table as foreign keys. So, remember, down here in the Branch table \nwe set the manager ID as a foreign key. But we weren\u2019t able to do that with the supervisor ID \nor the branch ID in the employee table  because the Branch table and the Employee table \nhaven\u2019t been created yet. So, I\u2019m going to show you guys how we can do that. So, down here I have two little blocks of SQL code. The first one is altering the table employee. And I\u2019m just saying ADD FOREIGN KEY. And then inside of parenthesis \nwe're putting branch_id. So, that\u2019s going to be the foreign key. REFERENCES branch, and then branch_id. And ON DELETE we're going to SET NULL. So, what this is going to do is it\u2019s going to add \nbranch_id as foreign key to the employee table. So, I\u2019m going to run this. And now this is going to be a foreign key. And then down here we can do the same thing, \nbut for supervisor_id. So, you see supervisor_id right there. I\u2019m going to go ahead and run this. And this will add the supervisor ID as a foreign key \njust like we did with the branch ID. So, we needed to do that because \nwhen we created the Employee table,  the Branch table and the Employee table \nhadn\u2019t been created yet  so we couldn't add them \nas foreign key relationships. All right, so now we're going to add the Client table. So, you'll see over here, CREATE TABLE client. And we're just storing the client_id as a primary key, \nclient_name, branch_id. And then we're going to make \nthe branch_id a foreign key. So, over here on the Client table \nyou'll see that the branch_id is a foreign key. It points over to branch. So, we're going to define that relationship here. I\u2019m just saying FOREIGN KEY (branch_id) \nREFERENCES branch (branch_id). And then once again we're just going to say \nON DELETE SET NULL. So, let\u2019s go ahead and create the Client table. I\u2019m just going to run this. And that\u2019ll create the Client table. So, next we have the Works With table. So, the Works With table is actually pretty unique \nbecause it has a composite primary key. So, the primary key has the employee ID \nand the client ID. And actually, what\u2019s unique is that each \ncomponent of the primary key is a foreign key. So, employee ID is a foreign key. And the client ID is a foreign key. And so, over here, we can create this table. I have employee ID, client_id, total_sales. The primary key is employee ID and client ID. And then the foreign keys are \nemployee ID and client ID. And you'll notice over here, instead of saying ON \nDELETE SET NULL, I\u2019m saying ON DELETE CASCADE. And again, I\u2019m going to talk more about ON DELETE \nSET NULL and ON DELETE CASCADE in a future video. But for now, just know that you need to have this here \nin order for everything to kind of be set up correctly. So, I\u2019m going to go ahead and run this  and we'll be able to insert or create \nthe Works With table. And then finally, we're going to create our last table \nwhich is the Branch Supplier table. And this is actually kind of similar to \nthe Works With table. So, down here we have the Branch Supplier table. It also has a composite key. So, its key is made up of multiple columns. And the branch_id column is a foreign key, \nbut the supplier_name column isn\u2019t a foreign key. So, this one is actually pretty interesting as well. So, we have branch_id, supplier_name, supply_type. And then the PRIMARY KEY \nis branch_id and supplier_name. And the foreign key is just branch_id. And again, with this one, on the foreign key, \nthat\u2019s also part of the primary key. I\u2019m just saying ON DELETE CASCADE. So, that\u2019s going to be what \nwe're going to need there. So, I\u2019m to go ahead and run this. And you'll see over here \nthat everything got entered in correctly. So, now we have all of these tables created, right? We created all the tables for our database schema. And so, what we're going to do now is we're going to \nactually insert information into those tables. Now, when we're inserting information \ninto these tables,  because we have all of these \nlike foreign key relationships,  we're actually going to have to do it a specific way. And so, I\u2019m going to walk you guys through \nhow we might do something like this. And it\u2019ll give you an idea of how you can do it. So, I\u2019m actually going to make the text \na little bit smaller. So, over here I\u2019m going to show you guys  how we could insert all of information \nfor the corporate branch. So, inserting the employee \nand the branch entries for the corporate branch. Now, you'll notice over here that \nthe Employee table and the Branch table  have foreign keys that point to each other. So, the employee table has an entry over here,  branch_id, which points to the branch \nor points to a specific branch. And each branch has a column here, manager ID, \nwhich points to a specific employee. So, there\u2019s like this circular relationship. So, when we're inserting these elements, \nwe're going to have to do it in a specific order. So, over here I\u2019m just starting with, \nlike I said, the corporate branch. So, I\u2019m inserting into the employee table \nVALUES 100, David Wallace. So, I\u2019m inserting in this David Wallace row over here. And you'll notice that I put all this stuff in here. But when I get to branch_id,  which is this last element over here, \nit should be 1, right? So, David Wallace should belong \nto the corporate branch. But the problem is that the corporate branch \nhasn\u2019t been created yet. So, I\u2019m just going to set this equal to NULL \nbecause that branch hasn\u2019t been created yet. And I\u2019m going to go ahead \nand insert David Wallace in there. So, I\u2019m just going to run this. And then the what I'm going to do is I'm going to \ninsert the branch into the Branch table. So, I\u2019m inserting into the Branch table VALUES 1, \nCorporate, 100. So, now that I \u2013 since I already inserted \nthe David Wallace employee,  I can set David Wallace\u2019s employee ID \nas the manager ID on the branch row. And so now I\u2019m inserting in the corporate branch. So, I\u2019m going to go ahead and do that. And then what I need to do now \nis I need to update that David Wallace entry  to say that he works for \nthe corporate branch, right? So, down here I\u2019m saying UPDATE employee. SET branch_id equal to 1. WHERE employee ID is equal to 100. So, that will go ahead and update David Wallace. So, the last thing we're going to do now is just insert \nthe last employee into the corporate branch. So you'll see Jan Levinson is actually \ngetting inserted into there. So, I'm going to go ahead and run this. And so, now we have all of our employees \ninserted into the corporate branch. I\u2019m going to do the same thing \nfor the other branches. So, I\u2019ll do the same thing for the Scranton branch. And here I have the code to do that. So, again, I\u2019m inserting in the manager \nof the Scranton branch. So, I\u2019m doing that right now, \nwhich is Michael Scott. And then I\u2019m inserting the \nactual Scranton branch. And then I\u2019m updating Michael Scott \nto say that he works at the Scranton branch. And then finally, I\u2019m adding in Angela, Kelly. And I\u2019m also adding in Stanley. So, now I have all of the employees \nin the Scranton branch. And again, we have to do it that way \nbecause we have this like circular relationship  with the foreign keys between \nthe Employee and the Branch table. So, then finally we'll do the same thing \nfor the Stamford branch. I\u2019m inserting the manager of the Stamford branch. And then I\u2019m inserting the actually Stamford branch. And them I\u2019m updating the manager of the Stamford \nbranch to say that he works at the Stamford branch. And then I\u2019m adding in these other employees. So, Andy Bernard and Jim Halpert. All right, so now that we've done all stuff \nwith the employee table and the branch table,  we can kind of move onto doing the other ones. And hopefully, that shows you how \nyou might insert information  or how you might have to insert information \ninto a more complex database schema, right? When we're just inserting into the student table, \nit\u2019s really easy. But when we have foreign keys linking \nall over the place,  it can get a little bit complicated. So, now though that is the most complex inserting \nwe're going to have to do. So, now we can just insert normally. So, we can INSERT INTO branch_supplier. And I\u2019m just going to go ahead and click through \nall of these and insert them in turn just like this. All right, so I\u2019ve gone ahead \nand ran each one of these INSERT statements. So, we inserted everything \ninto the Branch Supplier table. Now, I\u2019m going to insert everything \ninto the Client table. And again, this information is just the information \nthat you see over here  that\u2019s just written out into, you know, \ndatabase or SQL commands. So, I\u2019m going to go ahead \nand insert each one of these. And then finally, we'll insert \ninto the Works With table. So, again, this is just a bunch of numbers \nand stuff like that. All right, so now we've gone ahead and populated \nall of these database tables with all the information. So, why don\u2019t we check it out? I\u2019m going to say like SELECT ALL from employee. So lets see all the different employees that we have, \nmake sure everything worked. So, down here you'll see that we have \nall of these different employees. We can do the same thing for like Works With. So, let\u2019s see if we got all that data. And you can see that we do. So, now our database is actually populated \nwith all of the information that I have over here. So, again, you can get all that code \nfrom the description below. But hopefully this kind of shows you guys how, you \nknow, we can go about designing a database schema  or, you know, go about creating \na database schema like this inside of MySQL. You can see it\u2019s not as straight forward \nas it was with the student table. But we can do different things to make it happen. [More Basic Queries] In this tutorial I\u2019m going to show you guys \nsome awesome SELECT statements  which will allow us to query the company database  that we've been setting up \nfor the last couple tutorials. So, basically, I\u2019m going to give us some little prompts \nand we'll see if we can figure out how to get the data. So, first thing we're going to do \nis try to find all employees. So, our first task is to get \nall the employees from the employee table. And you'll see over here, this is essentially \nall of the data that we have stored in our database. So, let\u2019s see if we can find all employees. I\u2019m going to say SELECT and I\u2019m just going to say *. So, SELECT * would mean SELECT ALL COLUMNS \nfrom the Employee table. And this should actually do it. So, just by saying this, I\u2019m going to run this \nand we'll see what we get. So, down here in the results \nwe have returned all the employees. Cool. So, we were able to get all of the employees. Let\u2019s try another one. How about we'll try to find all clients. So, now instead of finding all employees, \nwe'll see if we can find all the clients. So, basically it\u2019s the same thing. But all I have to do is change employee to client. So, now we're grabbing information \nfrom the Client table. So, I\u2019m going to run this and you'll see down here \nwe\u2019re getting all of the clients. Cool. So, that\u2019s, you know, how we can \njust get all the stuff from a single table. Let\u2019s try another one. Find all employees ordered by salary. So, this one is a little bit different. Not only do we want to find all the employees, \nbut we want to order them by how much they make. So, we'll say SELECT ALL from employee. And now we want to order. So, we can just say ORDER BY. And we want to specify what column \nwe want to order these by. So, we could say salary. So, now I\u2019m going to run this. And you'll see down here, \nnow we get all the employees  but they\u2019re ordered by how much they make. So, down here, this employee makes 250k a year. And it goes all the way down to 55k a year. Let\u2019s see if we can do this though. So, the richest employee, \nor the employee that makes the most starts. So, we can say DESC for descending. And now this will list them all out in descending order. So, the 250,000 guy starts up at the top. And then we go down to 55,000. All right. So, that\u2019s pretty cool. And that shows how we could execute that query. So, let\u2019s try another. It says Find all employees ordered by sex then name. So, what we want to do is order \nall the employees by what sex they are. And then within those orderings, we want to order \nthem by their name, alphabetically. So, I can say SELECT ALL FROM employee. It\u2019s the same. ORDER BY \u2013 this time, we're going to do sex. So, why don\u2019t we do first name. And then we'll do last name. So, now when we run this, you'll see here \nall of these ordered first by sex. So, we get female and then here\u2019s all the males. And then within that, \nthey\u2019re actually ordered alphabetically. So, we'll start with the first name. So, Angela is first, then Jan, Kelly. And then these are all the girls. And then down here we have the guys. So, Andy, David, Jim, Josh, etc. And then if there were any duplicates \nwith the first names  or there were, you know, \ntwo that were the same,  then we would defer to the last name \nas we specified up there. All right, let\u2019s try another query prompt. So, we'll ask for a different piece of information. So, it says Find the first 5 employees in the table. So, this is a situation we could say FROM employee. SELECT ALL FROM employee. And here we can limit it to 5 employees. So, SELECT ALL FROM employee.\nLIMIT 5. That will give us the first five employees. So, you'll see down here, \nwe just get the first five like that. All right, let\u2019s do a few more \nand we'll see if we can mix it up a little bit. So, let\u2019s try to find the first \nand last names of all employees. So, this time we're actually just trying \nto get the first and the last names. So, up here we could say \u2013 instead of SELECT * \nwe can just SELECT first_name and last_name. Just like that. So, over here I\u2019m going to click Run. And you'll see now instead of getting all that stuff, \nwe're just getting first and last name. So, I\u2019ll actually show you guys \nanother thing we can do. So, here\u2019s the prompt. It says find the forename \nand the surnames of all employees. So, this is actually similar, but you'll see down here \nwhen we return to the first and last names,  the columns were named first_name and last_name. But there\u2019s another keyword \nthat we can use in SQL which is called AS. So, I can say SELECT first_name. And I can say AS forename. And we can say last_name AS surname. And what this is going to is it\u2019s going to \nreturn the first names and last names,  but instead of naming \nthe columns first_name and last_name, it\u2019s going to name them forename and surname. So we're going to go ahead and run this. And you'll see we get exactly the same thing except \nnow it\u2019s calling the columns forename and surname. So, that\u2019s kind of a useful thing you can do. And there\u2019ll be certain circumstances \nwhere you want to name the columns differently  depending on what you need. All right, so there\u2019s one more I want to show you guys,  and I\u2019m actually going to introduce you \nto a new SQL keyword. So, the prompt is find out all the different genders. So, what we want to do is figure out \nwhat are all the different genders  that employees are stored \nas inside of the table. So, what we can do is we can use \nthis special keyword called DISTINCT. So, I can say SELECT DISTINCT. And then the name of the column \nthat I want to select DISTINCT. And what this is going to do is when I run this, \nyou'll see down here we're getting M, F. So, we're getting male and female. So, those are all of the different sexes \nthat are stored inside of the table. I could do the same thing for something else. So, we could do like SELECT DISTINCT branch_id. And this will tell me all the different branch ID\u2019s \nthat are stored on the employee. So, you'll see down here \nwe have different branch ID\u2019s 1, 2, and 3. So, those are all of the distinct branch ID\u2019s \nthat employees have. And so, that\u2019s this DISTINCT keyword is pretty useful \nif you want to find out like, you know,  what are the different values that are stored \nin a particular column. All right, so that should kind of show you guys. There\u2019s a little bit more about \nhow we can use these select queries. And it kind of gave you guys a chance \nto see how we might query data  from the company database schema \nthat we set up. [Functions] In this tutorial I\u2019m going to show you guys \nsome SQL functions. Now, an SQL function is basically just a special little, \nkind of like block of code that we can call,  which will do something for us. So, these will like count things or they'll give us \naverages or they'll add things together. And they can be really useful for getting information \nabout the data in our tables. So, I\u2019m going to give you guys \na couple different prompts  and then we'll figure out how we could solve them. So, over here, I have a prompt \nthat says Find the number of employees. So, this is kind of a, you know, \nmaybe something that you\u2019d want to do. We want to figure out how many employees \nare in the database. So, what I could do is I could say SELECT. And I can use a special SQL function called COUNT. So, I can just type COUNT like that. And then open and close parenthesis. And in here I want to put whatever I want to count. So, basically we could just put in like emp_id. And this will basically tell us how many \nemployee ID\u2019s are inside of the table. And since the employee ID is the primary key, \nthat\u2019ll tell us how many employees we have. And then I can just say FROM employee. So, basically what I\u2019m doing here  is I\u2019m asking SQL to select how many employees \nare inside of the Employee table. So, when I run this, you\u2019ll see down here we get 9 \nbecause there\u2019s 9 employees inside of the table. And you can see over here \nwe have 100 through 108 which is 9. Another thing we could do would be to count \nhow many employees have supervisors. So, this is going to be a different number. You\u2019ll see over here that 1 employee, \nDavid Wallace doesn\u2019t actually have a supervisor. So, we could check that out. We could say SELECT. And I can say super_id. And now when I run this, we should get 8 instead of 9 \nwhich we do down there. So, this will count how many entries \nin the database table actually have values. Another thing we can do \u2013 \nand here\u2019s another prompt,  which should be kind of interesting to see \nif we can figure it out. It says Find the number \nof female employees born after 1970. So, this is a little bit more specific, \nbut nonetheless it\u2019s kind of the same. So, first thing we want to do is count \nhow many employees we have. So, I\u2019m going to select COUNT \nemployee ID FROM employee. But I want to limit the results that we get. So, I\u2019m going to say WHERE. And here, I\u2019m going to check these conditions. So, I\u2019m going to say sex is equal to female. And birth_date is greater than. And over here, I\u2019m actually going to put in a date. And so, when I put in I date, \nI\u2019m just going to put the 4-digit year. So, I can say, 1970. And then a hyphen. And then put in the month. So, we'll just say 01 and then 01. So, this would be like January 1st, 1970. So, this will tell us the number \nof female employees born after 1970. Or I guess we would put this as 1971. So, let\u2019s run this. And now you'll see that we get a count of 2. So, there are 2 female employees in \nthe database table that were born after 1970. And you can see over here, \nlooks like we have one born in 1971. Angela Martin. And then one born in 1980. So, that actually makes sense. All right, lets try another one. Here\u2019s another prompt. It says Find the average of all employee\u2019s salaries. So, this is a little bit different. In this case, we want to find out \nthe average of all of the employee\u2019s salaries. So, instead of COUNT we can say AVG. And then inside of parenthesis \nwe can just put again the column. So, I can say salary. And then over here we can say FROM employee. And what this will do is it\u2019ll tell us \nthe average of all the employee salaries. So, I\u2019m going to go ahead and run this. And you'll see down here the average \nlooks like $92,888. And so, if we wanted, we could filter this further. So, let\u2019s say I wanted to find the average \nfrom all the employees who are male. So, I could say WHERE sex \nis equal to male, just like that. And now this will give us \nthe average of all the male salaries. So, here it looks like it\u2019s a little higher, 101,333. That\u2019s probably because David Wallace \nmakes 250 grand a year. All right, so that\u2019s kind of interesting. Let\u2019s try another one. So, how about this. Why don\u2019t we try to find the sum \nof all employee salaries? So, instead of finding the average, \nwe're going to find the sum. So, over here, instead of AVG I can say SUM. And that stands for SUM. And what this will do is it\u2019ll add \nup all the entries for the salaries. So, this would basically tell us like how much the \ncompany is spending on payroll to pay the employees. So, over here I\u2019m going to click Run. And you'll see the company is spending \na total of $836,000 on payroll. So, that\u2019s how much the company \nis paying its employees. I want to show you guys one more thing we can do \nwhich is called aggregation. And aggregation is basically \nwhere we can use these functions  and we can display the data \nthat we get back in a more helpful way. So, I have a prompt up here that will \nkind of get us started with this. So, the prompt is find out how many males \nand how many females there are. So, this is actually an interesting point. Let\u2019s say we want to figure out \nhow many males or females were in the company. Well, I can say over here SELECT COUNT. And instead of saying salary, I\u2019m going to say sex. And so, let\u2019s say that we just did this, right? This is going to tell us how many employees there are \nthat have an entry in the sex field, right? So, we get 9. But if we wanted to also display how many males \nand how many females there are,  we're going to have to do a couple things. So, over here I can say COUNT comma. And then I can just say sex. So, what this is going to do is it\u2019s going to return \nnot only the count,  but also it\u2019s going to return which sex it is. So, I\u2019m going to click run. And you'll see over here there are 9. And it says male. But this still isn\u2019t exactly what we want. So, what we can do is we can come down here \nand we can say GROUP BY. And what this is going to do, is it\u2019s going to group \nthis information by the column that I put over here. So, now when I run this, you'll see \nit\u2019s going to tell us exactly what we want. So, it\u2019s going to say 3 Female and 6 male. And that\u2019s because I\u2019m telling SQL \u2013 I\u2019m telling MySQL \nto group the information that it gets by sex. So, it\u2019s counting how many entries or how many \nemployees have an entry in the sex column. And then what it\u2019s doing is it\u2019s printing this data out \nalongside of whether they're male or female. And it\u2019s giving us that information. So, that is what we would call like aggregation. And its really awesome. And you can use this GROUP BY keyword to do that. So, let\u2019s do that again. Why don\u2019t we try another one? Here\u2019s another prompt that we can look at. It says Find the total sales of each salesman. So, this is kind of interesting, right? Down here we have this Works With table. And this kind of gives the information \nabout which employees sell what. And you'll notice I have like employee 105, right? Right here, sold 55,000. Employee 105 also sold 33,000 \nand also sold like 130,000. So, what if we want to figure out the total \nthat each employee actually sold? Well, I can do something similar. So, I can come over here and I can say SUM. And here we're going to say total_sales. And then over here we'll print out the employee ID. And instead of grabbing this from the employee table, \nwe're going to grab this from the Works With table. And then we want to GROUP this BY employee ID. So, basically what this is going to do is it\u2019s going to \ntell us how much each employee has sold. So, you'll see over here, \nemployee 102 sold $282,000. Employee 105 sold 218,000. 107 sold 31,000, etc. So, we're able to get all of that \ninformation given to us. Now let\u2019s say if we wanted \nsomething slightly different. So, let\u2019s say that instead of finding \nthe sales of each salesman  we wanted to figure out how much money \neach client actually spent with the branch. Well, instead of using employee ID over here, \nwe can just say client ID. And we'll change this to client ID as well. And now what this will do is it\u2019ll tell us \nhow much each client spent. So, I\u2019m going to run this and you'll see \ndown here we get all this information. So, client 400 spent $55,000. Client 401 spent $267,000, right? And so, we can use aggregation in order to organize \nthe data that we get from using these functions. So, I can add up the total sales of each client. And I can group them by client ID. And so, that\u2019s kind of how that works. And so, aggregation can be extremely useful. And it\u2019s definitely something \nyou want to play around with. So, we have this entire database schema over here. And so, what you want to do is just kind of, you know,  try to give yourself little prompts \nlike I\u2019m giving up here, right? So, I kind of wrote out these little prompts. And they're kind of like little problems \nthat we need to solve. So, we want to, you know, be able to figure out \nall the different information from the table. [Wildcards] In this tutorial I\u2019m going to talk to you guys about \nwildcards and the LIKE keyword in SQL. Now wildcards are basically a way \nof defining different patterns  that we want to match specific pieces of data to. So, this would be a way to kind of like grab data \nthat matches a specific pattern. And I\u2019m going to show you guys \nexactly how this works. So, I have over here a prompt. And it just says Find any clients who are an LLC. So, this is kind of an interesting prompt. Let\u2019s say that we want to query our database \nand find any clients who, you know, were like an LLC. And you'll see over here in the Client\u2019s table, \nwe actually have one, John Daly Law, LLC, right? So, this is a limited liability company. And this is kind of what we're looking to find \nwith our search. So, I\u2019m going to show you guys how we can use \nwildcards in order to find something like this. So, I could say SELECT ALL FROM client \nbecause I want to grab a client. And now I can use the WHERE keyword. So, I want to filter the results, right? WHERE \u2013 I\u2019m going to say client_name. And I\u2019m going to use this keyword called LIKE. And LIKE is a special SQL keyword \nwhich we're going to use with wildcards. Now, we can say LIKE. And then over here we want to write out \na little expression or a little statement. So, I\u2019m going to make an open \nand closed quotation mark. And we'll put a semicolon over here. And now, inside of here, I can uses a couple of \ndifferent special characters. So, basically what I can do here \nis define a pattern, okay? And if the client\u2019s name \u2013 if the specific client\u2019s name \nmatches the pattern that I define over here,  then this condition or this statement here will be true \nand we'll end up returning that client. And so, we can basically use wildcards \nto do a bunch of different stuff. So, inside of these quotation marks \nwe can use two special characters. There is this percent sign. And this stands for any number of characters. And then there\u2019s this underscore \nwhich stands for one character. And I can use these in order \nto define certain patterns  that can be used by the database \nin order to find what we need. So, over here I could say LIKE. And I could say %LLC. Basically, what this pattern is saying is if the client\u2019s \nname is LIKE this pattern, then we want to return it. So, in other words, if it\u2019s any number of characters \nand then an LLC at the end, then we want to return it. So, this percent sign is going to stand \nfor any number of characters. So, that means any characters. Anything can come before that. But that would mean that the name \nhas to end in LLC. So, you'll see over here John Daly Law, LLC \nhas a bunch of characters here. And then the last three characters are LLC. And that\u2019s kind of standard. Most limited liability companies \nwill be set up like that. It\u2019ll be like company name, LLC or John Daly Law, LLC. So, this wildcard, if there\u2019s any company names \nlike that that end with LLC  is going to catch them \nbecause it\u2019s using this percent sign  because basically means \nany number of characters can come before this. And then LLC. If you\u2019re familiar with regular expressions, \nthis is very similar to regular expressions. It\u2019s just a more simplified version. So, I\u2019m just going to click Run. And you'll see down here \nwe returned John Daly, LLC, just like that. So, that\u2019s how we could use these wildcards and this \nLIKE keyword in order to find something like that. So, why don\u2019t we try another one? So, I have another little prompt here \nthat we can see if we can figure it out. So, it says Find any branch suppliers \nwho are in the label business. Okay, so this is kind of interesting. Find any branch suppliers \nthat are in the label business. Well, over here we're going to change this. So, instead of looking in client \nwe're going to look in branch_supplier. And then down here \nwe're going to do the same thing. Except here, we're just going \nto say supplier_name. So, over here in the Branch Supplier table we have \na bunch of different branch suppliers, right? These would be like companies \nthat supply products to our company. And you'll see there\u2019s actually a couple of these \nthat have the word Label in them. And so, if the word Label is in the company\u2019s name, \nthen we know they probably sell labels. And so, what I could do is I could say use a wildcard  to see if the word label shows up \nanywhere inside of their names. So, what I could do is I\u2019m actually going to \ncome over here and I\u2019m going to change this up. So, basically we're going to have \nany number of characters. We're going to use this %. And then I'll just say Label. And then we'll make another one with another %. So, actually, why don\u2019t we check to see \nif the word Label is actually in there. So, it\u2019s going to be % and then Label, just like that. So, this is going to be our wildcard. So, this will basically match if the supplier name \nhas the word Label in it somewhere. So, now I\u2019m going to run this. And you'll see down here \nwe get this company, J.T. Forms & Labels. And so, actually I thought there was two of them. Let me see. Okay, yeah. So, it looks like I have a typo here. So, it looks like when I was inserting the data \nI spelled Labels wrong on this column. So, that\u2019s going to be why that one is not showing up. But if we had \u2013 if I had spelled this correctly, \nthen Stamford Labels would also have shown up. So, that kind of shows you guys \nhow we can do something like that. So, why don\u2019t we find another one. All right, so this one says Find \nany employee born in October. So, this is kind of interesting. You'll see over here on the employee table we're \nactually storing the birthdates for all the employees. And they're all structured the same exact way. We have a 4-digit year, a hyphen, \nand then the 2-digit month. Now, October is the 10th month. So, let\u2019s see if we have any employees. So, we have one employee down here, \nJim Halpert was born in October. So, what we can do is let\u2019s see if we can design \na wildcard that will figure that one out. So, over here we can change this to employee. So FROM employee. And we want to check to see \nif the birthdate is LIKE the wildcard. So, what we can do is we can \nactually use this character right here. It\u2019s this underscore. So, the underscore represents any single character. So, the percent sign represented \njust like any number of random characters. Any number of characters would match it. And the underscore represents one character. And we can use that to our advantage. So, we know the way \nthat these dates are formatted, right? It\u2019s a 4-digit date, a hyphen. Or it\u2019s a 4-digit year, a hyphen, \nand then the 2-digit month. So, we could do 1, 2, 3, 4 underscores, \na hyphen, and then a 10. And then we can do this percent sign. So, what this is going to match, it\u2019s going to match \nwith any four characters, a hyphen, and then 10. So, this should give us all of the birthdays \nthat are in October. So, I'm going to run this. And you'll see over here we get Jim Halpert. So, it says Jim Halpert \nand he is indeed born in October. So, you can do this for any month. We can see if there\u2019s any \nemployees born in February. And you'll see down here,  it looks like we have two employees born in February, \nalso born in different years. So, that kind of gives you an idea \nof how we could do something like that. Again, we're using these wildcards. All right, so let\u2019s try one more. It says Find any clients who are schools. So, this one is kind of interesting. Basically, we're looking for any clients \nthat might be schools. So, what we could do is we could say SELECT ALL \nfrom client WHERE client_name. So, why don\u2019t we search the client name \u2013 is LIKE. And then over here we'll define a wildcard. Basically, let\u2019s just look for anything \nthat has school in it. So, we could say %school and then %. So, this is obviously like a little bit general and broad,  but hopefully it should at least \ngive us all of the schools. So, I\u2019m going to go ahead and run this. And you'll see down here, \nit looks like we have 1 client that\u2019s a school. And it\u2019s Dunmore Highschool. And the branch ID is 2. So, that is really the basics of using these wildcards. So, again, we have the percent sign \nwhich is going to represent any number of characters. And then we have the underscore. And the whole idea is we want to build these little \nexpressions here which we'll be able to match. So, like the client name \nshould be able to match this expression. And if it does, then we're going to \ngo ahead and return it. And those can actually be really useful  when you\u2019re just trying to, you know, \nkind of query something from a database. So, imagine that you're building \nlike a searching application  and the user entered a bunch of search terms. You could use something like this in order to \nsearch the database for you. [Union] In this tutorial I\u2019m going to talk to you guys \nabout unions in SQL. Now, a union is basically a special SQL operator  which we can use to combine the results \nof multiple select statements into one. So, I might have, you know, two or three \ndifferent select statements that I\u2019m using. And if I want it, I can combine all of them \ninto the same result  and get just a big list or a big table back \nfrom the database. So, I\u2019m going to show you guys how we can do this. And I\u2019m actually going to give us some prompts \nso we can kind of practice. So, over here, I have prompt that says \nFind a list of employee and branch names. So, this is kind of interesting. We can actually use the UNION operator \nin order to do this. So, first thing, why don we see how we could just grab \njust the employee names and just the branch names. So, if I wanted to just grab the employee names \nI could just say SELECT first_name. And why don\u2019t we just grab the first name \nFROM employee, right? So, that\u2019s pretty easy. I mean that\u2019s as easy as it gets. We're just getting all the first names \nfrom the employees. Let\u2019s do the same thing for branch name. So, I could say SELECT branch_name \nFROM branch, right? Again, pretty simple. So, this over here will give us all the names \nof the employees. So, if I was to just run this, you'll see \nwe get all the names of all the employees. And if I was to run this, we get the names \nof the all the branches. But how can we combine those together \ninto one single statement  and then just get a list with \nall that information in it? Well, I can use the UNION keyword. So, over here I can just say UNION. I\u2019m going to actually going to \nget rid of this semicolon. So, now we have one single SQL query which is going \nto ask the relational database management system  to return not only the employee first names, \nbut also the branch names in a single column. So, I\u2019m going to go ahead and run this. And you'll see down here \nthat we get this big column right here. Just says first_name. And then we have all of the names of the employees,  but down here we also have the names \nof the branches. So, Corporate, Scranton and Stamford. We have all that information. And it\u2019s all combined \nwith the names of the employees. So, this is actually pretty cool. And when we're using unions, \nyou can do unions on a bunch of different things. There are a couple rules though. So, the first rule is that you have to \nhave the name number of columns  that you're getting in each SELECT statement. So, in this first SELECT statement, \nI\u2019m grabbing one column. In the second SELECT statement, \nI\u2019m grabbing one column. If I was to come up here \nand also try to grab like last_name,  now when I run this, we're going to get an error  because up here we have two columns \nand down here we only have one. So, that\u2019s the first rule. You can do that. They have to have the same number of columns. They also have to have a similar datatype. So, first_name and branch_name, \nthey\u2019re both strings, right? So, they're both of a similar datatype, \nso we're able to return them in the same result. But if you had two things \nthat were very different datatypes  then it might not necessarily work out as well. So, that is basically how we can do these. And that kind of just show you guys \nhow we can use the UNION operator  in order to combine the results \nfrom multiple statements. If we wanted, we could add in another one too. So, I could say like UNION again. And now we can UNION all of that \nwith like SELECT client_name FROM client. So, now I'm grabbing not just the names of the \nemployees and the branches, but also the clients. So, when we run this now, you can see we're getting \nthis really long list that has all these names. Now one thing you might notice is that \nthe column name up here is first_name. So, this is saying that it\u2019s first_name when in reality, \nyou know, that\u2019s not necessarily what this is. And so, over here you'll see that it\u2019s first_name  because the first SELECT statement, the column \nthat we were grabbing was called first_name. So, that\u2019s why that\u2019s showing up as first_name. But if you wanted, you could change that. So, I could say first_name AS \nand then I can change the name. So, I can just say like Company_Names. And so, now the column name is going to be \nCompany_Names instead of first_name. So, now this is just like all the different names \nthat we have stored in the company database. So, hopefully that kind of makes sense \nand that\u2019s kind of how we can use UNIONs. I\u2019m going to show you guys a couple \nother cool ones that we can do. So, I\u2019m going to pull up another prompt here. Why don\u2019t we take a look? It says find a list of \nall clients & branch suppliers\u2019 names. So, this is actually pretty similar. So, we can SELECT client_name FROM client. And then we can also UNION this with SELECT \nsupplier_name FROM branch_supplier. And so, now we're going to get a table with \nall the client names and all of the supplier names. So, let\u2019s run this. And you'll see over here we get all that. So, we have all of the clients \nand then we have all of the suppliers. And you'll notice over here on the Client table \nand the Branch Supplier table,  both of these have a branch_id column. So, the Branch Supplier has a branch_id column. And the client has a branch_id column. So, what we could do is we could use that. So, I could say like SELECT client_name. And we could also SELECT branch_id FROM client. And then we can SELECT supplier_name and the branch_id from the Branch Supplier. And that will give us now not only \nthe client names and the supplier names,  but also the branches that they're associated with. So, you can see down here \nwe get all of that information. Now, one thing I do want to point to \nis you'll notice over here  we have branch_id up here \nand branch_id down here. So, the Branch Supplier table and the Client table \nboth have a column called branch_id. And sometimes in a situation like this \nit can get a little bit confusing  because we have the same column name. But associated with different tables. And so, what a lot of people will do is they'll prefix \nthese column names with the table name. So, let\u2019s say like client.branch_id. Or they'll say branch_supplier.branch_id. And what that does is it basically \njust makes it a little bit more readable. So, now I know that this branch ID \ncomes from the Client table. And this branch ID \ncomes from the Branch Supplier table. You don\u2019t have to do that. But in a lot of circumstances, \nit can be extremely useful. So, I want to show you guys \none more thing we can do with UNION,  so I\u2019m going to give us another prompt here. And it basically just says find a list of all money spent \nor earned by the company. So, this one is kind of interesting. All the money that the company either spends \nor earns, we want to combine into a single list. So, basically, the company earns money \nthrough the total sales down here. And the company spends money by paying \nits employees in the salary field up here. So, we can combine those two. So, I can just say like SELECT salary FROM employee. And again, we can UNION that \nwith SELECT total_sales FROM works_with. And so, now this will give us that column. So, you'll see over here it\u2019s all of this money  that\u2019s either going in or out of \nthe branch combined together. Hopefully, that gives you a good idea \nof how UNIONs work. Now, obviously, these are very simple examples. But you can take this and kind of extrapolate it out \nto more complex examples. Union basically just combines \nthe results from two SELECT statements. That\u2019s essentially all it does. But again, there are certain rules like you have to have \nthe same number of columns in both statements. And they have to be like similar datatype \nand stuff like that. But UNIONs can be very useful for sort of combining \nall this data into a single place. [Joins] In this tutorial I\u2019m going to talk to you guys \nabout JOINs in SQL. Well, JOIN is basically used to combine rows \nfrom two or more tables  based on a related column between them. So, JOINs can be really useful for combining \ninformation from different tables  into a single result \nwhich we can then use to, you know,  obviously find out specific information \nthat\u2019s stored in our database. So, in order to teach JOINs, \nI\u2019m actually going to have us do one thing. We're going to insert another branch \ninto the Branch table. So, over here I just have the code to do that. I\u2019m inserting INTO branch the VALUES. So, the branch is going to have an ID of 4. The branch is going to be called Buffalo. And it\u2019s not going to have a manager ID \nand it\u2019s not going to have a manager start date. So, down here in this table that we've been using \nso far, we have branches 1, 2, and 3. Corporate, Scranton, and Stamford. Now we're adding a Buffalo branch. But the Buffalo branch doesn\u2019t have a manager ID \nand it doesn\u2019t have a manager start date. Both of those are NULL. So, I went ahead and inserted this into my database. And you'll see down here \nthis is now our branch database. So, we have 1, 2, 3, 4. All of these pieces of information. And then the manager ID for Buffalo is NULL \nand the manager start date is also NULL. So, that\u2019s actually going to come in handy  for what I\u2019m going to be showing you guys \nwith these joins. So, if I want to follow along, go ahead and do that. But if you're not going to be following along,  just know that Buffalo doesn\u2019t have a manager ID \nor a manager start date. So, now that we've inserted that into the database, \nlet\u2019s get started. So, I want to kind of show you guys what a JOIN is \nbefore I actually talk to you about what it does. So, I\u2019m just going to go ahead \nand show you guys an example. I\u2019m just going to paste in here. And then we'll talk about the example  and you'll be able to see exactly \nwhat the JOIN is doing. So, over here I have this. It says Find all branches \nand the names of their managers. So, we want to find all the branches in the database. And for each of those branches \nwe want to find the name of the manager. So, down here you'll notice \nthat I have this branch table. And the branch has this column here mgr_id, right? And inside the mgr_id \nwe have ID\u2019s of different employees. So, these ID\u2019s relate to employee ID\u2019s \nwhich are stored up here. Now, I want you guys to notice that \nthe employee ID column and the manager ID column  that we have down here are similar, right? They\u2019re both storing employee IDs. And so, this is basically a column that is shared  between the Employee table \nand the Branch table, right? Both of those tables have a column \nwhich stores employee ID\u2019s. And anytime you have a situation like that, \nyou can use something called a JOIN. And like I said, a JOIN is used to combine rows from \ntwo or more tables based on the related column. So, in our case, the related column \nis the ID\u2019s of the employees. So, over here, in order to find all the branches \nand the names of their managers we can use a JOIN. So, here I\u2019m saying SELECT. And I\u2019m selecting employee.emp_id. employee.first_name and branch.branch_name. Now, up to this point in the course,  we\u2019ve never used multiple table\u2019s columns \nup here in the SELECT statement. So, normally we just say like employee.emp_id, \nemployee.first_name. We wouldn't use \u2013 or we wouldn't specify anything \nfrom the Branch table. But because we're joining the tables,  we can actually specify that we want to \ngrab a column from the Branch table as well. So, just keep that in mind. So, when we get this table back, \nwe're going to be getting the employee ID,  the employee\u2019s first name, \nthe branch\u2019s name. So, that will basically give us the branch \nand the name of the branch manager. And I want to grab that information from employee. And then I\u2019m going to say JOIN branch. And so, when I say JOIN branch,  what this is going to do is it\u2019s going to join \nthe Employee table and the Branch table together. So, it\u2019s going to join them together into one table. And it\u2019s going to join them together on a specific column. Now, this is the column that both of these \nare going to have in common. So, I\u2019m going to say Join branch ON. And then over here, I can basically just say \nemployee.emp_id is equal to branch.mgr_id. So, basically I want to combine these two tables. Or I want to combine all of the rows \nfrom the Employee table  and all of the rows from the Branch table,  as long as the manager ID of the branch row \nis equal to the employee ID of the employee row. So, I\u2019m going to go ahead and run this \nand you guys will see what happens. And this should kind of clear up \nexactly what\u2019s happening. So, down here we get three columns. We get emp_id, first_name and branch_name. And remember, we specified that up here. I said employee \u2013 I want the ID, the first name, \nand then I want the name of the branch. So, down here, we're getting the employee ID. So, it\u2019s 100. We\u2019re getting the first name, which is David. And we're getting the branch name Corporate. So, this tells me that the manager \nof the Corporate branch is named David. The manager of the Scranton branch \nis named Michael. And the manager of the Stamford branch \nis named Josh. And if you look over there in our database table, \nthat\u2019s exactly right. And so, essentially, we combined a row \nfrom the Branch table, this branch name,  with the rows from the Employee table, emp_id \nand first_name into one single table, right? But we only combined them when the employee ID \nwas equal to the branch\u2019s manager ID, right? We have a bunch of employees over here. Michael, Angela, Kelly, Stanley, Josh, Andy, Jim. But not all of these employees have their ID \ndown here in the mgr_id column. So, only employees whose ID\u2019s match \nthe value here in the this mgr_id column  were joined together into this combined table \nthat we got down here. So, that is basically what a JOIN is. We can take rows from one table, \ncombine them with rows from another table. And it gives us information. So, this is pretty useful information, right? We got the name of the manager for a specific branch  even though that information \nwas stored in different tables. So, this is kind of the most basic version of a JOIN. And this is like just the normal join. You can see I\u2019m just using \nthis normal JOIN keyword up here. But there\u2019s actually a couple other types of JOINs. So, there\u2019s actually four basic types \nof JOINs that we can use. The first is just this general JOIN. And this is what\u2019s referred to as inner JOIN. And the inner JOIN is going to combine rows \nfrom the Employee table and the Branch table  whenever they have the shared column in common. So, whenever the employee ID \nis equal to the manager ID,  then that is going to get included \nin the table that gets returned back to us. But there\u2019s a couple of other types of joins. And I want to show you guys what they do. So, there\u2019s another which is called a LEFT JOIN. And you can just say LEFT JOIN just like that. And so, now instead of doing a normal JOIN \nwe're going to do what\u2019s called a LEFT JOIN. And I want to show you guys \nwhat happens when I run this. So, I\u2019m going to go ahead and run this. And you'll see over here that instead of \njust getting David, Michael, and Josh,  we also got all of the other employees \nfrom the Employee table. So, we got Jan, Angela, Kelly, \nStanley, Andy, and Jim. All of the employees got included in the results, right? Not just the employees who are branch managers. So, when we just use an inner JOIN, only the \nemployees who are branch managers got included. But when we used the LEFT JOIN, \nall of the employees got included. And here\u2019s the reason why. With the LEFT JOIN, \nwe include all of the rows from the left table. So, in our case, the left table \nis the table over here, right? It\u2019s the employee table. And the left table is basically \nthe one that is included in the FROM statement. So, whenever we use this LEFT JOIN, \nthat means all of the rows in the Employee table  are going to get included in the results. But only the rows in the Branch table that matched  are going to get included \nbecause the Branch table is like the right table. There\u2019s another type of JOIN we can use \nwhich is called a RIGHT JOIN. And so, I can just say RIGHT. Now, this is going to do the opposite. So, instead of including all of the rows \nfrom the Employee table, no matter what,  now it\u2019s going to include all of the rows \nfrom the Branch table, no matter what. So, I\u2019m going to go ahead and run this. And down here you'll see we have all of the rows \nfrom the Branch table. So, not only did we get the rows with had managers, \nbut we also got the rows which didn\u2019t. So, down here, remember, the Buffalo branch \nwhich we just added didn\u2019t have a manager. So, it didn\u2019t actually get linked to an employee. So, therefore, both of these things were NULL. So, in the LEFT JOIN, we got all of the employees. In the RIGHT JOIN, we got all of the branches. In other words, in the LEFT JOIN \nwe got all of the rows from the LEFT table. In the RIGHT JOIN we got all the rows \nfrom the RIGHT table. So, in certain circumstances \nyou're going to want to do either one of those. So, those are the three basic types of JOINs \nthat we can use in MySQL. There\u2019s actually a fourth type of JOIN \nthat I want to talk to you guys about. Unfortunately, we can\u2019t do it in MySQL \nbut it\u2019s called a FULL OUTER JOIN. And basically, in a FULL OUTER JOIN, it\u2019s basically \na LEFT JOIN and a RIGHT JOIN combined. So, remember, in the LEFT JOIN, \nwe grabbed all the employees  and the RIGHT JOIN \nwe grabbed all the branches. In a FULL OUTER JOIN you would grab \nall of the employees and all of the branches  no matter if they met this condition or not. So, like I said, there\u2019s not like \u2013 we can\u2019t just come \nover here and say like FULL JOIN in MySQL. We're not going to be able to do that. But I just wanted to let you guys know about it \nso that you kind of have context for it. So, these JOINs are really simple \nand they're really easy. And they can be really useful \nif you want to combine information. So, something as simple as getting the names \nof all the branch managers  and what branches they manage \nis really, really easy if we just use JOINs. [Nested Queries] In this tutorial I'm going to talk to you guys \nabout nested queries in SQL. Now, nested query is basically a query where \nwe're going to be using multiple select statements  in order to get a specific piece of information. So, a lot of times we're going to \nwant to get very specific information  and we're going to need to use \nthe results of one SELECT statement  to inform the results of another SELECT statement. So, this is a little bit more advanced and this is kind of \nwhen we're getting into more advanced query writing. But I want to show you guys how this works  because a lot of information that you\u2019re going to \nwant to get is going to involve using nested queries. So, let\u2019s go ahead and put a prompt up on the screen. It says Find names of all employees \nwho have sold over $30,000 to a single client. So, we want to get the names of the employees, \nif they've sold more than 50k to a client. So, the first thing I would do \nif we were trying to figure this out,  figure out how to write this query \nis let\u2019s just look at the information that we have. So, down here we have this Works With table. And the Works With table has total sales, right? And each one of these rows defines \nhow much a particular employee  has sold to a particular client, right? So, employee 105 sold $55,000 \nto client 400, etc, right? So, over here we have part \nof the information, right? In other words, here we have the total sales. But what we don\u2019t have is the employee\u2019s first name \nand they're last name, right? We don\u2019t have the actual employee\u2019s name. What we do have though is the ID \nof the employee who did it, right? So, we have the employee\u2019s ID. And we can use the employee\u2019s ID \nin order to get their first name and their last name. So, in this case we had part of the data here \non the Works With table. And we have part of the data up here \non the Employee table. And this is a situation \nwhere we can use a nested query. So, the first thing I\u2019m going to do \nis I\u2019m going to write a query  which is going to get me all of the employee ID\u2019s \nthat have sold more than $30,000 to a single client. All right, so we're going to start with Step 1,  which means we're getting all of the employee ID\u2019s \nfrom here if they\u2019ve sold more than 30k. So, let\u2019s go ahead and write that query. Shouldn't be too hard considering \nall the stuff that we know. So, I\u2019m going to SELECT emp_id FROM works_with. And I\u2019m going to select it WHERE total_sales \nis greater than 30,000. And we'll go ahead and end this. And actually, up here, \nI\u2019m just going to prefix this with the table name. So, I\u2019m going to say works_with.emp_id. And then down here we'll say works_with.total_sales just so it\u2019s more clear. Especially when we get into nested queries  it\u2019s usually useful to prefix everything with the table \nname just in case we have repeated column names. So, over here I\u2019m going to run this. And this should give us all the ID\u2019s of the employees \nwho have sold more than 30,000. So, you\u2019ll see we get 102 and 105 \nshows up three times. So, it looks like 105 has sold a lot of paper. And so, now we have all of the ID\u2019s of the employees \nwho have sold more than $30,000 worth of products. And so, what we can do now is we can figure out \nfrom this information,  we want to get those employee\u2019s \nfirst names and last name. And so, I\u2019m going to go ahead \nand write another query up here. I\u2019m going to say SELECT. And I\u2019m going to say employee.first_name. And why don\u2019t we do employee.last_name. And we're going to SELECT this FROM employee. And then over here we're going to say WHERE. And this is where we're going to go ahead \nand use a nested query. So, basically I want to select all of the employees \nwhose ID\u2019s we got from this query right here. So, what I could do is I could say \nemployee.emp_id IN \u2013  and remember, the IN keyword is going to \ngive us a result if the employee ID  is in values that we specify \ninside of these parenthesis. So, what I could do is \nI can actually nest this query inside of there. So, I can go ahead and take this and I can just paste it \nright in here in between these parenthesis. And one thing you want to keep in mind \nis just how this is formatted. So, you\u2019ll see I formatted this \nand it\u2019s indented from this query over here. And then I\u2019m going to get rid of this semicolon \nand we'll put a semicolon over here. So, basically what this is saying is I want to get  the first name and the last name \nFROM the Employee table  where the employee ID is IN the result of this query. So, if the employee ID got returned from this query,  which gave us the ID\u2019s of all of the employees \nwho have sold over 30,000,  then we're going to return \ntheir first name and last name. So, let\u2019s go ahead and run this. And you'll see over here, \nnow we're getting the names of the two employees. So, Michael Scott sold over 30,000 \nand Stanley Hudson also sold over 30,000. So, that is actually a really cool way \nwhere we can find out that information. So, that\u2019s how we can use a nested query, right? A lot of times you'll use this IN keyword. I\u2019ll also show you some other examples \nwhere we use other things. But in that case, we're basically checking \nto see if the employee ID is IN this result. All right, so now I have another prompt here. It says Find all clients who are handled \nby the branch that Michael Scott manages. So, this is another interesting one. It says assume you know Michael\u2019s ID. So, we're going to assume that we know \nwhat Michael Scott\u2019s ID is. This is another one where again, \nwe're going to need to grab data from one table  in order to inform the data from another table. So, the first thing that we want to be able to do  is figure out the branch ID of the branch \nthat Michael Scott manages, right? So, over here we have our branches \nand each one has a manager ID, right? And so, what we need to do is able to figure out \nwhich of these branches Michael Scott manages. Then once we have that information we can figure out \nall of the clients that use that branch ID, right? So, over here, the manager ID will map us \nto Michael Scott. And the branch ID will actually map us \nto the Client table over here  because it has the branch ID as a foreign key. So, the first thing we'll do is we'll figure out \nwhat branch Michael Scott manages. So, that should be easy enough. We can just say SELECT. And actually we'll just do the branch.branch_id \nFROM branch WHERE. And remember, we\u2019re going to assume \nthat we know Michael Scott\u2019s ID. So, I can just say branch.branch_id is equal to \u2013 \nand Michael Scott\u2019s ID is 102. So, I can just say is equal to 102. And so, what this should do, is it should give us \nthe branch ID of the branch that he manages. In this case \u2013 actually, whoops. Instead of branch_id this needs to be mgr_id. And this is going to give us 2, right? Because 2 is the Scranton branch \nwhich is the branch that Michael Scott manages. So, now that we have this piece of information,  all we want to do is just get all of the clients \nthat are handled by that branch. So, we can just say SELECT. And why don\u2019t we just get the client name? So, it\u2019ll say client.client_name FROM client WHERE. And over here, we're basically just going to say \nWHERE client.branch_id is equal to. And over here we're going to set \nan equal to the result of this query. So, we're going to set it equal to the result of getting \nthe ID of the branch that Michael Scott manages. So, down here, we'll put this statement  and you'll see, again, \nI\u2019m just embedding this in here. So, what\u2019s going to happen is when \nthe relational database management system  sees an embedded SQL statement like this, \nit\u2019s going to execute this first. And then it\u2019s going to execute the outer one. So, it starts inner and then it slowly goes outer. So, we'll be able to get the branch ID \nwhere Michael Scott is the manager. And then we can use that information \nto find all of the clients. So, over here, I\u2019m just going to click Run. And I\u2019m going to go ahead \nand get rid of this semicolon right here. And now we can go ahead and run this. And you'll see we get all of these clients. So, we get like Dunmore Highschool, Lackawana \nCounty, Scranton White pages, and FedEx. So, those are all the clients that are managed \nby the Scranton branch. Now, there is one more thing I want to point out  which is you\u2019ll notice down here we're setting \nclient.branch_id equal to. We're checking to see \nif it\u2019s equal to the result of this statement. But here\u2019s the problem, is this statement isn\u2019t \nnecessarily guaranteed to only return one value. So, if this \u2013 so, let\u2019s say that Michael Scott \nwas the manager at like multiple branches,  it\u2019s possible that this would return multiple values. So, what we want to do is just come down here \nand say, LIMIT 1. And that\u2019ll make sure that we only get 1 of these. So, now if I click Run, you'll see it does the same thing. Although, now we're just making sure \nthat we only have 1. So, anytime you're using something like a quality,  it\u2019s always a good idea to limit it down to 1 \nunless you\u2019re looking for a situation  where Michael Scott is going to \nbe managing multiple branches. In which case, we can use IN instead. All right, so that\u2019s kind of a little dip \ninto nested queries. Now, obviously these can get very complex. And really, you know, what\u2019s important is that you \nhave a solid understanding of the fundamentals. If you don\u2019t understand the fundamentals that we've \nkind of talked about up to this point in this video,  then using nested queries is really going to \nconfuse the crap out of you. All nested queries are is it\u2019s just kind of like \none query informing another query,  maybe informing another query, right? We just use the results from one query \nto get results from another query, etc. And as long as you can break the nested query \nup into its individual parts,  you should have absolutely no problem writing these. And really, the best way to get good at writing more \ncomplex queries like this is just to practice. So, the more you practice writing nested queries  and using all these things in combination, \nthe better you\u2019re going to get at it. [On Delete] In this tutorial, I\u2019m going to talk to you guys \nabout deleting entries in the database  when they have foreign keys associated to them. So, this is actually a pretty interesting topic. And over here in our company database we have \na pretty complex database schema, right? We have all sorts of foreign keys \nthat are linking between all sorts of places. And I want to pose to you guys a scenario. So, imagine over here I have my Branch table \nand I have my Employee table. So, imagine that I came over here in my Employee \ntable and I deleted one of the employees, right? So, let\u2019s say that I deleted Michael Scott. So, over here we have this employee, Michael Scott. And his branch ID is 2. So, Michael Scott has a foreign key here defined, \nwhich is branch_id, right? So, branch_id, Michael Scott\u2019s branch ID is 2  which means that Michael Scott belongs to the \nScranton branch which is right down there, right? But let\u2019s pose something. Like imagine that we were to delete \nMichael Scott from the database, right? Well, what\u2019s going to happen this manager ID \ndown here? So, if we delete Michael Scott, \nwe delete the employee with ID 102. What\u2019s going to happen to the manager ID? The manager ID is supposed to be linking us \nto an actual row in the Employee table. But if we delete Michael Scott, then all of a sudden \n102, that doesn\u2019t mean anything, right? Because Michael Scott is gone. His employee ID is no longer inside of \nour Employee table. And this is what I\u2019m going to talk to you guys \nabout today,  which is different things that we can do \nin order to handle this situation. So, specifically, I\u2019m going to talk to you guys \nabout two things. One is called ON DELETE SET NULL. And the other is called ON DELETE CASCADE. So, there\u2019s really two things that we can do \nwhen this situation occurs. And so, the first thing would be ON DELETE SET NULL. And ON DELETE SET NULL is basically \nwhere if we delete one of these employees,  that means that the manager ID that was associated \nto that employee is going to get set to NULL. ON DELETE CASCADE is essentially \nwhere if we delete the employee  whose ID is stored in the manager ID column,  then we're just going to delete \nthis entire row in the database. So, I\u2019m going to go ahead \nand show you guys basically how this works. So, over here I actually have the code \nfor creating this branch table. And this is the code that we used \nin one of the previous videos  when I was showing you guys \nhow to create this database. You'll notice over here on the Branch table it says  FOREIGN KEY (mgr_id) REFERENCES \nemployee(emp_id). And over here I said ON DELETE SET NULL. Basically, what I\u2019m saying here is that if \nthe employee ID in the Employee table gets deleted,  I want to set the manager ID equal to NULL. And so, let me show you guys \nhow this is going to work. So, over here I\u2019m going to go ahead \nand delete Michael Scott from the database  and we'll see what happens. And so, I\u2019m just going to go ahead and type out \nDELETE FROM employee WHERE emp_id is equal to \u2013  and we're just going to put Michael Scott\u2019s \nemployee ID which is 102. And I\u2019m going to go ahead and run this. And you'll see over here it says 1 rows affected. But I want to show you guys \nwhat happened inside of the branch. So, I\u2019m just going to SELECT ALL from branch. And let\u2019s go ahead and run this. You'll see down here the manager ID \nis now set to NULL. And that\u2019s because over here \u2013 \nbecause we deleted Michael Scott, right? So, we deleted the Michael Scott, \nthe 102 entry in the employee table. And so, now the manager ID which was storing that as \na foreign key is just going to be set equal to NULL. And that\u2019s because that\u2019s what we defined up here. So, in a situation like that, \nbecause we said ON DELETE SET NULL,  now that entry is just going to be equal to NULL. And the same thing actually happened \ninside of the Employee table. So, if I was to SELECT ALL from \nthe Employee table and I ran this,  you'll see now that a lot of these supervisor ID\u2019s \nare also set equal to NULL. And if you remember back to \nwhen we created the company database,  when we created the employee table, the super_id \nalso had ON DELETE SET NULL associated to it. And so, that\u2019s why when we deleted Michael Scott, \nall of the employees,  namely these three employees right here \nwho had Michael Scott as their supervisor,  you can see all these employees were \nat branch number 2. All of their super ID\u2019s ended up getting set equal to \nNULL because we had ON DELETE SET NULL there. So, that is ON DELETE SET NULL. And that\u2019s basically how that works. I want to show you guys also \nhow ON DELETE CASCADE works. So, we have this Branch Supplier table. And the Branch Supplier table also \nhad a foreign key like this,  but instead of saying ON DELETE SET NULL, \nwe said ON DELETE CASCADE. And when we use ON DELETE CASCADE, \nwhat that means is that if the branch ID  that\u2019s stored as the foreign key \nin the Branch Supplier table gets deleted,  then we're just going to delete the entire row \nin the database. So, down here in Branch Supplier, \nyou'll see that I have all of this stuff, right? So, I have like Hammer Mill supplies paper \nto branch_id 2. Or Uni-ball supplies writing utensils \nto branch_id number 2. If I was to delete Branch 2, in other words, \nif I was to delete the branch that had an ID of 2,  then all of the rows that had branch_id 2 here \nwould just get deleted. So, I\u2019m going to show you guys how that works. So, over here, we're going to go ahead and do that. So, we're just going to DELETE FROM branch \nWHERE branch_id is equal to 2. And so, when I go ahead and delete this, \nwhat\u2019s going to happen  is all of those branch supplier rows are going to \nget deleted that had 2 as their foreign key. So, now I\u2019ll just SELECT ALL from branch_supplier. And when I run this query, you'll notice \nthat there\u2019s no longer any branch ID\u2019s 2 in here. In other words, we got rid of all of the suppliers \nthat supplied Branch 2 when we deleted Branch 2. And that what\u2019s ON DELETE CASCADE \nis going to do for us. Instead of just setting those equal to NULL, \nit\u2019s going to go ahead and just delete them entirely. So, now that we kind of understand \nthe difference between those two,  I want to talk to you guys about the different \nsituations where we might use them. And actually, the Branch Supplier table \nand the Branch table are actually really good examples. So, in the Branch table we used ON DELETE SET NULL. And it was okay for us to use ON DELETE SET NULL  because the manager ID on the Branch table \nis just a foreign key. It\u2019s not actually a primary key. And so, the manager ID isn\u2019t like \nabsolutely essential for the Branch Table. However, if we look down here \nin the Branch Supplier table,  you'll notice that the branch_id, in other words, \nthe foreign key here is also part of the primary key. Which means the branch ID \non the Branch Supplier table  is absolutely crucial for this row \nin the database, right? And so, if the branch ID here, \nif this branch disappears,  we can\u2019t set this to NULL because \na primary key can\u2019t have a NULL value, right? And so, this can\u2019t be NULL. You have to just delete the entire thing. And so, that\u2019s why we use ON DELETE CASCADE \nas opposed to ON DELETE SET NULL. And honestly, you know, \nit\u2019s really up to you which one you want to use. But just know that if you have a situation \nlike Branch Supplier,  where a foreign key is also a primary key \nor also a component of a primary key,  then it always has to be ON DELETE CASCADE \notherwise you're going to run into trouble. So, that\u2019s the basics of those different ON DELETEs. So, ON DELETE SET NULL and ON DELETE CASCADE. And both of those are extremely useful when we're \ndefining foreign key relationships between tables. [Triggers] In this tutorial I\u2019m going to talk to you guys \nabout using triggers in SQL and MySQL. Well, a trigger is basically a block of SQL code \nwhich we can write  which will define a certain action that should happen  when a certain operation gets performed \non the database. So, I could write a trigger which would \nbasically tell MySQL to do something  when like an entry was added \ninto a particular table in the database. Or when something was deleted \nfrom a database table. And basically I can say like Hey, anytime, you know, \na row gets deleted from this table,  I want you to like insert something \ninto something else. So, triggers can be extremely \npowerful and extremely useful. So, I'm going to show you guys \nbasically how they work  and we'll just talk about like \nsetting them up and everything. So, the first thing we have to do, at least to follow \nalong with this tutorial is we're going to create a table. And you don\u2019t have to create this table. I\u2019m just doing this so we can illustrate \nwhat\u2019s happening. But this is not necessary for triggers. But I\u2019m creating a table called trigger_test. And it\u2019s just going to have one column \nwhich is just going to be a message. And I\u2019m just going to go ahead and create this. So, we're creating this table trigger test. And now what we can do \nis we can start writing out some triggers. Now, when we're using MySQL \u2013 and up to this point \nin this course we've been using this program PopSQL  which is actually an awesome program for, you know, \nwriting out different SQL commands. And it\u2019s been really great because it\u2019s, you know, \na bit easy for us to visual stuff. But when we're going to write triggers,  we're going to have to define \nthe triggers over here in the command line. And that\u2019s just because \nthere\u2019s one special thing that we have to do  which is change the SQL delimiter \nthat we're going to use. And I\u2019ll talk to you guys about that in a second. But in order to do that, we're going to \nhave to do it inside of the terminal. So, if you're on Windows you can just go down \nand open up the MySQL Command Line Client. So, it\u2019s this guy right here. That\u2019s what I have open. It might ask you to log in. If you're on the OSX and you're using Terminal, \nyou can just type in \u2013  if you just type in MySQL -u root -p. And then hit Enter, it should prompt you for your \npassword and then you should be logged in. And so, that\u2019s how you can \nget to this screen over here. And then once we're in here \nwe're going to want to use the database. So, I\u2019m just going to say use giraffe. And giraffe is the name of the database \nthat I created like in the first tutorial. So, whatever the database you created was, \nyou can just use that. And then over here, so once we have all that set up,  now we're ready to go \nand start creating these triggers. So, I need to actually execute the trigger code \nover here inside of the command line,  but we can actually just write it out over here inside \nPopSQL so it\u2019s a little bit easier to see. I\u2019m actually just going to show you guys \nsome different triggers  and then I\u2019ll kind of talk to you about it. So, I\u2019m going to go ahead and paste one over here. And this is actually a very simple trigger. So, the trigger is actually right here, \nwhat I have highlighted. And then you'll see over here, I\u2019m saying DELIMITER. So, I'm going to talk to you guys about the trigger first  and then I\u2019ll talk to you guys \nabout what that delimiter is doing. So, we can basically create a trigger \nby saying CREATE and then I can say TRIGGER. We're going to give this a name. I\u2019m just going to call it my_trigger. And I can say BEFORE INSERT ON employee, \nFOR EACH ROW BEGIN INSERT INTO trigger_test. So, what does all this mean? Basically, I\u2019m defining my trigger. I\u2019m giving it a name. And I\u2019m saying that before something \ngets inserted on the Employee table,  so before anything, you know, any new items \ngets inserted on the Employee table,  for each of the new items that are getting inserted,  I want to insert into the trigger test table \nthe values \u2018added new employee\u2019. So, basically what happens \nis when I define this trigger,  that means that before anything gets \ninserted on the employee table now,  I\u2019m going to go ahead \nand preform whatever is down here. And in our case, I\u2019m just inserting into trigger tests, \nthe values, \u2018added new employee\u2019. So, that\u2019s basically all it is. We're basically configuring MySQL to insert \na value into the Trigger Test table  whenever a value gets inserted \ninto the Employee table. And this can be really useful \nbecause it automates things, right? I can automate something that happens every time \na record gets inserted into the employee table. Now, over here we have these little DELIMITERs. And this DELIMITER is actually \na special keyword in MySQL. What this will do is it\u2019ll change the MySQL delimiter. So, normally, the MySQL delimiter \nis a semicolon, right? So, if I said like SELECT ALL from employee. I would end this off with a semicolon. That\u2019s the delimiter, right? That delimits the different SQL commands. But when we're writing these triggers out, \nyou'll notice that over here  inside of these FOR EACH and this END \nI have to use this semicolon over here. And so, because I\u2019m using the semicolon \nto end off this SQL command right here,  I can\u2019t actually use that same delimiter \nin order to end off the trigger creation. So, you have to put the semicolon here \nin order for this to work. But if I don\u2019t change the delimiter, \nthen this semicolon is basically going to tell SQL  that we're done creating the trigger, \neven though we're clearly not. And so, what I\u2019m doing up here \nis I\u2019m changing the delimiter to two dollar signs. So, basically now instead of the delimiter \nbeing a semicolon,  the delimiter is going to be two dollar signs. And you'll see, I create the trigger \nand then I'm using the two dollar signs  to delineate that the trigger is done being created. And then I can just delinear back to a semicolon. Now, the reason that I have to \ndo this over here in the terminal  is because in PopSQL you can\u2019t \nactually configure the delimiter. So, the delimiter is actually something \nthat\u2019s defined not on the like text editor level. It\u2019s defined like over here. So, basically we have to execute this over there. So, what I\u2019m going to do now is I\u2019m actually going \nto execute all of these pieces of SQL code over here. So, I\u2019m just going to change the delimiter. So, I'm going to paste this in. I'll hit Enter. And now I\u2019m going to paste in the actually part \nwhere I\u2019m creating the trigger. So, over here we'll paste this. And I\u2019m just going to hit Enter. And then finally, we're going to change \nthe DELIMITER back. So, I\u2019m going to change this back to a semicolon. So, hopefully now this trigger is all set up \ninside of MySQL. So, one thing we can do to test it \nis just to add in another employee. So, I'm going to go ahead \nand add another employee into the Employees table. So, we're going to add in Oscar Martinez. And let\u2019s go ahead and do that. And so, we added in Oscar. And now what I\u2019m going to do is SELECT \nfrom the Trigger Test table. So, assuming our trigger got set up correctly,  when we inserted an employee \ninto the Employee table,  it should have also inserted something \ninto Trigger Test that said Added New Employee. So, let\u2019s go ahead and run this SELECT statement \nand we'll see what happens. So, you'll see down here we get a message that says \nadded new employee. So, it looks like it worked, right? The trigger got set up correctly and therefore when \nwe inserted something into the Employee table  we actually ended up updating the Trigger Test table \nwith a new entry as well. And so, that is basically how we can use \ntriggers to do something like that. So, I want to show you guys \na couple other things we can do with triggers. I\u2019ll show you guys another one right now. I\u2019m actually going to, again, paste it \nand then we'll kind of talk about it. So, this one is actually very similar \nto the one which just made. But instead of over here, \nsaying like added new employee. Instead, I'm saying NEW.first_name. And so, what this is allowing me to do  is it\u2019s actually allowing me to access a particular \nattribute about the thing that we just inserted. So, again, we're inserting something \non the employee table. NEW is going to refer to the row \nthat\u2019s getting inserted. And then I can access specific columns from that row. So, NEW.first_name will give me the first name \nof the employee that\u2019s getting inserted. So, now if I was to come down here and \nI\u2019m actually just going to insert another employee. So, we're going to insert Kevin Malone. And let\u2019s go ahead and do that. And actually, whoops. I have to update the trigger over here. So, once again, I\u2019m going to do the same thing. I\u2019m just going to paste in all of this code over here \non the command line. So, we'll paste in the trigger. And actually need to change the name \non this real quick. So, we'll say my_trigger1 \nis what we're going to call that. And that\u2019s going to go ahead. And then we'll change the delimiter \nback to a semicolon. All right, so now let\u2019s go ahead \nand add in our Kevin Malone employee. So, I\u2019m going to run this. So, we added Kevin. Now if we SELECT ALL from Trigger Test,  you'll see down here not only did we add \na new employee, it says added new employee. That was that first trigger that we set up. But we also added the employees name \nwhich was Kevin, right? So, we were able to grab a specific piece \nof information from the new row  that got inserted and that\u2019s going \nto show up down there. All right, so there\u2019s one more thing \nI want to show you with these triggers. And it\u2019s actually going to be a more complex trigger. So, this is how we can use conditionals. So, I can use something like IF, ELSEIF, and ELSE. So, over here we have this trigger. So, it\u2019s basically the same exact thing \nas we did before. TRIGGER my_trigger BEFORE INSERT ON employee. And then for each row. This time we're using an IF statement. So, I\u2019m saying IF NEW.sex is equal to male,  THEN INSERT INTO trigger_test VALUES \nadded male employee. ELSEIF NEW.sex is equal to F, INSERT \nINTO trigger_test added female. ELSE INSERT INTO trigger_test, \nadded other employee. So, we're using IF ELSE logic. And basically, it\u2019s just if this condition up here is true, \nthen we do this. Otherwise, we check this condition. If that\u2019s true, we do this. Otherwise, we do that. So, if you\u2019ve ever programmed before, \nthen you're probably familiar with an IF statement. So, this is a very special type of trigger \nbecause we're using conditionals. So, I\u2019m going to go ahead \nand we'll put this one over here on the terminal. So, change the DELIMITER. And then we're going to put this guy over here. And whoops. Again, I forgot to change the name. So, this will be called trigger2. And put this over here. And then finally, we're just going to \nchange the DEMILITER back. All right, so now lets \u2013 again, \nwe're going to insert an employee. So, I\u2019m going to go ahead \nand insert a female employee. So, why don\u2019t we insert Pam Beesly. So, Pam Beesly is going to be a female. Which means when we insert Pam Beesly, hopefully \nit should say added female into the Trigger Test table. So, I\u2019m going to run this. And we added the employee. Now, let\u2019s SELECT ALL FROM trigger_test. And so all of these triggers are actually going to \ncompound on each other. So, we should have quite a few entries in here. So, we'll see when we added Pam, \nit said added new employee, Pam. Added female. So, that third trigger that we just created \nactually ended up working. So, you'll notice over here \nwe've been creating triggers for INSERT. But you can also create triggers for UPDATE \nand you can also make one for DELETE. So, anytime they're trying to INSERT, UPDATE, \nor DELETE, you can create a trigger. So, you can also do \u2013 in addition to BEFORE \nyou could also do AFTER. So, in certain circumstances \nyou won\u2019t want to insert into trigger_test before. You\u2019d want to INSERT AFTER. And you can go ahead and control it just like that. So, but basically, that\u2019s all the, you know, \nthe main stuff that we can do with triggers. These are very, very useful. And they'll allow you to do a bunch of cool stuff. We can also drop a trigger. So, I can say like over here in the terminal \nI can just say DROP TRIGGER. And it would be like my_trigger. So, this will drop my_trigger. And now, my_trigger is no longer going to be active. So, triggers are, like I said, very useful. And it\u2019s a really great way to kind of control \nwhat happens when other stuff happens. And you can automate a lot of the stuff \non the backend of your database. [ER Diagrams Intro] In this tutorial I\u2019m going to talk to you guys \nabout ER diagrams. More specifically I\u2019m just going to give you guys \nan introduction to ER diagrams. And we'll talk about how ER diagrams \nare put together,  all the different symbols in the ER diagrams \nand what they represent. Now, when you're designing a database,  one of the most important things \nis designing a database schema. And a database schema is basically just all \nthe different tables and the different attributes  that are going to be on those tables. So, maybe you have some requirements \nfor the different data  that needs to get stored inside of your database  and the different relationships that \nthat data is going to have. Well, you can use an ER diagrams \nto act as a middleman  between database or storage requirements \nand the actual database schema  that\u2019s going to get implemented \nin the database management system. So, an ER diagram is a great way \nto kind of take, you know,  data storage requirements \nlike business requirements. And sort of convert them \ninto an actual database schema. So, we can use the ER diagram to map out \nthe different relationships  and the different entities \nand the different attributes for those entities. And it can just be a really great way to organize \nour data into a database schema. So, an ER diagram is basically just a little diagram that \nconsists of different shapes and symbols and text. And it all kind of gets combined together to end up \ndefining, you know, a relationship model. So, without further ado, let\u2019s get started. I\u2019m going to show you guys all the different \nbasic parts of an ER diagram  and we'll kind of construct our own ER diagram. And it\u2019ll kind of give you guys an idea of all the \ndifferent symbols and stuff that we're going to use. So, in this example I'm going to be using \nthe example of like a school. So, let\u2019s say that I\u2019m working for a school \nand my boss comes to me and he\u2019s like,  \u201cHey Mike, I need you to design a database schema or \nI need you to design an ER diagram for our database.\u201d So, maybe this database is going to store information \nabout different students. And then maybe information \nabout like the classes that those students take. So, let\u2019s start looking at the different parts \nof the ER diagram. So, the first thing I want to talk to you guys \nabout are entities. And an entity is just an object that we want \nto model and store information about. So, for our school database we might want \nto store information about a particular student. So, inside of our ER diagram we can put an entity \nwhich is just going to be a square, just like this. And then we're going to \nhave the name of the entity that we're storing. So, it\u2019s going to be student. Next we can define attributes. So, attributes are specific pieces \nof information about an entity. So, over here we have our student entity. And then we might want to store like \nthe student\u2019s name, the student\u2019s grade number. So, like, what grade are they in. And then their GPA. So, we can store all different types of attributes. And we're going to make these little ovals and we're \ngoing to connect them to the entity just like that. So, the attribute is going to have the name \nof the attribute inside of an oval,  connected to our square entity. We can also define a primary key. A primary key is going to be an attribute that\u2019s going \nto uniquely identify an entry in the database table. So, you'll see over here I actually colored \nthe primary key different. Now, generally, for an ER diagram, \nyou\u2019re not going to be using colors. I just did that so it\u2019s kind of easier \nfor us to wrap our minds around. But whenever we're defining a primary key, \nwe're always going to underline. So, a primary key is just like a normal attribute, \nbut we're going to underline. So, here, our primary key is a student ID. And then I just have the GPA. So, you know, obviously I could put \nall of those attributes here. But I\u2019m just using two for now just  to keep it simple. So, we have our primary key, student ID, \nwhich is underlined, and then we have our GPA. And they're both connected to our entity. Next, we can define composite attributes. So, these would be attributes \nthat could be broken up into sub attributes. So, for example, if we wanted to store \nthe student\u2019s name,  but we can also store their first name \nand they're last name. So, name could be broken up further \ninto first name and last name. And so, in the case of a composite attribute you'll \nnotice that we have the main attribute here. It\u2019s connected to the entity. And then off of that main attribute \nwe have two other attributes  fname and lname \nfor first name and last name. We can also define a multi-valued attribute. So, if there\u2019s any attributes in your data model \nthat could have more than one value,  then you can put them in a multi-valued attribute  which looks just like an attribute \nexcept we have an extra circle. So, it\u2019s just two circles. And then inside, the name of the attribute. So, clubs, for example. Like a student might be involved \nin a bunch of different clubs. And so, clubs would be a multi-valued attribute. In other words, it could have more than one value. Like a student is not going \nto have more than one GPA. They're not going to have more than one name. They're not going to have more than one student ID. But they might have more than \none club that they belong to. So, next step is a derived attribute. And a derived attribute is an attribute \nthat can be derived from the other attributes  that we're keeping track of. So, we're not going to actually \nkeep track of the derived attribute. But it\u2019s just a way that we can sort of notate attributes  that could be derived from the attributes \nthat we're storing. So, down here I have my derived attribute. And you'll notice that it\u2019s just an oval \nwith these dashed lines. It\u2019s called has_honors. So, has_honors is an attribute \nthat we could derive from this GPA. So, maybe the school is going to say \nthat anybody with  a GPA of 3,500 or above is going to have honors. Well, we could derive that just from the GPA. So, we're not actually going to be \nkeeping track of this attribute,  but it\u2019s an attribute that we can derive \nfrom the GPA that we are keeping track of. So, we can just denote it like that. And sometimes it\u2019s useful to denote \nour derived attributes. So, we can also have multiple entities. So, over here you'll see I have my student entity. But I can also define another entity \nwhich would be like class. And so, a class would be like a particular class \nthat a student is taking, right? So, if I was in school, I might take like biology \nor chemistry, right? That would be what this class is over here. And then you'll see over here we have our primary key \nwhich is just going to be class ID. And so, when we have multiple entities,  we\u2019re going to want to define relationships \nbetween those entities. So, what I can do is I can define a relationship. And a relationship is basically \njust this diamond over here. And the relationship would basically \ndenote a student is going to take a class. So, a relationship is kind of like a verb, right? It\u2019s the student is related to the class \nin some way, right? So, the student is going to take a class. And a class can be taken by students. So, you can read this both ways. You can say the student takes a class \nor you can say that the class is taken by a student. And we can also define participation. So, you'll notice that the relationship \nI\u2019m connecting the two entities using these lines. So, the student is connected to the relationship \nusing a single line. And the classes connected to the relationship \nusing a double line. So, when you're defining relationships  you can define the participation \nof the particular entities to that relationship. So, when I use a single line, \nthis indications partial participation. What this  means is that \nnot all students need to take a class. So, when I use the single line. I\u2019m basically saying that only some \nof the students have to take a class, right? Not all students necessarily have to be taking a class. When I use this double line, \nit indicates total participation. Which means that all of the classes need to be taken \nby at least a single student, right? So, that means all classes must participate \nin this Takes relationship. So, all classes need to have students \nthat are taking them. So, you couldn't have a class \nthat has no students taking it. All classes have to have students that are taking it. And, you know, maybe that\u2019s not \nwhat you\u2019d want in your database. But in this case, that\u2019s how \nwe can denote something like that. So, I could use total participation to denote that \nall classes need to participate in this relationship. In other words, all classes need \nto have a student taking the class. So, that\u2019s basically how we can define relationships. And then obviously, partial participation \nand total participation. And so, over here, we can also define attributes \nabout a particular relationship. So, we have our Takes relationship. And you'll notice that I\u2019m defining at attribute \nabout this relationship which is grade. So, a student will take a class and the student \nwill get a particular grade for that class, right? So, I might take biology and maybe I get \nlike a B+ in biology. Well, that grade isn\u2019t necessarily stored \non the student entity  and it isn\u2019t necessarily stored on the class entity. It\u2019s stored on the relationship, right? So, the only way I can get a grade from a class \nis if I take it, right? And so, that\u2019s why the relationship attribute \nis stored on the relationship. And sometimes that'll come in handy. And so, we can also define relationship cardinality. And relationship cardinality is the number of instances \nof an entity from a relationship  that can be associated with the relation. Now, I understand that\u2019s \na very confusing definition. And I think relationship cardinality \nis something that trips a lot of people up,  so I\u2019m going to try to give you guys \na good explanation of it. So, over here we have a student \nand a student can take a class. But we can define relationship cardinalities on that. Basically, what this means is that a student \ncan take any number of classes. So, when we say M, that refers to any number. So, a student could take \nbasically multiple classes, right? A student could take 2, or 3, or 4 classes. And we can define the same thing for the class. So, we could say a class is taken \nby any number of students, right? So, a class can be taken by 5 or 10 or 30 students. That\u2019s basically what that would define. So, this would be an NM cardinality relationship. But we can also define \nother cardinality relationships. So, we could say like 1 to 1. So, in a 1 to 1 cardinality relationship \nwe would say that a student can take one class  and a class can be taken by one student. We can also say like 1 to N, \nthe cardinality relationship,  which would be a student could take one class \nand a class could be taken by many students. Or, you could reverse it and say a class \ncan be taken by one student,  but a student can take any number of classes. And then again, you guys saw NM which \nwould be a student can take any number of classes  and a class can be taken by any number of students. So, it\u2019s useful to define that relationship \ncardinality in an ER diagram  because that\u2019s actually going to relate to \nhow we want to design our database schema  when it\u2019s eventually time to do that. And also, like this is something that \ncould be defined in data modeling requirements. So, if the requirements comes to you and says \na student can only take one class at a time,  well, that\u2019s something that you want to be \nable to represent inside of the ER diagram. So, that\u2019s kind of how \nwe can represent relationship cardinality. And then finally, the last thing \nI want to show you guys  are weak entity types \nand identifying relationships. So, actually, I think I\u2019m in the way here. But where my head is, it just says class. So, you guys kind of saw it before. So, a weak entity as entity that cannot \nbe uniquely identified by it\u2019s attributes alone. Basically, a weak entity is an entity \nthat\u2019s going to rely on or depend on another entity. So, over here I have an example \nof a weak entity which would be an exam. So, a class can have an exam, right? So, an exam is something \u2013 \nit\u2019s sort of like an entity, right? You know, a test or whatever \nthat someone might be taking. An exam might have an exam ID. But in this case, an exam \ncan\u2019t exist without a class, right? In other words, for an exam to exist, \nit has to be associated with a class, right? An exam, you're not just going to like \nhave an exam stored, right? We're only going to have an exam \nthat\u2019s going to be associated with a class. So, this is what would we call a weak entity type. It\u2019s an entity that cannot be uniquely identified \nby its attributes alone. And we can also define an identifying relationship. And an identifying relationship is a relationship \nthat serves to uniquely identify the weak entity. So, an exam can be uniquely identified \nwhen it\u2019s paired with a class. Which I realize, my head is in the way of, \nbut you guys know it\u2019s there. So, I can say that a class has an exam. And an exam is had by a class. The exam doesn\u2019t exist on its own. It only exists in the context of a class. And this is kind of more of an abstract idea. And actually, in the next video \nwe're going to look more at weak entity types. But this should be at least a little bit of an example \nand an introduction into weak entity types  and identifying the relationships \nwhich we're just notating by these double lines. So, the exam has double square and the identifying \nrelationship has a double triangle. And also, one more thing to note. Then whenever we have a weak entity \nand identifying relationship,  the weak entity always has to have total participation \nin the identifying relationship. In other words, all exams must have a class, \nbut not all classes need to have an exam. All right, so that is kind of all of the sort of basic things \nthat you're going to encounter in an ER diagram. And really, everything that you see right here \nis kind of like all of the stuff  that you might seen an ER diagram. And really, you can use all of these different symbols \nin order to represent a data model. And what you'll see is we can take this ER diagram  and we can actually convert into \nan actual database schema. And that\u2019s why these are really \nuseful sort of middle-man  between requirements \nand the actual database schema. So, hopefully that makes sense. In the next video we're going to actually walk through \nan example of constructing our own ER diagram,  so that should be kind of cool. And that should kind of give you guys \nmore of an idea of how these work. [Designing an ER Diagram] In this tutorial I\u2019m going to walk you guys \nthrough creating an ER diagram  based off of some data requirements. So, over here I have this document. It\u2019s called Company Data Requirements. And basically, what this document does \nis it describes all of the different data,  all the pieces of information and the relationships \nbetween those pieces of information. And this is a good example \nof a document that, you know,  you might get if you\u2019re working for a company \nand they want you to design a database. Let\u2019s say that they want you to design a database \nto store information about a company. Well, they might give you this document. And then your job would be to take this document \nand convert it into a database schema  which you can then, you know, \nstore information in and all that. So, this document will describe all the data and \nit will describe the relationships between the data. But it will do it in, you know, in English, right? It\u2019ll do it in a very high-level manner. You know, it\u2019s not going to get into \ndatabase specifics or anything like that. So, your job would be to take this information and \nthen, you know, design database schema from it. And so, what you can do is you can take this. You can convert it into an ER diagram  and then you can take that ER diagram \nand convert it into a database schema. So, I\u2019m going to show you guys the first step of that  which would be to take a document like this \nand convert it into an ER diagram. Which in the last video, I kind of walked you guys \nthrough what an ER diagram was and all that stuff. So, let\u2019s go ahead and take a look at this document. I\u2019m going to read through it. And then what we're going to do is we're going to \ndesign an ER diagram based off of it. So, over here it\u2019s just Company Data Requirements. So, we're defining the data \nand all that stuff in a company. So, it says the company is organized into branches. Each branch has a unique number, a name, \nand a particular employee who manages it. The company makes its money by selling to clients. Each client has a name \nand a unique number to identify it. The foundation of the company is its employees. Each employee has a name, \nbirthday, sex, salary, and a unique number. An employee can work for one branch at a time  and each branch will be managed \nby one of the employees that work there. We\u2019ll also want to keep track of \nwhen the current manager started as manager. An employee can act as a supervisor \nfor other employees at the branch. An employee may also act as a supervisor \nfor employees at other branches. An employee can have at most one supervisor. A branch may handle a number of clients,  with each client having a name \nand a unique number to identify it. A single client may only be handled \nby one branch at a time. Employees can work with clients controlled \nby their branch to sell them stuff. If necessarily, multiple employees can work \nwith the same client. We'll want to keep track of \nhow many dollars worth of stuff  each employee sells to each client they work with. Many branches will need to work with suppliers \nto buy inventory. For each supplier we'll keep track of their name \nand the type of product they're selling the branch. A single supplier may supply products \nto multiple branches. So, this is our Company Data Requirements document. And there\u2019s a lot here, right? It kind of took me like over a minute \nto go through and read all of this. And so, if you're given a document like this,  how do you go about converting this \ninto a database schema? So, the first thing we want to do \nis create an ER diagram. So, what I\u2019m going to do is I\u2019m going to walk through  and show you guys how we can create an ER diagram \nfor these data requirements, okay? And then in the next video I\u2019ll show you guys \nhow you can convert that ER diagram  into an actual database schema. So, let\u2019s go ahead and take a look. I\u2019m going to walk you guys through each line \nin that requirements document  and we'll convert it into our ER diagram. So, over here it says the company \nis organized into branches. Each branch has a unique number and a name. So, you'll notice that I\u2019ve mode bold branches. So, branch is going to be our entity, right? We're defining an entity branch. And it\u2019s going to have two attributes, a branch ID \nwhich is going to be our primary key, right? The branch has a unique number. So, that, to me, tells me \nthat it\u2019s going to be the primary key. And then obviously, the branch name. Next we have the company \nmakes its money by selling to clients. So, right away there we have another entity. Each client has a name \nand a unique number to identify it. So, here we have our client \nwhich has their client ID which identifies it. And then their client name \nwhich is just going to be the name. And then over here it says the foundation \nof the company is its employees. Each employee has a name, birthday, sex, salary \nand a unique number to identify it. So, over here we have our employee and we have \nthe employee ID which is the primary key. Birthday, name, so we get first and last name. And salary and then sex. And then so over here we also have a derived \nattribute which is going to be age. So, from the employees birth date we could derive \nhow old they are at any given point. So, here we have our three entities \nthat we got from this requirements document. So, now over here it says the employee can work \nfor one branch at a time. So, over here we have a relationship, Work For, right? This is like a verb. So, an employee over here can work for a branch and \na branch can have an employee working for it, right? So, that\u2019s our relationship. And you'll notice over here \nI defined these as total participation. So, I\u2019m saying that all branches \nmust have employees working for them. That\u2019s this double line right here. And I\u2019m also saying all employees \nmust work for a branch. So, both of those entities have a total participation \nin the Works For relationship. And that wasn\u2019t rigorously defined \ninside of the document. But that\u2019s just something that I kind of, you know \nset there as the person designing the ER diagram. And then over here \nwe have our cardinality relationship. So, I'm saying that \u2013 basically what this says  is that a branch can have \nany number of employees working for it. And an employee can work for one branch. So, I\u2019m going to say that one more time. A branch can have any number \nof employees working for it. And an employee can work for one branch. That\u2019s what that cardinality relationship \nis defining right there. So, next we have another relationship. It says each branch will be managed \nby one of the employees that work there. We\u2019ll also want to keep track of \nwhen the current manager started as manager. So, over here we have another relationship \nwhich is manage, right? An employee can manage a branch. So, employee can manage a branch \nand a branch can be managed by an employee. And then you'll also notice over here that \non this relationship we've defined an attribute. So, we want to keep track of when \nthe employee started as the manager, right? So, when does the employee start as the manager \nand that\u2019s what we're defining over here. So, we're defining this attribute \non the actual relationship. And now let\u2019s take a look at the participation. So, all branches must have someone managing them. So, you'll notice that we have \nthis full participation here, right? Every branch is going to participate \nin that Manages relationship. All branches need to have a manager. But over here on the employee \nit\u2019s partial participation, right? Not all employees need to be managers of a branch. In fact, by a large majority most employees \nwill not be the manager of a branch. And so, that\u2019s why we define this as single \nparticipation or partial participation. So, not all employees are going to manage a branch, \nbut all branches will be managed by employees. And then over here \nwe have our cardinality relationships. So, we're saying that an employee \ncan manage one branch  and a branch can be managed by one employee. So, that kind of makes sense. So, down here we also have another relationship. It says an employee can act as a supervisor \nfor other employees at the branch. An employee may also act as a supervisor \nfor employees at other branches. That employee can have at most one supervisor. So, over here we get this supervision relationship. Now you'll notice that the supervision relationship is \nactually a relationship that an employee has to itself. So, this is a relationship between employees. So, over here we have an employee \ncan be supervised by another employee  and an employee can be the supervisor \nof another employee, right? So, over here, basically we're saying that an employee \ncan be the supervisee of only one supervisor. So you can only have one supervisor. But an employee can supervise \nany number of employees. So, one more time, I\u2019ll just say that an employee can \nbe supervised by one other employee, one supervisor. And a supervisor can be the supervisor \nof any number of employees. All right, so over here we have another relationship. It says a branch may handle a number of clients,  however a single client may only be handled \nby one branch at a time. So, over here we have the new relationship \nbetween the branch and the client. So, I\u2019m saying that a branch can handle a client \nand a client can be handled by a branch, right? So, maybe a branch might have a bunch of clients \nthat it works with, or whatever. And so, the client has a total participation \nin this relationship. That means that every client must be handled \nby a branch. But if the branch has a partial participation,  which means that not all branches \nneed to have clients, right? Maybe you\u2019d have like a corporate branch \nthat doesn\u2019t work with any clients. Or maybe you\u2019d have like an RND branch \nthat doesn\u2019t work with clients. But you'd have other branches that do. And so, that\u2019s why we would define that relationship. And then also we have our cardinality relationship  which would be a branch can handle \nany number of clients, right? So, the branch can handle N clients. And a client can be handled by one branch. So, if you're a client, you can only work \nwith one branch. But if you\u2019re branch, you can work \nwith multiple clients. And that\u2019s what we're defining over here. All right, and then over here \nwe have another relationship. And I realize this is getting a little cluttered \nand I\u2019m actually in the way. But it says employees can work with clients controlled \nby their branch to sell them stuff. If necessary, multiple employees can work \nwith the same client. So, now we have a relationship \nbetween employees and clients. So, we have an employee works with a client. And then a client can work with an employee. Now, notice the participation. So, all clients must work with an employee. But not all employees must work with clients, right? So, all clients need to interact with the branch \nthrough an employee,  but not all employees need to interact with clients. You'll also see down here it says we'll want to keep \ntrack of how many dollars worth of stuff  each employee sells to each client they work with. So, on this Works With relationship, \nwe're defining this attribute, right? So, the employee can sell to the client \nand the client can buy from the employee  and that\u2019s where we're getting this from. And finally, we'll look at the cardinality. So, a client can work with any number of employees. And an employee can work \nwith any number of clients. And so, that\u2019s basically the relationship \nthat we get from this line up here. All right, so over here we have our final \nlittle section of this requirements document. It says many branches will need to work \nwith suppliers to buy inventory. For each supplier we'll keep track of their name \nand the type of product they're selling the branch. A single supplier may supply products \nto multiple branches. So, this is an example where we would need \nto use a weak entity and an identifying relationship. So, over here we have this \nweak entity branch supplier. And it has a supplier name and a supply type,  but the branch supplier is going to \nsupply a specific branch. Now, we want to keep track of which branch suppliers \nare supplying which branches. And in order to do that, we're going to \nhave to use this identifying relationship. So, we can say the branch supplier supplies \na branch and a branch gets supplied by a supplier. And you can see that we have \nthese cardinality ratios over here. So, this is basically our entire ER diagram, right? We have from that requirements document we've \nbeen able to map out all of the different entities,  all the different attributes on the entities \nand all the different relationships. And basically, we get this diagram. And this diagram is \u2013 it\u2019s just linking \nall that information together, right? It\u2019s visually representing all of that information \nin a way that is defining it. So, what we can do now \nis we can take this ER diagram  and depending on the different relationships, \nthe different cardinality ratios,  the different participations,  we can actually go ahead and convert this \ninto a database schema  which I'm going to show you guys \nhow to do in the next video. So, stick around for that and we'll go ahead and \ndesign our database based off this ER diagram. [Converting ER Diagrams to Schemas] In this tutorial I\u2019m going to show you guys how to \nconvert an ER diagram into a database schema. So, basically we're going to take \nall of this information inside this ER diagram  which we created in the last tutorial. And we're actually going to take this \nand use it to create an actually database schema. So, from this diagram right here we'll be able to, \nyou know, create and define actually database tables  that we can use in our relational database. So, let\u2019s go ahead and get started. I\u2019m going to show you guys basically step by step  how we can start converting this \ninto database tables and database relations. So, the first step, Step 1, \nis the mapping of regular entity types. So, for each regular entity type, \nwe want to create a relation  which is just a table, that includes \nall of the simple attributes of that entity. So, here we have all of our regular entities. We have branch, client, and employee. And so, what we want to do \nis just create relations or, you know,  basically database tables for each one \nof those regular entities. And then the columns of those relations are going to \nbe all of these attributes that we defined. So, from that, from everything that\u2019s inside of the \ngreen squares we're going to get something like this. So, we have our employee relation. We have the employee ID which is the primary key. First name, last name, birthdate, sex, and salary. And we have the Branch with that information. And then we have the Client. So, I just want to show you guys \nwhen we had a composite attribute,  so this name attribute over here, \nwe're just storing the sub-attribute. So, we're just storing first name and last name. All right, so here we have three relations \nand lets see if we can start adding to those. So, Step 2 is the mapping of weak entity types. So, over here we have one weak entity type \nwhich is inside of this green square. For weak entity type we want to create \na relation or a table  that includes all of the simple attributes \nof the weak entity. And the primary key for the new relation should be  the partial key of the weak entity \nplus the primary key of its owner. In this case, the primary key of the owner is going to \nbe branch ID because the branch is the owner. In other words, the branch is the entity  that\u2019s participating in the identifying relationship \nwith branch supplier. So, over here we'll see what happens. So, you'll see we get this new table, Branch Supplier. And the primary key is branch_id supplier_name, \nand supply_type. So, for this table, we included the supplier\u2019s name \nand the branch ID. Both of those come together \nto make our composite key. It\u2019s a compound key. And then we have supply type \nand then we end up with this. So, now we have four tables, Employee, \nBranch, Client, and Branch Supplier. And they all have their associated attributes. So, Step 3 is the mapping of \nbinary 1 to 1 relationship types. Now, a binary relationship is a relationship \nthat has two entities participating in it. For example, all of the actual relationships up here \nare binary. In other words, there\u2019s two parties \nthat are participating. And what we want to do is map 1 to 1 relationships. So, we only have a single 1 to 1 relationship here. It\u2019s this manages relationship. So, a branch can be managed by one employee \nand an employee can manage 1 branch. So, for each 1 to 1 binary relationship \nwe want to include one side of the relationship  as a foreign key in the other. And we want to favor total participation. So, in this case, we want to basically include \nthe primary key of one of these entities  as a foreign key in the other entity\u2019s relation. And we always want to favor the total participation. So, if a particular entity has total participation \nin their relationship,  then you want to add the foreign key \nonto that entity. So, in this case, branch has a total participation,  so we're going to add the employee\u2019s ID \nas a foreign key in the branch relation. If both of them are partial participation \nor both of them are total participation,  then you can just use your own discretion. But in this case, it\u2019s pretty clear \nthat we're going to use branch. So, over here on the branch relation, I added in \na foreign key which is just manager ID. And this is a foreign key which points to \nthis employee\u2019s ID up here. So, that\u2019s how we're going to link \nthose two together. Step 4 is the mapping of \nbinary 1 to N relationship types. So, unlike a 1 to 1 relation, \nnow we're looking for 1 to N. And you'll see that we have three of them here. So, branch handles a client. An employee supervises or is supervised \nby another employee. And a branch has employees working for it. So, basically what we want to do  is we want to include the one side\u2019s primary key \nas a foreign key on the inside relation or table. So, basically, what this means is that \u2013  okay, so for example, \nin this case we have a branch and an employee. I want to include the one side\u2019s primary key, right? In other words, I want to include \nthe branch\u2019s primary key  because that\u2019s on the one side as a foreign key \non the employee relation. So, basically on the employee relation,  now we're going to have a branch ID column \nthat will store a foreign key to the branch. Same thing down here for a client and branch. So, the branch over here is on the 1 side. And basically, what that means is that we're going to \nstore in the Client table a foreign key to the branch. And then same goes for this supervisor relationship. So, on the Employee table we want to \nstore a foreign key to the supervisor. And so, over here let\u2019s take a look. So, employee we have a super_id \nand we have branch_id. And that\u2019s because the branch was \non the one side of the relationship  and the employee was on the N side of the relationship. Which means that we're going to go ahead \nand store the branch\u2019s ID as a foreign key  on the Employee table. And then the same goes for the supervisor ID. So, obviously, with the supervisor ID, \nit\u2019s pointing to the Employee table. So, we have to store it on the Employee table. And then down here in the Client table \nwe stored as a foreign key the branch ID. And again, that\u2019s because the branch \nwas on the 1 side of that cardinality relationship. You see, branch is on the one side \nand the client was on the N side. And so, that\u2019s why we stored branch_id \nas a foreign key on the Client table. All right, and then Step 5 is the mapping \nof binary M to N relationship types. So, in this case, we only have one instance of this. A client can work with an employee \nand an employee can work with a client. So, what we want to do in this case \nis we want to create a new relation. So, we're actually going to create a new table  whose primary key is a combination \nof both entity\u2019s primary keys. And we\u2019re also going to \ninclude any relationship attributes. So, over here, the client\u2019s primary key is client_id. The employee\u2019s primary key is emp_id. So, what we're going to do is create a new table  where we have a composite key \nwhich is the employee ID and the client ID. And actually, this would be \nwhat we would call a compound key  because both of it\u2019s keys are actually foreign keys. And we want to store in this relationship \nthe attribute on the relationship,  or any attributes on the relationship \nwhich in this case is just sales. So, down here we created a new table \nor a new relation which is Works On. And you'll notice the key \nis employee ID and client ID. So, both of these individual parts of the primary key \nare actually foreign keys themselves. So, this is a special situation. And then over here we have total sales  which was the attribute that we stored \non the relationship like that. And so, basically that, in essence, is going to allow us \nto take this ER diagram and convert it into relations. Now if you have more complex relationships, \nlike if you have nonbinary relationships  then it gets a little bit more complex \nwhen we're mapping them. In this case, I\u2019m just kind of looking at \nbasic ER diagrams. I don\u2019t want to get too complex. So, in this case, in five steps, we're able to basically \nconvert the ER diagram into a set of relations. But if you do have more advanced types of ER \ndiagrams, then there are going to be more steps. But for our cases, there\u2019s only going to be five steps \nthat we need to basically convert this into relations. And so, now basically what we have here \nis we have our database tables, right? Each of these relations is itself a database table. So, when I'm designing my database now,  I know I have to have an Employee table with \nall this stuff, a Branch table with all this stuff. Client table, etc. And so, what we can do also \nand what you'll see a lot of times  is people will draw little arrows \nto define the relationships. So, this can get a little bit messy \nwhich is why I kind of saved it for the end. But you can see over here, for employee,  on the employee\u2019s foreign keys \nI\u2019m drawing arrows to what they relate to. So, for example, super_id, \nI have an arrow going back to emp_id. branch_id I have a little line here going over \nto branch_id. Mgr_id over here, we have a line \ngoing up to emp_id, etc. So, this is basically just like mapping out \nall the different relationships. This, like I said, it gets a little messy. And it\u2019s pretty difficult to read \nif you have more than a couple tables. But you also \u2013 you'll see people doing this a lot, \nso I just wanted to show you guys how that works. So, now that we have our, you know, \nessentially our relations, our database tables,  we can actually create a database. So, over here I have an example of what \na database might look like from these relations. So, we have our actually database. So, up here we have all our employees. And you'll notice we have our employee ID  so we can define like the supervisor \nof each employee. So, like Angela Martin\u2019s supervisor \nis employee number 101. So, Angela Martin\u2019s supervisor \nis Michael Scott, right. You'll see how it easy it is now for us \nto define all this stuff. Angela Martin also works at branch_id number 2. So, that links over here to the branch. So, branch 2 is Scranton, etc. And then we have our Client table over here. And we have our Works With table. So, the Works With table \nhas the employee ID and the client ID. And then we have our Branch Supplier table. So, all of these got basically put into our database \nand then we started putting information in there. And so, really what this is, is it\u2019s a way for us \nto go from just a set of requirements  like we saw in the last video, to our actual \nfinished database table, what you see here. In designing relational database schemas,  and you know, the schema \nis just like this whole thing, right? It\u2019s not super easy. If you have a very simple database, you know, \nif you have a very simple set of database storage  or requirements, then obviously the schema \nis going to be very simple  and you might not need something like an ER diagram. But with something like this, \nan ER diagram is hugely useful. So, here\u2019s the thing, you don\u2019t necessarily \nneed the ER diagram, right? You don\u2019t need it. But it\u2019s a really, really great way \nto convert requirements  into an actual database schema \nor a set of relations. And so, that kind of show you guys \nhow you can do that. Now, here\u2019s the thing with ER diagram. I only showed you guys one example. And I think this is actually a pretty good example \nbecause it covers all of the main use cases. But, you know, the only way that your going to get \ngood at using the ER diagrams and building them  and, you know, converting them into database \nschemas is just by doing it a bunch. And so, just by practicing. So, obviously, I\u2019m not going to spend, you know, \ndozens of videos doing dozens of these examples,  but hopefully this example kind of shows you guys \nthe basics so now you can go on  and, you know, design your own ER diagrams  and then convert them into database schemas \nfollowing those rules. And all of the rules that I showed you guys  for converting ER diagram into relations \nthat\u2019s going to apply to any ER diagram. So, what we talked about in this video will, you know,  you can basically take any ER diagram \nand convert into something like this."
        },
        {
            "video_id": "KJgsSFOSQv0",
            "title": "C Programming Tutorial for Beginners",
            "description": "This course will give you a full introduction into all of the core concepts in the C programming language. Want more from Mike?",
            "published_at": "2018-08-15T17:52:20Z",
            "channel_name": "freeCodeCamp",
            "transcript": "Hey, welcome to Giraffe Academy My name is Mike in this course I'm gonna be teaching you guys everything you need to know to get started in the C programming language C is an awesome programming language and it's actually one of the oldest programming languages around in fact A lot of modern programming languages are based off of C so it's a really good idea if you want to get into C or even if you're trying to get into something like C++ to learn the basics and in this course, we're gonna cover everything you need to know I'm gonna talk to you guys about installing a text editor and using the C compiler and we're gonna write some basic code I'll talk to you guys about you know, what is a program and how the program's work and how does C Read the instructions that you give it and we're gonna get into some more advanced stuff We're gonna look at things like if statements and loops we're gonna create different variables We're gonna talk about the different types of data that you can use and C then we're gonna get more advanced We're gonna talk about things like structures and the functions. We're going to talk about pointers And basically I'm just gonna give you a full overview of all of the core concepts in C So by the end of this course, you'll have a really good understanding and a really good foundation Which you can build on you can kind of go forward and learn some more I'm really excited to be bringing you guys this basic course on C I'm really excited if you guys to dive in and start using these tutorials So feel free to click around through all the videos and hopefully you'll learn something awesome about C In this tutorial I'm gonna talk to you guys about getting everything set up to start programming in C now in order to program in C We're actually going to need two things The first thing we're gonna need is an environment where we can write our C programs Now there's a bunch of these different environments. Essentially. All you need is just a text editor so anything that can you know, allow you to Write text and then save that text in a specific file format is gonna work although when we're working with C a lot of times it can be useful to use a special environment called an IDE an IDE stands for integrated Development environment. Basically, this is a special text editor which makes it a lot easier for us to write our C programs And so I'm gonna show you guys how to install an IDE called code blocks the second thing We need to write our C programs is going to be something called a C compiler now C is a programming language It means we can basically write out You know instructions that we want to give to the computer but eventually for the computer to be able to execute those instructions they have to be Compiled which basically means like translated or transformed into a language that the computer can understand So we're gonna basically download and install a special program that will do that for us. So let's get started I am going to come over to my web browser and I'm just gonna go up to the Google search bar. And I'm gonna search for a program called code block. So just type in Code blocks C. And this link should come up. It's code blocks org now This is an integrated development environment It's basically a text editor that will make it really easy for us to write our C programs. So I'm gonna come down here into downloads and There's a bunch of options here one says download the binary or at least download the source code We want to click on download the binary release. This is going to be the easiest option So if you're on Windows or Linux or Mac, you can install it from this page So depending on the operating system that you're on you want to click that. I'm on Windows So I'm gonna come down here to the windows option. You'll see there's little options for us to download this stuff So there's a bunch of options here. What we wanted download is going to be this one right here. It says code blocks And then the version number and then it says min GW - set up Basically what this is is it's gonna allow us to install code blocks So we're gonna be able to install that IDE program, and we're also going to be able to install AC Compiler. So remember I said we needed those two programs We needed those two things and this is actually going to give us both of them on Windows So I'm gonna come over here and click on the link to download this from sourceforge.net And you can see it's gone ahead and downloaded that So now let's head over to our downloads folder and I'm just gonna double click on this setup program so this should open up a window where we can set up the program and Let's just click through this So I'm just gonna click Next I'm gonna agree the license and basically just leave all the options as default and you should be good to go alright when that's done installing it's gonna ask us to run code blocks so we can just go ahead and do that and It's giving me this little window here. It says compilers auto detection So you can just click on the one up here. That's highlighted It says GNU GCC compiler and I'm just gonna click set as default and click OK and there you go We now have code blocks installed so in the next few tutorials We're gonna be learning about setting up code blocks writing our first C programs and really just getting started with C But for now, you have everything you need to get started In this tutorial I'm gonna talk to you guys about getting everything set up to start programming in C on OS X So if you're using a Mac Then this video will basically show you how to get everything set up in order to start working with C We're actually going to need two things. The first thing we're gonna need is a text editor basically We're going to use the text editor to write our C programs in and you can use any text editor that you want to write C programs but there's actually a special type of text editor which is called an IDE and it stands for Integrated development environment and it's basically a special environment where we can go to Write and run and manage our C programs So that's the first thing the second thing we're gonna need is what's called a C compiler now C is a programming language So essentially what we're doing when we're using it is we're writing instructions for the computer but in C We're writing instructions that us humans can understand and work with but in order for the computer to be able to carry them out they have to be compiled or Translated or transformed into a language that the computer can understand and that's what the C compiler is gonna do It's gonna take our C programs and essentially just translate them to a language that the computer can understand So the first thing I'm gonna do is show you guys how to install that compiler and then we'll get a text editor So what you want to do on your Mac is go over to the search bar and you're just gonna type in terminal and Click enter and a window that looks like this should pop up now The terminal is basically a program that allows us to interact with the computer using text commands So we're actually gonna need to use the terminal in order to do what we want to do so the first thing we want to do is check to see if you might already have AC compiler installed so in certain circumstances You might already have one. So you just want to type in C C - V and click enter and You'll see over here. I have AC compiler installed. So I'm getting all of this information. You can see over here It says like si Lang and it's giving me you know, a bunch of information If you have that, then you have your C compiler installed and you're ready to go But if you don't have that I'm going to show you guys how to get it So all you want to do is just type in Xcode select and then the space - - install and Click enter and you'll see I'm getting an error here because I already have these command line tools installed But if you don't already have them installed and obviously then you wouldn't have that C compiler Then this is gonna go off and install everything. You need to get that C compiler working so once you run that Xcode select command just type in CC - V again and You should be getting this version number Alright, so now that we have our C compiler installed What we want to do is download an IDE So we want to download a special text editor that we can use to write our C programs in so I'm gonna go over here To my web browser and I'm up here at a website called code blocks dot org, and this is an IDE called code blocks It's one of the most popular free IDE s for programming and C. So we're just gonna come down here to this downloads link and There should be a few options here download the binary released download the source code. We're gonna click download the binary release and You'll see down here We have a bunch of options for windows linux and mac click the mac option and if we come down here You'll see that here is what we need to install code blocks on the Mac So if you go over to the right side here, there's a link to SourceForge where we can download it So I just clicked that link and it should start downloading Automatically when that finishes downloading, let's head over to our downloads folder and you'll see here we have our zip file so I'm just gonna double click on this and They should give us code blocks now All you want to do is just drag and drop code blocks into your Applications folder and you're ready to go So you have code blocks installed and ready to start following along with this course and writing some awesome C programs In this tutorial, I'm gonna talk to you guys about getting our first C file setup So we're gonna load up a C file and we're gonna be able to get everything working and test out our program so I'm gonna open up my codeblocks program and this is the IDE that I'm gonna be using for the rest of this course So I'm just gonna double click on it and it should start opening once we have codeblocks open. You'll see over here There's a bunch of different options like create a new project open an existing project So we're actually going to want to create a new project So whenever we're gonna start writing some C files We're gonna want to create a new project in code blocks so you can either click this button right here, or you can go up to file new and projects so either way it's gonna bring you to this window over here and There's gonna be a bunch of options here basically Just these are different types of like C projects that we could create what we're gonna be doing is creating a console application This is like there's a basic C project that you can run on your computer. That's exactly what we need So click on console application and then click go and I'm just gonna click through this wizard and you'll see over here. It says C++ or C now C and C++ are both Different programming languages for this course, we're gonna be working with C So just highlight C and click Next and we're gonna give this a title I'm just gonna call mine draft and we're gonna have to put this project Inside of a folder so I'm gonna open this up and I'm just gonna put this on my desktop. So let's click OK and Click Next and you can leave all of these options as the default and we'll click finish so now what we should have is our first C project in code blocks now over here inside this little File Explorer you'll notice that Draf is right here. So that was the name of the project that I just created down. Here. We have this source folder So I'm going to click down and you'll see we have this file here called main dot C And this is a file that got automatically created for us by code blocks I'm just gonna right click and open it and you'll see over here. We have some default code so up here There's these little lines of code that say include down here. This says int main so this is the Program that we're given by default when we created our C project and this is sort of like the simplest C program that you can Right, essentially what this program does is it prints out hello world onto the screen So in order to run this program and test it just to make sure that everything's working I'm gonna come up here and you'll see that there's this Green play button over here and it just says run when I hover over it when I click this button This file that we have open right here main see is gonna get run So we're essentially telling code blocks to run this file and execute the program So when I click the Run button, we're getting this message. It says the project hasn't been built yet do you want to build it like yes, and Now over here this little window pops up Basically, this is the command prompt. So whenever I run a C program this little window is gonna pop up So if I was to exit out of this and run this program again You'll see this window pops up again. And it basically just executes the program and in the case of this program All we're doing is we're printing out Hello world onto the screen and that's actually what this instruction does over here. When we open up this command prompt. It's essentially just Executing the program and it's printing out whatever we told it to print out So it's printing out hello world over here and printing something out onto the screen is really easy And that's one instruction that we can give to the computer But as we go through this course we're going to learn all sorts of instructions that we can use but the purpose of this tutorial was just to get our C project set up and to test our main dot C file So as long as everything works here and you're good to go and now we can start really learning how to program in C In this tutorial I'm going to talk to you guys about the basics of writing a program in C So if you've been following along with the course up to this point, we've installed a text editor We've installed a C compiler and we set up our first C program. And our first C project Inside of code blocks. So now essentially what we have is this file over here. This is that main dot C file I just kind of want to point out a couple things that are in here first up here We have these little instructions which are just called include and I'm not gonna get too much into what those do in this tutorial Later on in the course. We're gonna talk about what these are actually doing and the specifics of you know, How they're helping our program, but for now just know that in order for us to use our program We're gonna need to have these guys up there next thing we have is this little block of code called main and It just has this name main you can see there's an open and closed parenthesis And this is actually what's called a method and don't worry too much about what methods are we're gonna again we're gonna talk more about those in future, but essentially a method is just like a container where we can put some of our code and This method main is very important because this is the method that's going to get executed when we run our program so in C we can actually write out a bunch of instructions for the computer and then we can run our program so we can tell the computer to Execute those programs and whenever the computer executes our C program It's gonna look inside of this main method in other words that's gonna look inside of all the code inside of these open and close curly brackets and it's gonna Execute that code so I have this instruction here It's called printf and basically this is just printing out some text onto the screen when we run our program It's gonna come into this main method and it's gonna execute all the instructions inside of here namely this printf method So if I was to run my program then this is gonna work now Let's talk about actually running a program whenever we want to run a program that we write in C We actually have to do two things The first thing we have to do is what's called building a program or compiling a program And basically what that does is it takes all of this C code It translates it into a language that the computer is going to be able to understand and execute So it's essentially taking this C program code Translating it into computer code and then the computer can execute it and run our program So the first thing we have to do is always build our C file The second thing we have to do is run the file that gets built so once we've built this program we've compiled it down into code the computer can understand we have to run it basically tell the computer to execute that code and in code blocks It's actually really easy to do this. So we can come over here and this little gear icon will allow us to build our program and then this play button will allow us to run our program but a lot of times when you're Programming you're gonna want to build and run your code at the same time, right? you're just gonna want to build it and run it just to see what Happened, you know? see how your program did So we have this option over here called build and run and this will both build your program and run it at the same time So generally as you're going through this course you're gonna want to be using this option That's build and run options when I click this it'll essentially build my program run it and then it'll show up here on this little window in this little window is basically a Console window you can call it. So a lot of people would refer to this as the console and It'll just like output any Information that we tell it to so if we write a C program that doesn't output information that doesn't print anything to the screen Then we wouldn't actually see this but since we're using this printf command, that window is gonna pop up So let's talk about how these programs actually get executed essentially when we write a program We have a set of instructions So when I'm writing a C program, I'm basically writing out a set of instructions imagine you were writing like a recipe or something Right a recipe is essentially just a set of instructions that when executed correctly will result in You know cooking or baking something delicious, right? And that's basically what these C programs are It's a set of instructions that when executed correctly will result in the computer doing something for us and one of the cool things about computers is that we can program them to do anything and C is one of the best languages to do that with so let's look at this instruction over here It's called print F and this prints something out onto the screen. We will notice over here at the end. We have this Semicolon and this semicolon is actually really important So whenever we write an instruction in C We always want to end it off with a semicolon That tells C that we're done with that instruction and we want to move on to the next one so I could actually copy this instruction and I could paste it down here and Now we're basically going to be executing this instruction twice so if I was to run and build my program you'll see that we're not only printing it out once but we're also printing it out twice So when we run our program the program comes down into this main method and it looks at all the instructions inside of it So it starts with this first instruction. It executes it, right? So it prints out hello world onto the screen and then it also prints out a new line So this backslash n is like a newline character and that'll move the text onto a new line When it's done with this instruction, it moves on to the next instruction and it'll execute that instruction So as we go forward and we learn how to write in C We're gonna learn more and more complex instructions And we'll be able to use all those instructions in conjunction with each other to specify some seriously complex programs but for now This is really the only instruction that we know which is printf so why don't we use this printf? Instruction in order to draw out a little shape onto the screen So I'm going to show you guys how we can draw out like a little triangle onto the screen I'm gonna take this printf and I'm actually just gonna get rid of hello world and I'm gonna copy this a couple times so I'm just gonna copy it and we'll paste it down here, maybe four times and What I can do is I can specify Instructions to the computer that will tell it to draw out a particular shape So down here I could make like a forward slash and over here We'll make another one and I'll make another one and I'll make another one and you can see here I've drawn like a little diagonal line with these forward slashes. Now, I'm gonna draw vertical bars going all the way down So I'm gonna put one here I'm gonna put one here. I'll put one here and finally, why don't we draw some underscores and then we'll put one so I'm basically drawing out a little triangle shape and these Backslash ends are just printing out a new line. So anytime I print this it's gonna move it on to a new line So it'll print this guy out now on the line down the line below So if I was to save my program and execute it now the computer is going to go through it's going to execute each one Of these instructions in order and we'll be able to print out the shape onto the screen. So let's do that You see over here. We get our shape and One thing I really want to stress. Is that order matters? So if I took this instruction and I placed it up here as the first instruction now This is gonna get printed out first So when I run my program you'll see that we're printing out this kind of Funky looking shape and that's because we changed up the order of the instructions So the computer changed the order in which it executed those instructions and you'll notice here again, we're using this Semicolon after each line of code. So that's kind of the basics of writing a program That's essentially all you need to know when we're writing a program we're specifying a list of instructions that we want the computer to carry out and Depending on which instructions we give the computer and which order we give them and how complex the instructions are That'll determine what the program does and as we go through this course, we're gonna learn more and more complex instructions we're also going to learn how we can take simple instructions like printf and Do different things with them to make our programs a lot more powerful? In this tutorial I want to talk to you guys about variables in C Now when we're using C programming language a lot of times we're gonna be dealing with data so there's gonna be different data values or different information that we're gonna want to keep track of and use inside of our programs and Sometimes it can be difficult to maintain and keep track of all that data and that's where variables come in a variable is Essentially a container where we can store different pieces of information so different data values we could sort of things like numbers or texts or characters and These variables make it a lot easier for us to keep track of and manage all the data in our program So I'm gonna show you guys basically how variables can be useful and how we can use them in our C programs But down here. I have a very basic program. I'm basically just Printing out a little story. It says there once was a man named George He was 70 years old. He really liked the name George but did not like being 70. So this is a simple program We're just printing out a bunch of different lines of text and then when I run this program You'll see we print out the actual story so over here we have our story and this is great But let's say that I'm reading through my story. I'm reading through my program and I'm thinking to myself hmmm I think I want to change the character's name So instead of calling the character George, why don't we call him like John in order to make that change? I'm gonna have to look through my entire program and find every place where we mention the character's name So right here is one change it to John remember keep looking and here's another one. So we'll change this to John, right? So I had to manually go through and change every instance of the character's name To John and let's say that okay. That sounds pretty good But maybe I'm thinking I want to make the character a little bit younger. So instead of 70 Why don't we make him 35? so now again I'm gonna have to look through my entire program find every place where we mentioned the character's age and change it to 35 So there and there there you go I changed the program I updated and modified it now If I was to run this program then all that information will be updated and we'll have new story. Here's the problem though I'm dealing with a very short story. I mean, this is four lines We only mentioned the character's age and name twice But imagine if I was writing out a huge C program that had hundreds of lines in this story So story had hundreds of lines and maybe we mentioned the character's name hundreds of times. They're mentioned their age hundreds of times Well if I wanted to change the characters age your name? I would have to go through and manually change it in every single location that would take forever and it would be a huge track Basically, that's not a good way for us to manage and maintain the data and our programs All right. We basically have two pieces of data that we're working with Consistently in this program the characters age and the character's name What I want to show you guys now is how we can use variables to better keep track of and manage these pieces of information So remember a variable is basically just a container where we can store some data so I want to create two variables which will store the character's name and The character's age and I'll show you guys how this can make our program a lot easier to Manage up here above these print statements I'm just going to make a new line and I'm gonna come over here and I want to create a variable Now whenever we create a variable in C, we have to give C a couple pieces of information So we have to basically tell C a couple different things The first thing we have to tell C is what type of information we want this variable to store now I'm gonna get into the different data types that we can represent and see more in the next tutorial but for now just know that there's a bunch of different types of data that we can store and C we can store things like Numbers characters we can store text we can store decimal numbers all sorts of stuff like that in our case I'm going to store the character's name and the character's name is basically just a collection of characters So in order to create this variable The first thing I have to do is tell C that I want to create a variable that's gonna store characters So to do that, I'm just gonna type out char just like that and that'll basically tell C Hey, we're gonna store characters inside of this variable After we type out char I want to type out the name of the variable that I want to create Remember of variables that contain and it's a good idea to give these containers Descriptive names and those names will basically let us know what that variable is storing inside of it. So I'm gonna call this Character name and now what I want to do is I basically want to store multiple characters so over here I'm telling to see that I want to store a character But in C we can also store instead of just storing like one single character we can store a bunch of characters and that would be kind of like you know a name so there's like four characters in here in order to store a bunch of characters inside of this variable after we Type the character Abel's name We're gonna have to make an open and closed square bracket And that's gonna tell C that we want to store a bunch of characters inside this variable So I'm gonna type char a character name open a close square brackets. I'm gonna set this equal to something So I'm essentially assigning a value to this variable and I'm just gonna make an open and closed quotation marks and inside of here We're gonna type out the value that we want to store So in my case, I'm just gonna store the character's name, which is John and then as always in C We're gonna have to end this off with a semicolon All right so essentially what I did here was I Created a variable and I told C what I wanted to store in the variable I wanted to store a character. I gave this variable a name. It was character name and I used these open and close square brackets to sell C that I wanted to store a bunch of characters. Not just one Now what we can do is we can make another variable to store the character's age So in this case, we're gonna want to do something similar, but we're gonna want to store a number There's a bunch of different ways that we can store numbers and see but for our purposes we're storing a name so we're gonna use something called an integer and an integer is basically just a whole number so I'm just gonna type out int and That basically stands for integer. And now we're gonna give this a name so I'm gonna call this Character age and I'm gonna set this equal to a number So in our story the character is 35 So I'm just gonna type out 35 and now we can again end this off with a semicolon So I have two variables here. This one's storing a collection of characters. This one's storing an integer Now the question becomes how can we use the inside of our program? well basically What we can do is we can print them out alongside of this text and we can actually use this print F Instruction in order to do that so I'm gonna show you guys how to do this and then we're gonna talk about it So basically, I'm gonna go over here where we have the character's name I'm gonna erase this and I'm gonna replace it with a % and an S and now over here I'm gonna make a comma and I'm just gonna type in the variable name. So I'm gonna type in character name and basically what's happening is when we use this percent s We're telling see that inside of this string of text here We're gonna want to insert a another String and a string is basically just a collection of characters so I could call this up here a string variable So when I say % s this is basically a placeholder and I'm telling C I'm gonna insert a string into here and Over here I use this comma and then I type out the string that I want to include so in our case It's character name and so basically over here It's gonna say there once was a man named % s and it's gonna replace % s with whatever we specify over here So it's gonna replace % s with the value that's stored inside that character name variable so I'm gonna save this and we'll run our program and Now you'll see that it's still printing out there once was a man named John Even though we didn't actually type out John over here We just typed % ass in the character name so I can do this in this other spot too. So down here We're also using the character's name so I can type % s and over here we can type Character name and again. This is going to act as a placeholder For this string of characters that we specify over here Let's do the same thing with the age so over here we have the age is 35 I'm going to do something similar and I'm gonna say percent but now because I have a number instead of using percent s I'm gonna use Percent D and that basically means that we're gonna insert an integer number into here So I'm saying he was percent D years old and over here. I'm gonna make , and I'm just gonna type out the name of the variable that I want to be placed inside of here so I'm just gonna be Character age and we're going to do this one more time down here. I'm going to type percent D and Character age so essentially what I'm doing is I'm printing out the value That's inside of character age where I specify this placeholders so Let's go ahead and run our program and now you'll see it's gonna look exactly the same as it did before it's the same story the same name and the same age Except I didn't have to actually type out the character's age and the character's name inside the story I just referred to the variable and what's cool about? Variables is I could come up here and let's say I wanted to modify the character's age all I would have to do is modify it in this one spot so we could change the characters a name to like Tom and We could also change their age to like 67 And now when I run my program all of that's gonna get updated in the story so now it's using the name Tom and the age of 67 in our case. We only mention the character's name and the character's age a couple times But you can imagine if I was mentioning this variable like ten or twenty or thirty times Having to change it in each one of those individual spots would be extremely difficult So variables are great because we can store the value one time and then if we want to modify it We just modify it in one place. So another cool thing that we can do with these variables is we can actually modify them So let's say that halfway through the story. I wanted to change the character's age. I could actually come down here I can make a new line and right above these print statements. I could give this variable a new value so I could say character age and I can just set it equal to something else so we can set it equal to like 30 and Again, we want to include that semicolon. So now halfway through the story. The characters age is actually gonna change So you'll see it says there once was a man named Tom, he was 67 and then down here The age is being a 30 so we actually modified the value that was stored inside of the variable Halfway through printing out our story and that's really why variables are useful So that's kind of a basic overview and introduction into what variables are why they're useful how we can use them And over here again, we're storing a collection of characters, which is called a string and we're also storing this integer But there's some other data types that we can also represent So in addition to representing like a string or a number we can do some other stuff as well And I'm going to talk about that in the next video But for now, this has just been a basic overview and introduction into variables and see In this tutorial I want to talk to you guys about data types in C and in the C programming language We're gonna be dealing with a lot of data So generally when you're writing programs, you're gonna be dealing with all sorts of information and in this tutorial I just want to talk to you guys about what types of information we can represent and use Inside of our C program and these are called data types. All right So what are the different types of data that we can work with in our program? So I'm gonna show you guys all those different data types right now So a lot of times in C when we're working with data, we're gonna be storing that data inside of variables so I'm just gonna show you guys a bunch of different variables that we can create and all the different types of data that we Can store inside of those variables? so remember whenever we create a variable and C we have to tell C a couple pieces of information and the first piece of information we need to tell C is what type of Data that we want to store inside of that container inside of that variable so let's talk about the different types of data One of the most basic types of data and probably one of the types of data you're going to be using the most Gonna be numbers. There's actually two very important types of numbers that we can represent in C So the first type is called an integer and an integer is basically a whole number so it's a counting number right if I was counting on my fingers 1 2 3 4 5 I'm just counting out whole numbers and I'm not saying like 1 1 and a half to 2.3 like I'm counting in whole numbers and that's what an integer is So to create an integer we could just say int And we'll give this a name so we could say like age and we could set age equal to like 40 or something Now whenever we want to use an integer in C. We always just want to type out the number So you'll notice I'm not putting quotation marks or parentheses or anything around this I'm just typing out the number like that. And now we actually have our variable age another type of number we can create is a Decimal number so this would be a number unlike an integer So it would be like 2.5 or eight point six seven or seven point five three eight, right? It's a number that has a decimal point associated to it. So there's actually two types of decimal number in C there's something called a double and there's something called a Float, and I'm not gonna get too much into the difference between the two of them But as a beginner to see for the most part You're just gonna want to use a double So I'm just gonna type out double and this could be like someone's GPA. For example, it might be like a 3.7 or whatever so, you know, you can use the double to represent decimal numbers it's also important to note that I could also represent like the number three so I could just say like 3.0 and that's gonna be a decimal or I could say 40 point O So the difference between 40 and 40 point O is that forty point O is a double It's a decimal number and 40 without the decimal point is an integer So that's something just to keep in mind so you can make this like three point six So those are the two basic types of numbers integers and doubles and those are gonna come in handy all the time Now the next type of data that we're gonna want to store or is gonna be characters So in C we can store single characters inside of a variable so I could just say CH AR and that stands for character and we could give this a value So maybe it'd be like someone's grade and when we create a character in C We're basically going to specify the character that we want to store inside of single quotation marks So inside of these single quotation marks, I could put a letter I could put like a a lowercase a we could put h C d AF basically you can put any character that you want to store So if I put an A here now, this character variable grade is gonna store the single character a inside of it It's important to note that you can only store one character so I couldn't put like a whole bunch of characters over here And that's actually gonna throw an error All we can do is store one single character, but these three are the basic data types in C So these are the basic types of information that we can deal with in our C programs and just using these Three data types, we can represent all sorts of information I also want to talk to you guys about one sort of extra data type and it's not Technically a data type in C. It's technically like a modification of the character data type So you'll notice when we create a character we can only store one letter one single character inside of it But a lot of times we're gonna want to represent more than one Character so we're gonna want to represent like a string of characters and generally this is called a string so it's a collection of characters that are grouped together and we can use this char datatype in order to create a String so I can basically say char I can type out the name of the string that I want to create so I could say like phrase and then after this I can make an open and closed square brackets and this is basically gonna tell see that we want to string a bunch of characters together and What we're actually doing is creating something called an array and I'm gonna get into arrays later in the course But just for now know that we can create a string of characters by using char Specifying the name these open and close square brackets, and then we can create this using to open and closed quotation marks So instead of these single quotes up here We're just gonna use double quotes and I could type in like a phrase so I could type in whatever String of text I want here and this will get stored inside of this Variable which like I said is technically called an array now It's important to note that Doing something like this or creating this like string of characters is a little bit different from these guys up here So like these variables up here we could modify them We can give them new values but you can't do stuff like that with this So just know that this is like a special type of data and it's gonna act a little bit differently than these ones up here But that's one of the basics of working with data and those are all the basic datatypes that we're going to be using in our C programs In this tutorial I want to talk to you guys some more about the print F function so if you've been following along with this tutorial We've been using an instruction and our C programs called Printf and printf basically allows us to print different things out onto the screen in this tutorial We're going to talk more about what printf does and we're gonna look at how we can use it to print out things like variables And also things like different data like numbers and strings and all that stuff So in order to use printf we just type out PR int F and we're gonna make an open and closed parenthesis and a semicolon Now printf is what's called a function and basically what that means is it performs a specific task or a specific function in our case printf just print something out onto the screen write the task that it's doing is Printing something out and it basically works how you'd expect it to work So if I came in here? I could print out a specific piece of information and generally when we're using printf We're gonna be printing out Text so I can make an open and closed quotation marks and I could print out like hello world in here And now this will print out onto the screen. Hello and Inside of printf I can use all sorts of special characters so if I wanted to create a new line, for example, I can make a backslash N and Down here. I could type world and now this will print out a new line So you'll see hello world on different lines We can also use these special characters So for example, I could print out like a quotation mark So if I just printed a normal quotation mark right here, you'll notice that it's messing this up so it's sort of like counting this as the entire string if I wanted to change that I can just put a backslash here and now this will literally render a Quotation marks when I run my program you can see we have a quotation mark there so that's kind of like the basic usage right you can specify some text that you want to print out onto the screen and it'll do it but this printf function is actually Extremely powerful and we can use it to print out different pieces of information So in addition to just printing out plain text inside of these quotation marks I could also print out other types of information. For example, I could print out And if I wanted to print out a number I would have to use something called a format specifier a format specifier Basically tells this printf function that we want to print out a type of data That's not just plain text like this So if I said % and then I said D This would actually allow me to print out a number So generally when we use these format specifiers uses % and that tells see that you're going to want to print out something Special and then after that we would type in a specific letter and that'll tell see what exactly we want to print out so if I said % D this means that we want to print out an integer, so All I have to do now is I can make a comma and over here I can specify the integer that I want to print out so I could say like 500 and now this is gonna print out 500 to the screen so you can see over here we're getting 500 and this is cool because we can interweave these different types of data with text so I could say like my favorite number is % D and this acts as a placeholder for this number over here so when I run my program now it says my favorite number is 500 and that's really cool. We can also use multiple format specifiers so in addition to just using this percent d I can also specify another one so over here I could say percent ass and You'll notice that this is structured similarly to percent d % s is basically going to allow us to include some text So I can include some more text just like this so if I said % s I can make another comma here and I could say Number and now this is gonna print out my favorite percent s so it's gonna look for this string of text over here It's gonna insert that in and it's gonna say 500. So now when we run this it'll say my favorite number is 500 and you'll notice here that I'm using multiple commas. So I'm saying like % asks % d and over here I have a comma and I'm specifying this string that I want to print so the string of characters and then the integer, and so basically the order that you put these format specifiers inside of your String of text is the order that you need to include them using these commas So you're going to separate each of them using a comma hoon addition to % s in % D We can also use a bunch of other ones And I'm going to talk to you guys about some of the most common % D will print out an integer like 500 but if we wanted to print out a decimal number for example a double we could say percent F and this is gonna allow us to print out a Decimal number so I could say like 500 point nine eight seven five four And now this is gonna print this out on to the screen. Actually. I need to build this So my favorite number is five hundred point nine eight seven five four zero So essentially you can use these print FS and you can use these format specifiers in order to include different data types into your output So like this is just some general text output and we can use these different guys to interweave Like numbers or you know other strings and stuff like that and what are these really become useful is when we have variables So if I was to create like a number variable up here, I can call it like fav num set it equal to 90 I can use this variable and print it out inside of this printf so over here we could make this percent D and Instead of printing out this number we can just access that variable so I could say fav num And this will allow me to print out that variable using that printf function. So my favorite number is 90 so that's the basics of using printf This is a very awesome tool that we can use and printf is basically just used for us to find out information So when we're running our programs a lot of times we're gonna want to be able to get some information About what's going on about what they're doing in printf can allow us to do that So don't be afraid to use these different access modifiers. Like I said % s % d % F Those are all sort of the common ones and you can also use % C and this will allow you to print out a single Character so I can come over here create like a character variable We'll call it my char and just set it equal to like lower case I and I could print this out using % C. So now we could say my char and you'll see that we print so Play around with printf. It's extremely useful and it's really going to come in handy when we're writing more complex programs In this tutorial I want to talk to you guys about working with numbers and see now a lot of times when we're writing programs in C We're gonna want to do different things with numbers whether that's just storing numbers and keeping track of them or adding multiplying Subtracting doing math with numbers or you know, really just dealing with numbers in general So I'm just gonna give you guys a basic overview of a lot of the stuff we can do with numbers We're also gonna talk about how different number types in Iraq. So how like integers and doubles interact and all that fun stuff So down here I am printing out a number so you can see I'm using this printf function and inside of these quotation marks I'm Basically saying % F And % f stands for like a floating-point number so that could be either a double or a float basically a decimal number so we put % F in here that's gonna allow us to print out a decimal number just like this and You can see I can run my program and it'll print out 8.9 and you'll notice that it's printing out not just 8.9 But it's also printing it out to a very precise decimal point and that's what C is always gonna do so it's always gonna print it out to you know, A very precise decimal. So using these decimals I can do all sorts of stuff So obviously I can just print out the decimal but I could also do things like math so I could say like five point zero plus four point five and This is gonna go ahead and be able to do that for us when I run my program Not only is it gonna like print this out but it's gonna do the actual math operation and you see we get nine point five so in addition to addition we can also use subtraction division, which is going to be a forward slash and Multiplication which is going to be in asterisks and you can use all these different things to let you know do the four basic math Operations addition subtraction multiplication and division. So now I want to talk about how we can use floating-point numbers so like doubles and floats Alongside integers. So let's say I was going to add an integer With a double. So if I said 5 plus 4.5. Well, actually when we do this this entire answer is going to get converted into a Decimal number so when I say 5 which is an integer plus 4.5. We're going to get a floating-point number back so we're going to get 9.5 and basically any operation that you do between an integer and a floating-point number is going to return a floating-point number back So that's important to realize but if I was to change this to four now This isn't gonna work anymore because this is asking for a floating-point number and we're giving it an integer So when I do math with two integers it's going to give us an integer back and if I do math with a floating point number and integer it will give us a Floating-point number back. It's also important to realize for example if I took five and divided it by four This should actually be a decimal number right and you'd expect us to get a decimal back But if I just print it out percent D. So I printed out the result of the integer five divided by the integer four I'm actually gonna get an integer back So when I run the program you'll see we're getting a one here, but really this like the answer is one technically But it's one with a bunch of decimal points after it. Right? It's one plus a bunch of other stuff But when we just do math with two integers we're gonna get an integer back if I was to say five divided by four point zero and I've printed out a Decimal now, we're gonna get the entire answer back. So we're gonna get one point two five So that's just a little bit about dealing with integers and floating point numbers We could also take these and put these into variables so, you know in addition to just having numbers down here I could specify a variable like You know num set it equal to six and we can go ahead and print num out down here as well I need to make this a D So now I will be able to print out that variable with no problem So it can be really useful sometimes to store these numbers inside of variables I also want to talk to you guys about using more complex mathematical functions now in C We have these things called Functions which are basically just little blocks of code that we can call and when we call them they're gonna go off and do Certain things for us. So they're like modify a value or give us information about a value and these functions can be really useful I'm gonna show you guys a couple functions that we can use with math So I'm just going to come over here and I can actually start using these functions and all you have to do is just type Out the name the function that you want to use So by default C is going to give us access to a bunch of math functions that we can use So we really don't have to do anything all we have to do is just type in their names and I'm gonna show you guys want it's just POWs, so I'm just typing in P Oh w then I'm gonna type an open and closed parenthesis and inside of these parentheses I can actually give this two numbers what this is gonna do is it's gonna take the first number that we give it and it's gonna take it to the second number so if I said like 2 & 3 And you'll notice I'm separating them with a comma this is basically gonna give us 2 raised to the third power So to give us 2 cubed so when I run my program and actually we need to print this out as a decimal number So this is gonna give us a decimal number back. So I need to print this out with F When I run my program we're gonna get 8 back just like that. So it's basically Cubing 2 I could say like 4 raised to the third power and now we should get back 64 which we do So that can be pretty useful. There's a couple other ones. I'll show you another one is SQ RT So this will allow you to take a number square root So if I said like 36 in here now, we're gonna print out the square root of 36 Which is gonna be 6 and there's a couple other ones So let's say that I had a decimal I could say C EIL which stands for ceiling So if I have like thirty six point seven or 36 point three five six This is gonna give us the hot the next highest number. So it'll basically round this number up and this is gonna give us 37 as you can see We can do another one which is called floor and floor. We'll do the opposite so floor We'll just round the number down no matter what. So if I have like 36 point six five six, this will round it down to 36 So there's all sorts of little, you know things we can do little functions that we can call and get information about numbers and like I said these Functions will either like modify a number so it would like give us the floor or the ceiling Or sometimes they'll like give us information about numbers So that's sort of the basics of working with numbers, you know you can do all sorts of math with numbers you can add in some to multiply and you can even Multiply add subtract integer numbers and floating-point numbers. So play around with all these different things with numbers and if you want to find some more of these little math functions All you have to do is just go online and Google search for C math functions there's like dozens of these little functions that you can use, but I think these are some of the most widely used In this tutorial I want to talk to you guys about using comments and see well comment is a special block of code and see Which actually gets ignored when we run our program, so if you want to write a comment you can use a special starting and ending tag and any of the Text any of the code anything that you put inside of that tag isn't gonna get executed or really looked at by C So we can use comments to do all sorts of things, you know You can leave little notes or little comments inside of your program. You can use comments to Temporarily disable certain lines of code. They can be really useful So I'm gonna show you guys the basics down here in my program if I want to create a comment I can start a comment Using a forward slash and an asterisk and you'll see when I put this asterisks in all the code in my text editor changed color and basically what this means is anything that comes after this forward slash and Asterix is gonna be considered a comment in Order to close off the comment. I can use an another asterisk and another forward slash You'll see the code changed back to normal code Inside of these two asterisks is I can basically write out anything I want and it's gonna get considered as a comment so for example If I you know wrote out like my program and I ran my program this whole thing is gonna get ignored by C So it's just gonna print out comments or fun It's not gonna do anything else and you know Like I said comments are really useful so I could leave a little note up here I could write something like to do like I have to do something and a lot of times people we use comments to Explain certain lines of code so I could put a comment here and I could say like this print out text, right? So maybe you know, this was like a really complex line of code We could use this text in order to explain it You can also use comments to do something called commenting out a line of code So for example, let's say I wanted to run my program but I didn't want to have this line of code in there Well one thing I could do would just be to delete the entire line of code Right so I could delete this code and now I can run my program and it's no longer gonna print it out It's no longer gonna do anything. But here's the problem in order to do that. I had to actually delete the of code so instead of deleting it I could just bring it back and I could comment it out so I could basically surround it with these comment tags and Now the computer is just gonna ignore it. So it's not gonna render it because it's been commented out So now when I run my program it's gonna do the same thing. It won't execute that line of code But I didn't have to actually delete the line. I could just comment it out So a lot of times when you're writing programs You might want to try to run your program without a certain line or a certain you know series of lines of code and instead of deleting them and then running the program you can just comment them out and See will basically ignore them so that can be really useful So those are the two basic uses for comments and essentially comments are open, right? It's just a way that we can write out information in our files. That won't get rendered by C And so you can really use comments to do whatever you want Now I will say one best practice with comments is to use them sparingly Generally, you only want to use a comment when you absolutely have to so we can be really annoying if you open up a C File and there's like comments littered all around and obviously if you want to put a bunch of comments in your code I mean no one's stopping you but as a best practice going forward I think generally only using comments when they're absolutely necessary is kind of like a good practice But again, it's open, you know, you can use comments for whatever you want In this tutorial I want to talk to you guys about constants in C Well constant is a special type of variable and C which can't be modified So when I create a constant and C, I'm basically creating a value that is Unable to be modified. So I'm gonna show you guys basically how this works out. Let's say I created a variable Let's say I created an integer and I just called it num and I set it equal to 5 right, and then I printed out that integer onto the screen so we can print this out percent D and We're just gonna pranaam right so I can create this num variable. I can print it out onto the screen Let's say that down here I wanted to modify num so I could basically say num is equal to 8 so I can modify The value that's stored inside of the num variable And let's come down here and we'll print this out as well. So d And we'll print out num again. And actually I'm gonna print out a new line here So when I go ahead and run this program and I forgot to send me : when I go ahead and run this program you'll see we're printing out five and then we modified the value to eight and then we printed out eight so I was able to modify this value down here I was Mabel to modify num But in certain circumstances and see you're gonna want to create variables or you're gonna want to create values that can't be modified So these would be values that just like can't change and those are called constants So if I wanted to make a num a constant in other words, let's say for some reason I didn't want the num variable to be able to be modified in my program I could come over here and I could say Const so Co NS T and I'm gonna say that right before I declare the type now, you can also say Const Right after you declare the type, but I've always preferred to just put it before So I say Const int num 5 and now this program is actually gonna throw an error. So when I try to run this You'll see down here. It's getting highlighted in red. That's because I can't modify a constant So I'm trying to modify a num down here But I can't because I gave it this Const keyword because it's now considered a constant So in a lot of cases you want have variables that just can't be modified. Can't be changed and In a situation like that you want to make them consonants also a lot of times when we make constant variables in C We'll give them all uppercase names and this isn't required this is just sort of like what a lot of developers will do so they'll say like instead of n Um like this they would say like num or maybe this is like your favorite number so you could say fav underscore num So that would be how you could like distinguish two words but generally like constants will be all capital and that's just so it's kind of obvious that they're Unchangeable that they're constants. But again, you don't have to do that. But that's kind of like a best practice so this is one way that we can create a constant, and we basically create a constant variable that can't be changed but a constant could also refer to Just like any number or any text that we're using in our program So, for example, I'm gonna get rid of this if I came down here and I just like printed out some text So let's say I just printed out like Hello. This is actually also gonna be considered a constant So this is just like a string of characters a string of text That's also considered a constant because it's just like text on the screen. We can't change it. We can't modify it It's just kind of there so you would also consider this a Constant if I was printing out a number to like let's say I came over here and print out 77 T is also considered a constant So it's just considered to be like a piece of information or a piece of data in our program That is sort of unchanging. Right? So 70 this isn't gonna change I mean unless I physically came in here and changed it like This value is always gonna be 90 no matter what I can't modify it unless I like manually come in and modify it So that's also considered a constant But I would say like for the most part like where this is going to come in handy is obviously doing stuff like this But creating constant variables variables that can't change In this tutorial I'm gonna show you guys how to get input from a user in C So a lot of times in our C program So we're going to be working with all different types of information and a lot of times we're gonna want to get some of that Information from the user so I'm going to show you guys how we can prompt the user to enter in some information We can take that information store it inside of variables and then we can use it inside of our program So this is gonna be pretty cool. So down here I will basically write out the code for this and the first thing we want to do whenever we're getting input from the user is We want to prompt them. So I want to prompt the user, you know, as far as what they should enter in So I'm just gonna say printf and over here. I'm just gonna print out a prompt. So why don't we Ask the user to enter in their age. So well, I'll show you guys how we can get a number from the user so I'm just gonna say enter your age and Now that we've prompted them to enter their age I need to do two things So the first thing I want to do is create a variable where we can store the input that the user puts into the program So I want to create a variable where we can store the age that the user inputs So I'm gonna create an inn over here. Oh, it's called age. And I'm not gonna give this a value so all I'm gonna do up here is just Declare the variable. I'm just gonna tell see that I want to use this variable But I'm not gonna give it a value in other words. I'm gonna allow the user who's inputting the age to give this a value So down here I want to be able to get input for from the user so I can use another function which is called scanf and scanf is basically going to allow the user to enter in some information into our program and This works similar to printf it's kind of doing the opposite of printf right printf is printing something onto the screen Scanf is allowing the user to input something Into the program and we're gonna make an open and close quotation marks and in here I basically want to tell see what type of information I'm asking the user to enter in So in our case we're asking for an integer right age is going to be an integer it's a whole number so I'm gonna accept as an input and integer and Over here. We want to tell C where we want to put integer So I'm basically gonna tell see what variable I want to store this in. So I'm gonna store this inside of my age variable and I can essentially just type out the name of the variable here But in order to get input from the user I'm actually gonna have to type an ampersand in front of this So instead of just typing out age. I'm gonna have to type ampersand age And when I say ampersand age, this is what's called a pointer and we're gonna talk about pointers in a later tutorial I'm gonna cover everything you need to know about pointers But for now, that's a little bit beyond what we need to learn so all you need to know is that when you're using scanf and you want to store information inside of like An integer or a float or like a character you need to use this ampersand over here So down here now that we've scanned for the users age. I'm just gonna go ahead and print it out So we'll just print out like you are and I'll say % D years old and over here I'm just gonna print out that age variable. So essentially what I'm doing is I'm prompting the user to enter their age I'm storing whatever age they enter inside of this age variable and then I'm printing it out to them So let's go ahead and run this program and we'll see how we did So I'm gonna run the program and it says enter your age. So let's say someone is 50 when I click enter It's gonna take that value It's can take that integer that we entered 50 store it inside of that age variable and print it out You'll see over here. It says you are 50 years old. So that's how we can get an integer from the user We can also get like a double from the user so for example, I could say enter your GPA and so now instead of asking for an integer we're gonna be asking for a double so I can come up here and say like double and We could call this GPA and now I can do the same thing. But instead of saying D I want to say L F and L F is basically going to tell this scanf function that we're looking for a Double and then obviously instead of age. We're just gonna put GPA inside of here. And so now we can just say like your GPA is and then we can put % F because we're gonna be printing out a double and I'll just say GPA. So you'll notice here in printf when we want to use a double We're using percent F to print it out. But when we're using scanf we're going to use percent LF So that's just like a little difference and now let's go ahead and run this program And we should be able to get a GPA. So let's say someone's GPA is like 3.1. Now. It says your GPA is 3.1. So that's how we can get a double. I also want to show you guys how we can get a character so why don't we create a character up here and we'll just call it grade and We'll say enter your grade and Now when we want to get a character we can just say percent C and again I can just come down here and say ampersand grade and then down here we can just say your grade is Percent C and we'll go ahead and print out the grade So now we should be able to get a character from the user so enter the grade let's say I got an A and it says you're good as a so we can use this scanf to get specific types of Input from the user we can store those specific types of input inside of variables now I also want to show you guys one more thing we can do which is we can actually get a string from the user so in addition to getting numbers and a character, we could also get like a string of characters from the user and this is going to be a little bit different from Doing like numbers and characters. So I want to kind of show you guys how we can do this really quick so over here Let's create a variable. We'll just call it. Let's just call it name. So we'll be storing someone's name and Whenever we're creating a string of characters, we always need these open and close square brackets and inside of here I'm actually going to specify how many characters I want to be able to store inside this string of characters so I'm just gonna put 20 and In the past in this course when we when we've been creating strings. We haven't put a number in there We've just kind of said like whatever. All right, we basically just given this a value straight away But in this particular situation, we're not gonna be giving this variable of value right away in other words Like I don't know what the users name is gonna be like, I don't know that right up front They're gonna tell us what that is. And so if I'm not gonna give this a value, right? I do actually need to tell see how big I want this variable to be in other words I need to tell see how many characters I want this variable to be able to store and that way si can go ahead and Allocate enough memory for this variable. So I'm just gonna put 20 and 20 basically means this will be able to store 20 characters And I think that's enough for a name so down here. We'll just say enter your name and I can use scanf in order to get input in the form of a string but instead of saying percent see I'm just gonna say percent s and Over here instead of saying ampersand grade I'm just gonna type out the name of the string of characters. So I don't actually need this ampersand here. I can just Specify the name of the string so down here it says printf your grade is and actually let's just say your name is I would have say percent s and then over here we can print out the name So this should work just like it did in the other cases So let's go ahead and run this and it says enter your name. So my name is Mike and You'll see it says your name is Mike. So that works out really well, but there is one problem when we're using scanf in order to get a string from the user So for example, if I came in here, and I said enter your name, and I said my name was john Smith when I click enter You'll notice that it's only saying your name is. John, it's not including smith over here and Here's the problem. This is because Whenever I use this scanf function and I use it with a string. It's only gonna grab the characters up to the first Space so once it sees this space it's gonna be like, okay, we're done getting characters, right? So that's kind of a problem and that's just kind of how scanf works. It's not really, you know scanf fault There is a way that we can modify scanf in order to be able to get input with spaces but there's another function which I want to show you guys which we can use to get a line of text from the user and it's called F gets and Afghans is another function it's similar to scanf but f gets is Basically going to be more generous F gas is essentially just gonna grab like a whole line of text It's not gonna be able to grab it and store it inside of like an integer or a variable or a character It's just gonna be able to store it inside of like a string of characters. So When we're using a forgets the first argument We want to give it is the name of the variable where we want to store to the line of text So in our case, it's just gonna be this name variable The next thing we want to do is specify how many characters we want to be able to input from the user So this will essentially limit the amount of characters that the user can input And this is always a good idea when we're trying to get a string from the user because one common problem is that the user could try to Enter in like a million characters and they would overflow the like the buffer in other words Like see wouldn't be able to handle accepting that many characters and the program might break So over here with F gaps We can specify how many characters we want to be able to accept so I'm just gonna say 20 Because that's how many characters we can store inside of this variable and over here I'm just gonna say stdin and this stands for standard input essentially what we're doing over here is we're telling FCAT s-- where we want to get the information from and standard input is set as essentially just like that little console that we've been using so Now I'm using F Gatz and this is going to do exactly what scanf did so we'll be able to store the input inside of this named variable, but now we'll be able to store Multiple words instead of just one single word. So let's run this program and it says enter your name So now if we entered in John Smith You'll see it's able to enter in John Smith Now the one downside with just using this F gets is you'll notice that it printed out this new line over here So let me actually demonstrate this a little bit So if I was to print out like, you know, just some random text over here Whenever I get input using scanf, so if I entered in John Smith When I click the enter key So when I'm entering this by clicking the Enter key that's actually going to represent a newline character and that's going to get stored Inside of the string. So when I click enter you'll notice it says your name is John Smith And then it prints out a newline and it prints out this text And so that's just something that you need to be aware of when you're using this F gets function but for the most part, I would say if you're getting input from A user in the form of a string you can use F gets you can also use scanf and you could use multiple Percent asses and i'm actually going to show you guys how we could do something like that in a future tutorial But for the most part I would say whenever you're getting a string from the user you just want to use F Guess so that's the basics of getting input from the user like I said there's a couple other things that we can do and I'm gonna talk about At least one other way that we can get strings from the user in a future tutorial But this is kind of the basics and you can kind of play around with doing this stuff in your programs In this tutorial I'm going to show you guys how to build a basic calculator in C we're basically gonna build a little program where the user can enter in two numbers and then Our program will take those two numbers add them together and spit out the answer So this is gonna be kind of cool and we'll also learn about getting numbers as input from a user So over here, I want to show you guys exactly how we can do this the first thing I want to do is Print out a prompt. So I basically want to prompt the user for some input so over here I can just say printf and Inside here. We're just gonna give them a little prompt. So I'll say enter first number and Essentially what we're gonna have them do is enter in two numbers, so I'm actually going to create two variables up here so we'll make an int and we'll call it num1 and Then we'll make another inch and we'll call it num2 and i'm not actually going to give these Values right up front we're gonna end up giving these whatever the user enters in So after the user enters the first number we need to actually grab that number so I can use another see function called scanf and In here, we're basically just gonna say percent d because we want to grab an integer and then over here I'm going to say the name of the variable Where I want to store the value that gets entered now if you're following along with this course in the last tutorial We were able to get a string of characters as input from the user And basically we just typed in like the name of the variable But when we're getting input, that's not a string of characters In other words when we're getting input that's not percent s so if it's like percent d or percent 4 percent C so if it's a guy a decimal or an integer or a float or a character, we actually need to use a special symbol this ampersand So I'm gonna have to say ampersand and then the name of the variable what I want to store this value so I'm just gonna say ampersand 1 and Basically what this means is we're accessing the address of num 1 and we're gonna talk about addresses and pointers in a future video but for now just know that you need this ampersand here in order to Store the value that gets entered inside of this variable So once we do that and now we can move on and we're basically just gonna do the same exact thing but for the second number so I'm gonna copy these and I'll paste this and now instead of saying enter first number. We'll say enter Second number and we're just gonna store this inside of num2 Alright, so once we're done with this, the last thing we want to do is add them together and print out the answer So I'm just going to come down here. I'm going to say printf and We'll just say answer and over here We'll print out the answer so it's gonna be an integer and we're basically just gonna print out num1 plus num2 So we're gonna print out the value of num1 plus num2. So we have our basic calculator. We're getting the first number We're getting the second number. We're storing them inside of these variables. We're adding them together and printing them out Let's try to run our calculator. So I'm gonna run my program and you'll see over here. It says enter first number So let's go ahead and enter 6 enter Second number will enter A8 and now we're gonna get 14. So 14 is the correct answer So our program worked it was able to add the numbers correctly and everything's awesome But let me show you guys one problem with this program if I wanted to do math on Multiple non decimal numbers, for example if I said 2 and then over here I said like 6 point 8 when I add these together We're not going to get the correct answer. We're gonna get 6 plus 2 Which is gonna be an integer 8, but we're not gonna get 8 point 8, so we're not getting the correct value So instead of letting the user enter in only integers Why don't we instead let them enter in doubles so over here? I'm going to change these to double so I'm gonna say num one's gonna be a double and num2 is gonna be a double and Since we're getting doubles as input, we're gonna have to come down here and modify these So right now this is accepting an integer but we want to make this accept a double so normally if we're using Printf and we wanted to print out a double we would say f and that stands for like floating-point number but when we're scanning for a number if we want to use a double we have to say LF just like that so down here. I'm also gonna say LF and we'll change this to just F so print F is a little bit different than Scanf right and scanf if we want to accept a double as input. We need to use LF in printf We just use % F. So let's run our program now and we should be able to add floating-point numbers so decimal numbers over here I will do four point five plus six point seven and we get 11 point two, so that looks good to me Looks like everything is working properly. And now we have a basic calculator So the user can enter in any numbers that they want and the calculator will be able to handle them Now this calculator is not like 100% ironclad secure for example, like if I was to come up here and Enter in like a string of characters instead of a number you'll see that it's gonna break the program, right? So it's just like not doing what we wanted to do And as we go further in this course We're gonna learn all sorts of ways that we can check to see if certain things are getting entered correctly and we can basically mitigate circumstances like that, but for now, this is just kind of an introduction into how we can get numbers as input and do things like Addition or multiplication once we have them In this tutorial I'm going to talk to you guys about building a little game in C more specifically We're gonna be building a mad libs game now If you ever played the game mad libs it's basically a game where you write down a bunch of random words so it could be like You know nouns or verbs or someone's name or you know a verb ending in ing, something like that you take all of those words that you enter in and you kind of Sprinkle them in into a story and then generally the story is like kind of funny because it has all these random words in it It's actually if we head over to my web browser You'll see I have a picture of a Madlib up here And basically you just add in a bunch of random words into the story and then you'd read the story back and it could be Kind of funny so I'm gonna show you guys how we can build something like that in C And we're also gonna talk about some more ways that we can use that scanf function that I showed you guys in the last tutorial So over here, we have a little story that I printed out. It just says roses are red violets are blue I love you kind of like a classic poem But I think this poem would be a lot funnier if we turned it into a mad libs So that's exactly what we're gonna do. I'm gonna replace roses are red. I'm gonna replace red with a random color So we're just gonna have a user enter in a color. I'll replace violets with a plural noun So we're gonna have them enter in a plural noun, and I'm gonna have instead of saying I love you We're gonna say I love and then a specific celebrity. So I'll just type in celebrity right there Alright, so this is basically what we're gonna be printing out we're gonna be printed out roses are and then whatever color they enter in Plural nouns are blue and then I love whatever celebrity so let's talk about actually creating this program So we're actually going to need to do a couple things And actually the first thing I want to do is I want to create variables we're gonna create variables to store The color that the user inputs the plural noun that the user inputs and the celebrity the user inputs we're going to create three variables and these are basically going to be character strings, so they're going to be Collections of characters and we can store them in Variable so I'm gonna create some of these variables. Why don't we create one for color? And we remember whenever we create a String or like a collection of characters? We need to make these open and closed square brackets And what I also want to do because I'm not gonna be giving color of value right away. In other words. We're letting the user Determine the value of color I just need to tell see how many characters we want this String to be able to store that way si knows how much memory it needs to allocate for this variable So I'm just gonna say 20 and we'll basically just say they can enter in a color that is up to 20 characters we're gonna do the same thing for plural noun and again, we'll let them enter in 20 characters maximum and Finally, we're gonna do the same thing for celebrity. So again 20 characters sounds good Alright now that we have our variables created. I want to actually get information from the user so I want to prompt the user for Information and I want to take the information that they entered in and I want to store it inside of each one of these variables First order of business is to prompt them for input so I can just say print F and inside here We'll basically just type in enter a color Once we've prompted them to enter the color we can actually get whatever color they enter and store it inside of a variable I'm going to use a function called Scanf and over here. I'm gonna accept a string so I'm going to accept a string of characters and we're gonna store this inside of our color variable just like that and remember if you watched the last tutorial we use the Ampersand here when we were getting numbers or also you'd do the same thing if you were getting a single character But when we're getting input for a string of characters, we don't need that ampersand so you can just get rid of that Let's copy these and I'm gonna paste this two more times so the second thing we want to get from them is going to be the plural noun and I'm gonna store this inside of the plural noun variable so you can see now we're getting the plural noun and Finally, we're gonna do the same thing for celebrity. And again, we're gonna get that celebrity Okay, cool. So now I'm getting the color. I'm getting the plural noun and I'm getting the celebrity So the last thing we have to do is we have to take all of these variables and put them into our story Right, so we need to be able to print out the story with all of those variables So I'm gonna come down here and I'm just going to say percent s and over here. We'll pass in the color Same thing here. I'm gonna replace the plural noun here with a percent s and we'll pass in the Plural noun and finally same thing for celebrity down here Alright so everything seems to be wired up and you'll notice that I have new lines here so that this story prints out on new Lines, let's go ahead and run this program and we'll see how we did So over here, it's prompting us for a color. Why don't we enter in magenta? Enter a plural noun, let's do Microwaves and enter a celebrity. Why don't we just say? Prince so when I click enter it's gonna say roses are magenta Microwaves are blue. I love prints. So we were able to prompt the user to enter in all of that input We took everything that they input we stored it in variables Then we printed all those variables out inside of our story and we have our Madeleine the program seems to be working really well I do want to show you guys one way that this program could mess up. So let's go ahead and run this again So let's enter in a different color. I'm going to enter in like blue enter in a plural noun So why don't we enter in? phones And now enter in a celebrity so I'm gonna show you guys one way that we could actually break this program If I entered in a celebrity with a first and a last name like Tom Hanks when I click enter now You'll notice that instead of saying I love Tom Hanks. It's only saying I love Tom Here's the problem when we use that scanf function scanf is only going to grab characters up to the first Whitespace, so essentially when we put this space here. We're telling see that we don't want to grab anymore but in reality we want to be able to grab the there's Full-name want to be able to grab the celebrities first and last name if need be? So this is a situation in C where we would have to modify our a little program so what I could do is instead of just getting one variable like the celebrity I can actually get to so I could say over here like Celebrity F and that'll stand for celebrity first name and then down here We can make another variable called celebrity l that'll stand for a last name. So now when we scan instead of just scanning for one string of characters I can scan for two strings of characters and we'll have celebrity F and then celebrity l and Down here. We're gonna want to do the same thing so we can just say celebrity F and Celebrity L and we just need to add another percent here So it's gonna say I love celebrities first name and celebrities last name. So let's run our program and see how we did so I can enter in like red and Microphones and now we can enter in Tom Hanks and we're printing out the actors first and last name So that's one way that we could remedy this program and make it be able to accept two inputs with a space in the middle And it also just shows you guys a little bit more about how scanf works so it's gonna stop scanning It's gonna stop getting the input at that first space now Here's the thing about this program though if I wanted to enter in a celebrity with Who only had one name? So if I only wanted to enter in one the program actually isn't going to be able to handle that so if I said like hats and down here if I said Like Gandhi and I click enter you'll notice that it's still waiting for me to enter in a last name Right, so I could enter in something here and then the program will work But it was waiting for me after I entered in just that one name So that's something that you're gonna have to you know play around with in your programs Basically C is gonna force you to be very specific about what the user is entering so if the user needs to enter two things like two words and you need to specify that if the user is only going to Enter in one word. You have to specify that. So you have to be very specific when you're getting input from the user like that In this tutorial I'm gonna talk to you guys about using a raisin seed a lot of times when we're writing our C programs we're gonna be dealing with a bunch of different data and one of the things we can do to control and manage and sort of keep track of and organize that data is Put data inside of things called arrays an array is really useful because it's basically a container where we can store a piece of information But what happens in your programs when you're dealing with huge amounts of information? Specifically huge amounts of information that are related right imagine I had a list of like a bunch of names or a list of a bunch of numbers that I needed to keep track of Let's say I had like a list of a hundred numbers, right? I wouldn't want to have to create a hundred different variables to store all of those different numbers and this is where arrays come in an array is essentially a Data structure where we can store a bunch of different data values So inside of an array unlike a variable where I can only store one value I could store hundreds or thousands or even millions of values So inside of a single array, I could store like five things or seven things or ten numbers or twenty characters, you know I could sort a bunch of different pieces of information and then all that information would be nice and neat and Organized in my program so I'm gonna show you guys how to create arrays We can create an array a lot Like we create a normal variable and a variable in array are very similar variable is basically used to define a container that Stores a single value and an array is used to define a container that stores, you know any number of values So the first thing we're gonna have to do when we create an array is give C some Information and the first piece of information is what type of data we want to store inside of the array so for example I could say int and now I'd be creating an array that would hold integers If I said char, I'd be creating an array that would hold characters Or if I said like double the same thing but for double numbers, so why don't we create an array of integers? And I'm just gonna call this lucky numbers whenever I create an array I always want to use a special little symbol and this symbol will tell see that instead of just creating a normal Variable we want to an array and it's an open and closed Square brackets whenever I use these open and close square brackets after the name. It's gonna tell C like, okay We want to store multiple pieces of information Now there's a bunch of different ways. We can create these arrays the easiest one though is to just say equals and I can make an open and closed curly bracket and inside of this open and close curly bracket I can just start typing out some numbers that I want to put in this array so we could type out like 4 8 15 16 23 42 Now I can basically type out as many numbers as I wanted and I could store them Inside of this array so over here, I you know, I printed out six numbers I could print out 600 if I wanted You know, the only thing that's limiting me is how many I can actually put in here So you'll notice that I put in the piece of data so like 4, for example And then I put a comma and a comma is gonna separate all the elements in the array So we would say 4 is the first element in the array 8 is the second element in the array These are all considered to be elements Inside of this array and what's cool about this array is it's now storing all of this information So unlike a variable where we can only store one value now in this array. I'm storing 6 different numbers so if I wanted I can print this out and I'm actually gonna print this out just to show you guys so remember, we're gonna print out a Number and I'm gonna show you guys how we can access specific elements inside of this array So all of these numbers are stored in this lucky numbers array in this array structure But the question becomes how do we access them? Right, how can I gain access to one of these? well, I could say present' d so I'm gonna print this out and now I can just say lucky numbers so I'm gonna refer to the name of the array and when I want to access a specific element I can make an open a Close square bracket and inside of this open and close square bracket I want to put the index of the element that I want to access so all of these elements in here have a specific index And I can access them by putting the index inside of this square bracket so if I wanted to access this for for example I can put a 0 inside of here. And now when I run my program you guys will see We'll be able to print out that for So over here, I'm printing out four if I wanted to access this 15 I can put a two in here. So now when I run my program I'll be accessing the 15 as you can see so one thing you might have noticed by now is that we start the Indexes and arrays at 0 so when I wanted to access this 4 instead of putting a 1 in here I put a 0 in here, right? You might think that 4 would be at index position 1 because it's the first element in the array but in C we start array indexes at 0 so actually the first element this 4 is gonna be at index position 0 so if I was going to write out indexes I would say like 4 is at index position 0 this 8 is at index position 1 this 15 is at index position 2 16 is a 10x position 3 etc So that's gonna allow me to access all these elements inside of the array Individually, so I could print them out just by referring to the index inside of these square brackets Another thing I can do is I can modify some of the elements inside of here so Let's say I want to modify lucky numbers in x position 1 so let's say I want to modify this 8 so I don't like this 8 anymore so I can basically just assign this a different value like I normally would so I could say lucky numbers and I can make an opening close square bracket we can say 1 and I can just set it equal to something else so I could set this equal to like 200 and Now when we print out lucky numbers 1 instead of printing out an 8. It's gonna be printing out a 200 so let's go ahead and do that and run my program and you'll see we're printing out 200 instead of 8 so you can modify any of the individual elements Inside the array just by referring to the index and really when you think about this Conceptually an array is basically just holding a bunch of variables, but those variables don't have names So when I access lucky numbers 1 it's the same as me accessing an integer variable It's just that you know, the array is holding potentially hundreds or thousands or millions of these different variables So an array is a very useful structure, especially if you're storing data, that is very similar So, like I said, I could do this with an N I could also do this with a double I could do this with a float I can do this with whatever I wanted But there's gonna be situations where you might not necessarily know all the elements that you want to put inside your array So let's say I'm creating an array and I don't know what numbers I want to put in it yet So maybe I just like want to create it I want to tell C that we need it but I don't want to necessarily put anything in it right away Well up here. We're basically saying lucky numbers that open and close square brackets, and then we're giving it a bunch of information But if we don't want to give it all that information instead I can just put a call a semicolon here but inside of these square brackets I need to tell see how many elements that this array can hold so I need to tell C Like hey, this array can only hold like ten elements or this array can hold 20 elements or whatever So let's say we wanted an array that could hold like ten elements. I can put a 10 right here and now the Capacity of this integer array is 10 so it has the potential to hold 10 items and what I could do is I could come down here and I can start assigning values to those items so I could say like Lucky numbers 1 is equal to 80, right? so I'm giving lucky numbers 1 of value and now over here I could print that value out onto the screen and You'll see we're printing of 80 but if I try to print out for example lucky numbers 0 so the lucky numbers at in X position 0 This is gonna give me a negative 2 which basically means that it's not found. So it basically means that there's no Element inside of lucky numbers at index position 0 but if I wanted I could do that so I could say like lucky numbers 0 is equal to 90 and now when I run my program it's gonna be able to do that So it'll be able to get that value so in a lot of situations You're just gonna want to give these arrays values up front right off the bat, but in a lot of other situations You're not gonna necessarily know what's supposed to go in there But in a situation like that you still have to tell see how many elements the array is gonna You still have to like rigorously defined like hey This array can only hold ten elements and that's just so C is able to allocate enough memory in order to hold all of those Elements, so that's kind of the basics of working with arrays now I do want to point out one thing that we've been using in this course has been strings, so I've been creating character strings so I could say like char phrase and I could set this equal to Giraffe Academy or other times in the program we created Like when we were making our little game we created an arrays and I would just say like 20 and then I would get input from the user and Put that information in here. This is basically a String of characters. So anytime we create a string in C like if I was to create a string over here I called it like array whatever. This is an array So we've kind of just been taking this for granted Like I've just been calling this a string or calling it like a string of characters But it's basically just an array of characters The only difference is this is such a common thing to use in our programs that C makes it a little C makes it special and makes it really easy for us to create it But just like that array of integers. This is also an array So now you kind of have a better understanding of what strings are and what they're actually doing In this tutorial I'm going to talk to you guys about functions in C a Function is basically just a collection of code that performs a specific task So what you can do is you can take a bunch of code, you know maybe like five or six or twenty lines of code and put it inside of a function and then when you want to access that Code that's inside the function You can call the function and generally when you create a function you'll design the function to perform a specific task So the function will have a specific purpose so I'm gonna show you guys how to create functions how to work with them and we'll just talk about the basics of using functions like I said a function is basically just a collection of code that Does a specific task so we can actually create a function here in our C program? Now you'll notice up here. We have this block of code It says int main and there's an open and closed parenthesis and it open and close curly brackets and we've kind of just been using this for the entire course like up to this point the course we've Just been kind of using this main little block of code here. But actually this is a function and Sometimes you'll hear people will call this a method as well. So function and method are two words that Essentially mean the same thing, but you generally in C. We're gonna refer to these as functions But this is called the main function and the main function is Basically a function that's gonna get executed when we start running our program And so we've already been using a function this main function, but if you want we can actually create other functions in our program So make sure you guys have to do that So let's go down and we're gonna go here outside of this function and the way you can tell we're outside The function is we're outside of this ending curly bracket. So down here I'm going to create a function and when we create a function We actually have to give C a couple pieces of information The first thing we have to tell C is the return type of the function And so actually we're going to talk more about return type in the next tutorial But for now just know that return type is basically the type of data that the function is going to return to the user So sometimes your function can actually give information back to whoever calls it in our case though We're just gonna say void and void basically means that this function isn't to return any information That's the first thing that you have to tell see the second thing we have to do is give this function a name And generally when we're naming a function, we're gonna want to name the function according to what it does So in our case, we're gonna create a function that says hi to the user So I'm just gonna call this function say hi because that's what its gonna do. It's gonna say hi Whenever I create a function now I want to make an open and closed parenthesis and I'm gonna make an open and closed curly bracket. So now any Code that goes in between these curly brackets. It's going to be considered code that's inside of this function So let me show you guys I'm just gonna make this a very simple function. We're gonna do one thing inside of here We're just gonna make a printf and we're gonna print out hello user So I've created my function it's called say hi and inside of this function. We're just printing out. Hello user So now let's go ahead and run our program and see what happens. So I'm just gonna build and run my program But you'll see up here that hello user doesn't get printed out right in other words. I came down here I said printf hello user But this didn't get printed out and this is the first lesson with functions is that in order to use the code? Inside of the function we have to call it Calling a function basically means we're telling C that we want to execute all the code inside of it So if I want to execute this code I can Call this function And the way that I do that is just by typing out the name of the function and an open and closed parenthesis So now instead of just printing out nothing C is actually going to go over here and execute all the code in the say hi Function so let's run our code and you'll see now we're printing out. Hello a user So the difference between this main function up here and this say hi function is this main function is a very special function right when we run our program this main function basically gets called but then if we want to use other Functions we can call them from inside of this main function and that's sort of how this is gonna work So also I want to show you guys one other thing. I just want to illustrate The flow that these functions take I want to show you guys how these get executed by the program So I'm printing out top and I'm printing out bottom and I'm calling say hi right here So now I'm gonna run my program again and you'll see we're printing out top And then we're printing out hello user then we're printing out bottom and this might have looked a little bit better if I put new Lines, but essentially what's happening is when C goes to execute this program It's gonna execute this first line of code printf So it's gonna print out top then we're telling C that we want to call this a hi Function C is now gonna jump over here to the say hi function and it's gonna execute all of the code inside of here So in this case, we just have one line of code, but I could put any number of lines of code inside this function So if I have like five lines of code, it would execute all five of those lines of code Then it's gonna jump back up here and it's gonna move on to the next instruction. So that's kind of how that works And that's sort of the basics of writing functions anytime You have a block of code or a bunch of code that does one thing or that you want to kind of? Encapsulate into its own little container that you can call You can put it inside of a function and then whenever you want to access it You just call it, but these functions can actually do a lot more So one thing we can do is we can give these functions some Information so I can actually give this function a piece of information and it can use that information to do different things This is what's called a parameter and a parameter is basically just a value that we give to a function So let's say in this say hi function instead of just saying hi to the user We want it to say hi to someone specifically well I can actually come down here in these parentheses and I can specify a function Parameter and I can specify a parameter a lot like I would specify a variable so I could say for example char name and an open and closed square brackets and I'm basically what I'm saying down here is this say hi function is going to take as a Parameter in other words as an input a string of characters called name and what I can do is I can come down here and I can actually print that out so I could say Percent s and we could print out name now Over here when I call this say hi function because I specified that it's gonna take a parameter I have to give it a string so I could give this a string like Mike like I'll put my name in here when I call this say hi function now, I'm Passing the value Mike into this function So Mike is gonna get stored inside of this name array and we're gonna be able to print it out down here Let's go ahead and run our program and you'll see it says hello Mike. So instead of saying hello user now We're able to customize what it says The cool thing about this is I could copy this line of code Like I could call this function a bunch of times with different names. Actually. I'm gonna put in a new line down here So this is more obvious so I could say hello Mike. Hello, Tom Hello Oscar now when I run my program It's saying hello to each of these different people because we define the function and we can pass it different names and Depending on what we pass it depending on the parameter that we give it it'll perform its task a little bit differently You can also specify multiple parameters. So let's say in addition to accepting the name as a parameter. We also accepted their age So I could say char name And then down here I can specify int age. And now we're basically saying that this is going to take an age as well So I could say hello and then I could say you are and we'll say the age So now over here instead of an addition to just saying name we can also say age so now when I run this Function and when I call it I have to also give this an age so we could say like 40 23 and 70 and now this is gonna print out all that information for us. So hello Mike you are 40. Hello. Tom. You're 23 Hello, Oscar, you're 70 and you can pass as many parameters as you want into one of these functions You always just have to make sure though that you're passing a parameter When you're calling the function just like that. So that's the basics of using functions and in the next tutorial. We're going to talk about This guy over here, which is the return type and we're gonna look at how we can get information back from a function In this tutorial I'll talk to you guys about return statements in C Where a turn statement is a special line of code that we can include in our functions which will allow them to return information back to whoever called them so I can write a function and that can have that function give information back to whoever called it that could be information like the result of some operation or you know It could be it a message telling whoever called it how the function went. It could be anything like that So I'm gonna show you guys Basically how we can do that and I'll just give you an overview of like return types and all that stuff. So down here I'm actually going to create a function and we're gonna create a function that Cubes a number so when you cube a number generally you take it to the third power So I could say like 2 raised to the third power Which is the same as just saying 2 times 2 times 2 this would be cubing a number, right? You're taking it to the third power So I'm gonna make a function that's gonna do that basically This function will accept one parameter which is gonna be a number and it'll cube that number and then once it's done cubing the number, it'll give That value back to the caller and you guys will see how that will work So I do want to point out one thing whenever we are Returning values in our function. So if you're gonna write a function that's gonna return a value You always want to put it above the function that's going to be calling it So for example like this main function down here, this is the first function that executes So any code we put in here is gonna get executed first if I want to return a value with my function I'm gonna define the function here above the main method and there's a couple reasons why we want to do that essentially It'll just make sure that everything works correctly So we want to make sure that we define this function before we actually call it down here and get a value back so the first thing that I need to tell C when I want to create a function is What type of data I want to return if you've been following along with this course You'll know in the last tutorial We use the void return type which basically means we weren't going to return any information But now we want to actually return information So we want to Cuba number so why don't we return a double and you can put any datatype here you want you can also put like int or Character or character array, but let's just do double and we're gonna give this a name So I'm gonna call this cube and I'm gonna make an open and closed parenthesis and inside of this parenthesis We're gonna allow this method or we're gonna allow this function to accept one parameter as input So it's just going to be another double and call it num. So Basically, what we want to do is we want a cube num and we want to give that value back to the user so over Here, I'm just gonna create a variable It's just gonna be another double called result and I'm gonna set it equal to num Times num times num. So basically this variable result now represents or now stores the cubed value of num all we need to do to return this value now is just say return Result and this return keyword is basically gonna do a couple things The first thing it does is it breaks us out of the function. So whatever we put that return keyword It's gonna break us out of the function and it's gonna return this value back to the caller So down here we can actually call this function so actually what I want to do is I want to print out the answer that we get back so I can do printf and in here, I'm just gonna say Answer and we'll print out the answer. So percent F so I'm using % F because we're expecting to get a double back from here remembered double is a return type and Over here. I can just say cube and we'll pass in a number. Let's pass in 3.0 Essentially what's gonna happen now is we're going to call this function All this code is going to execute and this function is going to get a value back basically the value of cubing 3.0. So normally like in the past in this course what we wanted to print on a number we'd have to put like 4 or 76 or you know, whatever we'd have to put a number right there But we can just call this function because eventually this is going to get a number back anyway So this will contain a number after the functions done being called So I can actually just run my program now and this is going to print out the result of cubing 3.0 So you'll see down here we get 27 point 0 0 so 3 cubed is 27 3 times 3 is 9 9 times 3 27 so looks like our cube function works Let's try with another number. Why don't we do 7? So let's run this again and we get 343 I'm guessing that's right So basically what we did is we created this function and we use this return keyword and we returned back to the caller The value of cubing the number and that's really cool And actually we can make this a lot simpler so I could actually just get rid of this Result variable and I could just straight up return Num cubed and this is and this is gonna do the same exact thing so we should get the same answer. Yeah So this can be really awesome And one thing I want to point out is this return keyword will actually break us out of the function So if I came down here and I said like printf and I printed out like here This actually this code is actually never gonna get executed. So if I was to run my program You'll notice that it's not printing out here. So that never gets printed out in other words this line of code down here Print out here. This never gets touched because when we use this return keyword This breaks us out of the function. So whenever C sees this return keyword, it just exits the function and goes back down here to the normal program So just keep in mind that you can't really put any code after you use this return keyword because it will break you out of the function and actually want to talk to You guys about one more thing really quick you'll notice up here I'm creating my cube function above the main function. So I actually created this above here and the reason that I did that was because if I was to move this down here below the main function and I try to run my program you'll notice that we're getting an error over here and actually if we look at the error down here in the Output it says error Conflicting types for cube now Essentially what's happening is when I create this function down here below this main method When the main method over here tries to call it. It actually doesn't know About this function yet like it doesn't necessarily know like what this function is what it's going to return and what parameters it's gonna take because we Created it after we created this main method. So what I can do is actually something called Prototyping and when I prototype it'll allow me to create this function below this main function without getting this error and basically when you prototype I'm basically just going to write out the Function signature, so we would call this like the signature basically the return type and the parameters and the name So if I was to put this up here and put a semicolon now when I run my program You'll see that we're not getting this error anymore, and we're actually getting the answer back So this is a way that you can create functions below that main function without having any problems and you know basically any functions that I created I could put another prototype up there at the top and It's gonna be fine In this tutorial and talked to you guys about if statements in C an if statement is a Programming structure which we can use to help our programs to make decisions by using an if statement our programs can actually respond So in certain circumstances, they can do certain things and in other circumstances They can do other things and if statements are Extremely powerful and they're a great way to add some intelligence to our programs for the purposes of this tutorial We're gonna be building a function. So we're gonna build a function and it's gonna be called the max function Basically what this function is gonna do is it's gonna take two parameters two numbers and it's gonna tell us which number is the biggest so I could give it like four and I can give it a Ten and it'll tell us which number is bigger. Let's go ahead and do that. I'm gonna make this function up here and It's going to return an integer and I'm just gonna call it max and it's gonna take as parameters two integers so it's gonna take an integer num one and it's gonna take another integer num two and Now we'll just make the actual function body so inside this function our job is to figure out whether num one is the biggest or num two is the biggest and we're going To return the biggest to the caller so the first thing I'm gonna do is create a variable and it's gonna be an integer and I'm just gonna call it result and I'm not gonna give it a value right away What we need to do in this function is we need to figure out which one's bigger we need to figure out if num one is the biggest or We need to figure out if num two is the biggest and this is a perfect situation To use an if statement an if statement allows us to check a certain condition And if that conditions true we can do one thing and if the conditions false we can do another thing so down here I'm gonna use an if statement I'm basically just gonna say if and then we're gonna make an open and close parenthesis and I'm gonna make an open and closed curly bracket now Inside of here inside of these parentheses. We need to specify a condition This is something that's either gonna be true or false if the condition inside of these parentheses is true We're gonna execute the code inside of these curly brackets. If it's false, then we're just gonna move on so In order to tell whether or not num1 is bigger than num2 or num 2 is bigger than num 1 we can actually compare them so down here I could say if Num 1 and I can use this greater than sign Num2. I'm basically saying if num 1 is greater than num2 then I want to do something so down here we can set result equal to num 1 if This condition is true. Then we're gonna do this. So only when num, 1 is greater than num2 are we gonna set result equal to num 1 so basically by using this if statement we're able to Tell which one is bigger but here's the thing what if num 1 isn't? Greater than num - what if num 2 is greater than num 1? well I can use something called an else statement so I can come down here and I could say else and I don't actually need to use an open and close parentheses I can just make an open and close curly bracket And the code inside of this else block is going to execute if the condition up here is false so if this condition is false if num 1 is not greater than num 2 then we can just Set result equal to num 2 and then down here. Finally. We're gonna return Result so depending on whether or not this is true result is either gonna set equal to num 1 or it's gonna be set equal to num - So let's go down here into our main method and why don't we call this? So I'm actually gonna print out the result So I'm just gonna say printf and we're gonna be printing out an integer and Over here, I'm gonna call this function. So I'm just gonna say Max and I'm gonna pass in two numbers So we're passing a 4 it will pass in a 10 So I'm passing in a 4 and I'm passing in a 10 and this is going to return to us whichever one is bigger in Other words this should return 10. So let's go ahead and run our program and you'll see over here. We're returning 10 So we got the value of 10 back from this function. Let's try it with the other number So let's make the first number bigger. So now we have 40 and 10 So this should give us 40 back awesome so over here we have an awesome function, right? We're basically checking to see if num 1 is greater than num - if it is, then we're gonna return num 1 otherwise we're going to Num2 and it's important to note that even if I made these equal So if I made it forty and forty, we're still going to get back the correct answer So it's still gonna give us forty back. So this is the basics of using if statements, right? We say if we specify a condition if that conditions true We're gonna execute this code if that conditions false We're gonna execute this code down here And that is an extremely powerful structure in our programs and we can really use this to respond to different input right So depending on what the user puts in num1 and num2 we can do different things But this is just sort of the beginning. So why don't we try to make this function a little bit more complex? So down here we're allowing the user to input two parameters So we're accepting two parameters into this max function num1 and num2 and we're able to spit out which one is bigger But let's up the ante a little bit what if we wanted to accept three parameters? So instead of just passing in two numbers We wanted to be able to pass in three numbers and have the max function spit out the biggest so over here we can modify This max function, so I'm just gonna make another parameter. So I'm going to say int and we'll call this one num three So now this function is accepting three parameters num1 num2 and num three But in order to figure out which one of these is the biggest we're actually gonna need a more complex if statement So I'm gonna get rid of this and let's just start from scratch. So let's think about this How can we figure out which one of these is the biggest? well, what I would recommend is we could say if num 1 is greater than num2 and Num, 1 is greater than num 3 then we know num ones the biggest right? So if num1 is bigger than num2 and it's bigger than um 3 we know it's the biggest if num2 is greater than num1 and num2 Is greater than num 3 then we know num2 is the biggest and otherwise we can just say that num 3 is the biggest so I'm gonna show you guys how to do this and we're actually going to be introducing a couple more Concepts for if statement so I'm just gonna say if and I want to check a condition so I basically want to see if num 1 is greater than or equal to num 2 and num threes so down here I can say num one is Greater than or equal to num2 and now I also want to check to see if num1 is greater than or equal to number three Because if num1 is greater than or equal to num2 and it's greater than or equal to number three We know num1 is the biggest so I can use this special signal here. This is called a logical operator and Basically, this is going to allow us to put another condition in here so I could say num 1 is greater than or equal to num 3 basically what this and does is it allows us to put two conditions so we can check two things and This whole thing is only going to be true if this conditions true and this conditions sure So if one of these guys is false, then this if statement isn't going to get executed so down here I'm just gonna open this up and if this is the case that we want to set result equal to num 1 because if num 1 is greater than or equal to num - and Num, 1 is also greater than or equal to number 3 then we know num one's the biggest. Here's the thing We also want to check to see if num 2 is the biggest So if this is false We also want to check to see if num 2 is the biggest now we can use something called else if so down here I could type out else if and I can make another open and closed parenthesis and inside of these parentheses. We can actually check another condition So if this stuff up here at this conditions false then else if is saying let's come down here. Let's check another condition So here I want to do basically the same thing I'm gonna check to see if num 2 is greater than or equal to num 1 and Num 2 is greater than or equal to num 3 So if this condition is true if num 2 is greater than or equal to num 1 and it's greater than equal to num 3 Then we know for a fact that result is gonna be num - because that's the biggest now finally down here We can just say else and we can make another to open and close curly bracket And remember this code is going to get executed when neither of these conditions is true So here we can just set result equal to num 3 So let me walk you guys through this one more time up here We have this if statement and in addition to checking to see if num1 is greater than or equal to num2 we're also using this special operator called and and we're checking to see if num1 is greater than or equal to num 3 if That's the case then result is going to be equal to num 1 Otherwise if this condition is false Then we're gonna come down here and we're going to check this other condition So we're gonna check to see if num 2 is bigger than num 1 and if it's bigger than num 3 if that's true, then we're gonna do this Finally if neither of these conditions up here is true We're just gonna go ahead and set result equal to num 3 and then we're gonna return results. So this looks good to me Let's test this out and we're gonna see if it works. So now when we call max we need to include three numbers So why don't we just do 1? 2 & 3 and This is basically going to spit out the biggest one, which should be 3 so Let's run our program and you can see over here we get 3 so let's try to make one of the other ones the biggest so we'll make the 1 in the first slot the Biggest and let's run this again and you can see that it returns 10. So this function is working So that's how we can use these ands and we can also use else--if in order to check additional conditions so the and is used to check more than one condition inside of the if Parentheses and the else if is used to check another condition when this conditions false and so that is actually gonna work out pretty well Now I want to show you guys a couple other things There's a couple other things that we can do with these if statements so for example I'm gonna come down here and just show you guys some of these In addition to using that and we can also use something called or so I'm just gonna type out a simple if statement I could say if 3 is greater than 2 and instead of using and like this I can use or and or is basically gonna allow us to Check two conditions, and the whole thing is going to be true if only one of those conditions true so I could say if 3 is greater than 2 or 2 is greater than 5 So only one of these is true, right 3 is greater than 2 that's true but 2 is not greater than 5 so this guy's false, but when we use or One of these two conditions has to be true for the whole thing to be true. So if I like printed something out here like true Now when I run my program we should print true because we're using that or and you see that we do But if I was to make this guy false, so if I made this 3 less than 2 now It's not gonna print out true and we can just print out false. So Now we're gonna end up renting out false because both of these guys are false So you can see down here. We're saying false. So the difference between and and or when we have and like this Both of these conditions have to be true in order for the whole thing to be true and for us to execute this code When we have or only one of these guys has to be true so that's kind of the difference there and I want to show you guys a couple other things that we can use so Over here we're using like a less than sign so for example If 3 is less than 2 I can also use a greater than sign I could use the less than or equal to sign. I Could use also a greater than or equal to sign and if I wanted to check for equality I could use a double I could use a double equals So the double equals will check to see if 3 is equal to 2 we can also use one more which is this exclamation point an exclamation point basically means not equals so I could say if 3 is not equal to 2 then we'll print out true so down here. Let's run this and you'll see that we get true So yeah, there you go. One more thing. I want to show you is how we can negate an entire Operation. So for example, if I said 3 is greater than 2 this is gonna be true right so we'd end up printing out true down here because 3 is greater than 2 but I could surround this whole thing with Parentheses and I could put an exclamation point right before this and this is called the negation operator and it's basically going to negate Whatever this ends up being so this is true And we put this negation operator here this whole thing is going to be false. And so now you'll see Because this is true and we're using the negation operator. We're not going to end up printing out true And you can see we just don't print But if I put a false condition in here, like if I said three is less than two This is false. But because we're negating it now, it's gonna end up being true So when I run my program you can see that we get true So that's sort of the basics of using if statements and I cover just about everything that you can do We can use ands, we can use all these different comparison operators We can use ORS and we can use this exclamation point to negate something In this tutorial I'm going to teach you guys how to build a calculator in see have you been following along with this course? You'll know that in the beginning of the course. We actually created a calculator and it was very basic calculator basically We let the user input two numbers and we took those numbers we added them together and we printed the answer out onto the screen in this tutorial I'm gonna take some of the stuff that we've learned since then and show you guys how we can build a fully functional for function calculator So this calculator will be able to add Subtract multiply and divide and we're gonna let the user decide which one they want to do So we'll let them decide if they want to add or subtract or whatever it's gonna be pretty cool and we're gonna end up using some of the stuff that we've learned recently in the course like if statements we're also gonna use like getting input from users and I'm gonna show you guys how you can get characters as Input from a user as well. So down here. We want to start making our calculator, basically What I'm gonna do is I'm gonna ask the user to enter a number Then I'm gonna ask them to enter an operator like plus minus division or subtraction finally we're gonna ask them to enter in a third number and then we'll Depending on what operator they specify so addition and subtraction whatever we will perform the correct operation and we'll print out the number So the first thing I want to do is create Variables where we can store the numbers and the operator so I'm gonna make some double variables and I'm just gonna call this one Num 1 and then we'll make another double call it num2 finally, we'll make a variable that will store the operator that they enter so this is just gonna be a char and I'm just gonna Call it op4 Operator. All right. So now we want to actually get input from the user I want to figure out what numbers they want to use and then what operator they want to use as well So down here. Why don't we get some input? The first thing I'm going to do is I'm just gonna print out a prompt so I'm just gonna say enter a number And now what we want to do is we want to be able to Take the number they give us and store it inside of one of those doubles that we created So I'm just gonna use this scanf function Scanf and in here I'm gonna specify that we want to get a double So remember when we're using scanf if we want to scan for a double we use F and L F is going to scan for a double and now I'm going to use a comma and we'll put the Variable that we want to store in here so I'm gonna use this ampersand and I'm just gonna say num 1 So this is exactly what we need to do to be able to get the users input and store it into num 1 The next thing we want to do is get the operator. So I'm gonna type out another prompt and I'm just gonna say enter operator basically They'll be entering in plus sign minus sign asterisks or forward slash depending on what they want to do and again now we're going to scan for a Character now when we're scanning for a character and scanf and actually I don't think i've talked about this yet in this course We want to do something special. So I want to put a % and a C. But before I put % C I want to put a space so whenever we're getting a character from the user using scanf, we always want to put a space Right here before % c otherwise, it's not gonna work. And again we want to store this in that Opie variable so I'm just gonna say o P and One more time we're gonna get another number. So I'm just gonna copy this paste this down here and We're gonna get this one for num2 So now we should have all of the input for our program. So I'm getting the first number I'm getting the operator and I'm getting the second number. The last thing we have to do now is actually do the math So we're gonna have to figure out which operator they wanted to use Right, so we have this Opie variable and this is storing like a plus sign a minus sign a Asterix or a forward slash So depending on what that's storing we want to print something Different out so we can actually use an if statement to do this so I can use an if statement to check and see What operator is inside of our operator variable and depending on which one it is? We can do a different Operation so I can say if and the first thing I'm going to do is just check to see if the operator is equal to a plus sign so If the operator that the user entered is equal to a plus sign then we're gonna want to add the two numbers together So I'm just gonna print out these two numbers and I'll just say num1 plus num2 Because we're gonna add both of them together. We can also use an L safe So I'm going to want to check a few other conditions I'm going to check to see if the operator is equal to a minus Sign and if the operator is equal to a minus sign then instead of adding the numbers we're going to subtract them so over here I'll just copy this and we'll paste this guy down here So it's going to be num1 - num2 And I can actually just copy this whole thing and we'll paste it down here. So it makes more room down here We'll paste this other elsif and here we're going to check to see if it's division So we'll check for a forward slash. And again, we're just going to want to print out a Decimal number so it's going to be num1 divided by num2 Finally, we're gonna check for multiplication. So if it's multiplication, then we're going to multiply them together So now we're checking for each of the operators. We're checking for addition subtraction multiplication and division But here's the thing what happens if the user enters in an operator that we didn't want so for example if they don't enter in any of these operators We're gonna want to tell them so I'm gonna have this like print out a little error message We're just gonna say else and basically the code inside this else block will get executed If none of these conditions up here true and down here we can just make a print F and I'm just gonna print out invalid operator So now we have our if statement or if block setup and this should be everything that we need to use our little calculator Alright, so let's go ahead and run this program so you can see over here It says enter a number so we can enter a number. Let's enter in five point nine and Enter an operator we'll add numbers and now let's enter in 4.0 So we're gonna add five point nine and four so when I click enter we should go through all of those if Statements and figure out what we need to do and you'll see over here that we're adding five point nine and four together And we're getting nine point nine. So looks like the program worked. Let's try it again. We'll try another operator Why don't we try to multiply some numbers? So let's multiply six and Times I don't know five point seven so we get thirty four point two that seems about right All right, and then one more time we'll run this and I want to try to enter in an invalid operator So we'll say like 5.7 and I'm just gonna enter in a G. So that's an invalid operator That's not going to work and I'll enter my number. Let's do 8 and you can see it tells us invalid operator so basically we have a four function calculator this calculator can multiply divide subtract and Add and if you don't enter in a correct operator It's smart enough to yell at you and tell you that you have an invalid operator. So This seems to work pretty well. I'm pretty happy with it And you can see down here like this is a perfect situation for using something like an if statement, right? We have this variable opie, right? It's storing some sort of operator We don't necessarily know what's inside of there But I can use if statements and I can respond to the different scenarios So in the situation where it's a plus sign I can respond in the situation where it's a minus sign I can respond etc And this just makes our programs a lot smarter and it helps us to do different things when different situations arise In this tutorial I want to talk to you guys about using switch statements in C now a switch statement is basically a Special type of if statement which will allow us to compare one value to a bunch of different values And it's essentially doing the same thing as an if statement It's allowing us to check different conditions and if different conditions are true Then we can do certain things but a switch statement makes it really really easy for us to compare one specific value to a bunch of other values now I'm gonna show you guys how we can use that in this tutorial to make a little test app So I'm gonna build a little program that will take a letter grade and depending on the letter grade It will tell you whether or not you did good or bad on a test So if you got an a on the test it would say hey you did a good job If you got a B on its house, it'd be like hey you did Alright, if you got an F on the test to tell you that you failed the test so we're basically gonna have a variable where we'll store a grade that you would get on a test and we'll be able to Respond to that grade using a switch statement. So it's gonna be pretty cool. So down here the first thing I'm gonna do is create a variable and it's just gonna be a character and I'm just gonna call it grade and I'm gonna set it equal to a So we're gonna say that whoever took this test got an a on the test and they did really well Now what I want to do is I want to create a switch statement. So I'm just gonna say Switch and I'm gonna make an open and closed parenthesis and inside of this parenthesis I'm gonna put grade so I'm just gonna put grade and I'm gonna make an opening close curly bracket So this is sort of like the basic structure for our switch statement. Now, here's what I'm basically gonna do I'm gonna take this variable here that I pass into the parentheses grade and I'm gonna compare it to a bunch of different values So I'm gonna take this I'm gonna see if it's equal to one value then I'm gonna see if it's equal to a different value or a different value or a different value and Depending on the value that it ends up being equal to we're gonna do something different and these are what are called cases so down here I can say case and I just want to type out a Character so for example, I could put a right here and then I'm gonna put a colon and when I put a right here, basically what this is saying is the case that grade is equal to a then I'm gonna put some code down here that I want to execute so I could just put like a print statement and I could say like you did great because they did great on the test and basically what this is saying is in the case that the grade is equal to a we're gonna print this out and then I want to Put one more thing down here Which is called break and I'm gonna explain what break does in a second So I could make one of these little case statements for every possibility so for every possible grade that we could get so I'm actually just gonna copy this whole thing and I'm gonna paste it down here So now I can put a B in here. So we're saying in the case that the grade is equal to B I'm gonna say you did. All right, and Then we're also going to break and down here. I'm gonna make another one So I'll say case and this time we'll make it C in the case that they get a C. I'm gonna print out portal e and There's a couple more that we can check so we can check if they got a D or an F. So in the case they got a D and I forgot to put a break statement here and I'm gonna put one down here, too And finally, we're just gonna do one more for if they failed the test So I'm just gonna say in the case that they got an F We will print out You failed so Essentially, what I'm doing here is I'm writing out all of these different cases So I'm saying in the case that you got an F. I'm gonna print out you failed and the case they got a D I'm gonna print out you did very bad And then we also have this break statement here and this break statement basically tells our switch statement that we want to leave So whenever we're executing this switch statement whenever C is executing the switch statement It's checking to see if grade is equal to each one of these cases So for example, let's say the grade is equal to a it's gonna execute this print F But if I don't put this break statement in here, then it's just gonna keep going and keep checking these different cases So it's always important to put a break statement in there because I basically just want to break out of this switch statement I don't want to be in here anymore. So finally we can check one more thing in the case that the user Or that we get an invalid grade. So for example, if someone entered in like a t or G or something that's not a valid grade so I can use something called default and Default is basically like an else so default is going to execute whenever none of these conditions up here or Matt so then I can just put something like Invalid grade or something and this will basically be like, hey, you got an invalid grade So let's take a look at this switch statement and we'll just kind of talk a little bit more about what it's doing Basically, I'm passing this in a variable or a value or something and I'm gonna check this value against all of these different conditions so in the case the grade is equal to a We're gonna print you did great and the case that B is equal to grade will print you did. All right, etc and this is basically doing what an if statement doing so I can replicate this entire statement this entire switch statement as An if statement I can write out if etc else--if else--if else--if But this just makes it a lot easier So I don't have to constantly write out all of that if statement stuff So hopefully we did everything right and let's actually check and see how our program does So grade is equal to a let's run our program and see what our message is It says hey, you did great because we got an A if I made this an F instead of an A Now it should tell us that we failed So it says you failed if I made this a C It'll tell us that we did poorly and it says you did poorly So this is a super easy way for us to check one single value against a bunch of different conditions And that's really the point of a switch statement is you're checking one single value like grade Against a bunch of other values and that's where it can be extremely useful So consider using the switch statements They're not appropriate in every situation and there's I'd say like very select few situations where switch statements will come in handy But when they are appropriate switch statements will save you a lot of time and a lot of hassle In this tutorial I want to talk to you guys about strux in C now a struct is a data structure where we can store groups of data types so inside of a struct I could store like an integer alongside of a String alongside a character alongside a double I could sort all these different data types in one single data Structure and there's tons of uses for structs and one of the things we can do with them is model real world entities So I could basically like a model Something in the real world inside of my program and I'm gonna show you guys how to do that in this tutorial We're gonna be looking at how we can use a struct to represent a student inside of our program So imagine we were writing a piece of software that was using like students. So it was like storing records of students or something I could use a struct to represent a student in my program so over here in my program I'm just gonna come up here above the main method and I'm actually gonna create a struct you guys will see like how these work and how we can use them so I'm just gonna say struct and Over here, I'm gonna give this a name so I'm gonna call this Student and a lot of times in C when we're making structs. You're gonna give them a Capital letter just like that and I'm gonna make an open and closed curly bracket now Inside of this struct I can start specifying what types of data are gonna make up a student in my program So basically I can define like different attributes of a student and place them in here And this will kind of act as a template and you'll see how we can use this later So let's think about different attributes of a student Well one thing would be like the student's name so I could say char name and I'm gonna make this a array of characters so this is gonna represent the name and actually why don't we give this a number so I'm gonna say 50 so this String can hold 50 characters maximum and now we're gonna make another one for major So we're gonna want to store the students major and again, we'll make this 50 I also want to make an integer for the students age and a double for the students GPA So I have this struct student and in here I have a bunch of after buttes of a student right have like the students name their major An integer that stores their age and a double for their GPA Essentially what I did was I created like a type of student data type So I basically am allowing myself now to represent a student inside of my program so let's come down here to this main method and I'll show you guys how we can use this so I can basically Create an instance of this student structure so I can create like an actual student Inside of my program and the way that I do that is just by saying Struct and I want to type out the name of the struct that I want to make in our case It's gonna be a student and I want to give this a name. So I'm just gonna call it student 1 and I can just use a semicolon here basically, what I did now was I created a container called student 1 that's gonna be able to store a Name a major in age and a GPA So if you're familiar with arrays in C, you'll know an array is a special structure that can hold multiple pieces of information But all the pieces of information inside of an array needs to be of the same data type and also they don't have names with a Struct I can have a bunch of different data types like this and I can also give them names like name major age and GPA So now let me show you guys how we can assign some values to these So for this particular student student 1 I can give them a name I can give them a major a GPA and an age so I could say student 1 dot age and I can set this equal to something so I could say let's say student ones age is 22 so basically Inside of this student 1 container I'm saying the age of this particular student is gonna be 22 I can do the same for the GPA so I can say student GPA is equal to maybe they have a 3.2 So I'm saying this particular student's GPA is a 3.2. I can also do the same thing for those strings So for the name and the major now, here's the thing about working with strings Remember in C a string is actually just an array of characters and when we have an array We can't like give it a particular value So for example, if I wanted to give this students name of value, this is just an array of characters So I can't just come down here and say student name is equal to something That's not gonna work because you can't do that with an array I can use something called the string copy function and this is a function that will take a String and it'll give it a value that we specify so it'll basically do what we want to do like what we did over here with the age and the GPA but with the name so I could say like Str. C py and inside of here. I need to pass this two parameters The first thing I want to pass is the destination for the string. So we're gonna pass in student 1 dot name the second thing I want to pass in is the String that I want to store inside of student 1 name. So in our case, let's just name it him Jim So now we have the student 1 names value is equal to Jim and I can do the same thing for major so I'm just gonna copy this and we'll come down here and I could say student 1 major and we're gonna set this equal to Business, so let's say Jim is a business major Essentially what I've done here is I've created a student and that student had all the attributes that we defined up here so this particular student had a name a major in age and a GPA and I gave all of those values So I assigned this student 1 an age of 20 to a GPA of 3.2 etc So now what I can actually do is I can print out all these different values that are stored inside of this structure so if I wanted for example, I could like Print out the GPA so I could print out Student 1 GPA and now we're gonna be printing out 3.2. And actually it looks like I have a typo here. This should be student 1 not student Alright so here we're printing out 3.2. So we're printing out the value of the student's GPA I can also print out like their name. So why don't we do that student 1 name and now this is gonna print out So you see we prints out over there So a struct is a really useful structure And another cool thing we can do with structs is we could actually create another Student so I could create like another instance of that student structure. So I'm actually just gonna copy all this stuff I'll show you how we can do this. I'll just come down here and paste it and Instead of student 1 why don't we call this one student 2 and we can set this student's age to be like maybe 20 Maybe their GPA is a 2.5 Let's say their name is Pam and they're studying art So now I have a completely different student And if I wanted I could print out this students attributes so I can print out like student 2 Dot name and now we're gonna get Pam instead of Jim so you can see how that works right there So I could create as many of these students as I want and this is what's cool about Structs is I can just define the basic template for a student in my program and then I can create Individual students down here that I can work with. So now I have this like student variable here I could do whatever I want with it. I could pass it into a function I could print it out onto the screen I could use it in something like an if statement I could do basically anything I want with it It's it acts a lot like a variable or an array so remember variables and arrays or just Containers we can do just about anything we want with them and that's the same with a struct so this has just been kind of an introduction and What you could do as an exercise is think of other things you might want to model in your program So maybe something like a book or something like a phone you could model a phone using a struck basically any type of Information you could store using a struct just like this In this tutorial I want to talk to you guys about while loops in C now a while loop is basically a structure in the C programming language that we can use to loop over and Continually execute a specific block of code until a certain condition is false So I can specify a condition and then I can basically just loop over a bunch of code until that condition is no longer true and Loops can be really useful there's a lot of times in our programs or we're gonna want to let Continually do something while something else is true or while a certain condition Is met and I'm gonna show you guys a really basic while loop in this tutorial and then in the next tutorial We're actually gonna build a really cool guessing game using while loops so it should be pretty fun And you should get a pretty good idea of like how these things work The first thing I want to do And this isn't directly related to creating a while loop though is I want to create an integer So I'm just gonna create an integer called index and I'm gonna set it equal to 1 now What I want to do is I want to actually create a while loop and you guys will see where this index comes into play So in order to create a while loop I can just type out while and open and close parentheses and then an open and close curly bracket And this is basically like the outline sort of like the template for our while loop Basically how this is gonna work is up here in these parentheses I'm gonna specify a condition and as long as that condition is true I'm gonna loop through all of the code inside of these curly brackets So inside of these curly brackets, I'm gonna put a bunch of code. And as long as the condition in these parentheses is true I'm gonna execute all that code so Up here. We're going to specify a condition. I'm gonna specify a condition that index is less than or equal to 5 so while index is less than or equal to 5, I want to execute all the code inside of here So I'm gonna put some code in here. The first thing I'm going to do is I'm just gonna print out the value of index so over here I'm just gonna say we're gonna print out an integer and I'm just gonna print out index so we'll be printing out index and actually why don't we print out a new line every time to There we go. And Finally after this. I want to increment the index variable so I can just say in X is equal to index plus one Basically, I'm adding one onto the index every time and actually I want to show you guys something in C there's gonna be a lot of Situations where you're gonna want to do something like this basically add one to an existing variable and in C there's actually a shortcut we can use so I can come over here and I could just say index plus plus and This is gonna do the same thing. So this is just gonna add one to the index Essentially, what I'm doing is I'm saying I want to print out index and then I want to increment index and I'm gonna keep looping Through this code while index is less than or equal to five So let's go ahead and run this program and maybe you can predict what's going to happen You'll see over here. I'm printing out the numbers one through five So I'm printing out one two three Four and five and let me walk you guys through exactly what's happening in this loop over here we create this index variable and we set it equal to one and Basically when C goes to execute this program the first thing it's gonna do before it does anything else is it's gonna look at this condition and it's gonna check the condition and it's gonna say okay is index less than Or equal to five. Well, the first time through index is equal to one. So it's definitely less than five C's gonna go through It's gonna execute this line of code printing out one Then it's gonna execute this line of code incrementing index Then what C's gonna do is it's gonna come all the way back up here and it's gonna check this condition again so it's gonna say okay is index less than or equal to five and Index at this point is equal to two so it's less than five so it's gonna go through execute this line of code execute this line of code now index is equal to three and C's gonna go all the way back up to the top it's gonna check this condition again So before C goes through this loop It's always gonna it's always gonna check the condition first. So before it's allowed to go and execute that code again It has to check the condition to make sure that it's true Eventually, we're gonna get to a situation where index gets incremented and it gets incremented up to 6 then C's gonna come back up here and it's gonna check to see if 6 is less than or equal to 5 it's gonna be False and we're gonna move with our lives in the program and that's the basics of while loops So this seems very simple and that's because it is all we do is specify condition As long as that condition is true We keep doing all this stuff in here and there's tons of situations where while loops are gonna come in handy This is just one of them where we can print out like numbers between 1 and 5 I also do want to point out one thing That you might want to watch out for which is called an infinite loop and an infinite loop is a situation Where this condition up here never becomes false So this condition will just always stay true and there are certain circumstances where you're gonna want to use something like an infinite loop But in a lot of circumstances, you're not gonna want to go anywhere near something like that So let me just demonstrate so you guys can see so if I stopped incrementing this if I just got rid of index plus plus Now when I run my program you'll see that it's just continually printing out ones I mean look at all these ones that are getting printed out you can see like the text editor is kind of going crazy This program is just it keeps executing through that loop and it's still going right now So this would keep going forever if I let it keep going infinitely. Hence the name, so I'm just gonna terminate this but that'll kind of show you like how an infinite loop works and you definitely want to watch out for that because you'll get into situations as you work with while loops where they'll just become infinite and you you know you need to watch out for That especially if you're doing something a little bit more advanced where you're like siphoning off memory or you're creating processes or something it can Slow your computer down quite a bit. So this is a while loop and this is a really great loop there's also one other type of loop that's similar to a while loop that I want to talk to you guys about and Before I do that, I just want to do something really quick. So I'm gonna set this index equal to 6 All right I'm gonna set this equal to 6 and I'm gonna run my program and what you're gonna notice is nothing's gonna get printed out so the code inside of this while loop Isn't gonna print out because the first thing we always do when we were on this while loop is we check this condition So the first thing C's gonna do before it prints anything before it increments anything it's gonna check this condition and if it's false It's not gonna do any of this stuff So when I run this program, you'll see nothing's gonna get printed out and that's exactly what happens There's another type of a loop that's similar to a while loop Which is called a do-while loop and I'm going to show you how to make one All you have to do is take this wild thing up here and paste it down here below and then up here I'm just gonna say do and A do-while loop is similar to a while loop But the first thing a do-while loop does instead of checking this condition down here. Is it executes all of this code? So even though index is equal to 6 we're still gonna print out 6 and we're still going to increment it and Then we're gonna check the condition to see if we can keep looping So let me show you guys this and this should illustrate what this is doing. And actually I need to put a semicolon here So you can see over here We're printing out 6 so unlike before when we just use that while loop now because we're using a do-while loop We're doing whatever was inside of that loop before we're checking the condition and there's gonna be certain circumstances where a do-while loop will Come in handy. I would say by far while loops are way more common, but just you know, it's good to know about do-while Loops because there are certain circumstances where they'll come in handy Basically any time you don't want to be checking the condition first, you can use a do-while loop But those are the two basic types and there's actually another type of loop that we'll talk about later in the course Which is called a for loop, but for now We're gonna have some fun with while loops and in the next tutorial, we're gonna be building a little guessing game In this tutorial I'm gonna teach you guys how to build a little guessing game and see This is gonna be pretty cool because we're gonna use a lot of the stuff that we've learned up to this point in the course In order to build it, so let's get started basically This guessing game is going to allow the user to guess a secret number so we're gonna define a secret number and we're gonna give the user the opportunity to try and guess it so if they'll try to guess it if they get it right then they'll win the game and if They don't get it right then We'll let them guess again Right, so we'll basically let them keep guessing what the secret number is until they get it so down here We want to create a couple variables The first variable I want to create is gonna be an integer and it's gonna be the secret number So I'm just gonna call it secret number and why don't we just set it equal to five the next variable We want to create is gonna store the user's guess so this is also gonna be an integer and I'm just gonna call it guess and I'm not gonna give it a value yet because Right off the bat. The user wouldn't have guessed a number So what we want to do is we want to be able to prompt the user to enter in the number until they get it Right. So as long as the user hasn't entered in the correct number We want to keep asking them to enter it in in order to do that in order to like keep asking them to Enter it until they've guessed it and we can use something called a while loop So I'm just gonna type while and when making open and close parentheses and an open and closed curly brackets Let's think about a good condition for our game, basically We want to keep asking the user to enter an input as long as they haven't guessed the secret number So it's right there we could keep looping as long as the guess is not equal to The secret number right? and basically this is always going to be true until They guess the correct number now inside of here we want to prompt them to enter their guests and then we want to take whatever they enter and Store it inside of our guest variable. So let's do this first we'll say printf and I'm just gonna say enter a number and Then down here. I'm gonna use Scanf in order to get whatever number they enter and I'm gonna store it inside of that guest variable so I'm just gonna say at guess and this is gonna take whatever number Or whatever integer they enter and it's gonna store it inside of our guest variable So basically what's happening in this loop is every time through the loop we're getting a different number and then we're gonna come up here and we're gonna check to see if it's equal to the secret number if It's not then we're gonna go through again and we're gonna keep doing this But if the guest is equal to the secret number, then we'll break out of the loop and that means we'll be down here So I'm just gonna print out a success message and I'll basically just say like hey you win All right, awesome so you can see this isn't actually that many lines of code I mean, it's probably like ten lines of code to write out this whole thing and it looks like everything's set up So this should actually work properly. So let's try to run this and we'll see if we can guess the secret number So remember a secret number is five So I'm gonna run the program it says enter a number. So let's just kind of botch the guesses two Seven eight nine three so you'll notice I can keep entering in numbers and It'll keep prompting me to enter a number as long as I haven't guessed correctly So now let's type in five And remember five is the secret number when I click enter now that loop condition is going to end up being false, right? Because the guess is gonna be equal to the secret number and it's gonna execute and it's gonna say hey you win, right? So we broke out of that loop we executed the print statement that said you win and the program Terminated and that is a really cool little game so one of the cool things about this game and It's different from programs that we've written in this course in the past is it'll keep running Essentially infinitely until we enter in that correct guessed So it's gonna keep going and keep going keep asking us to do something and to enter in a value Until we entered correctly. So this is pretty cool now This is a pretty nice game and it's it's pretty simple But I want to maybe make it a little more complex one of the things that sucks about our game right now Is that the user gets unlimited guesses, right? So basically like they can just guess every single number and eventually they're gonna get it, right, you know So why don't we do this? We should impose a guess limit So why don't we say like the user can only guess three times and if they can't get the secret number in three tries Then they'll lose the game. So let's think about how we can go ahead and add that functionality Into this little app, I'm gonna walk you guys through how we can do that The first thing we're gonna need to do is we're gonna need to create some variables I'm going to create another variable up here and I'm just gonna call it guess count and Guess count is basically going to tell us how many times the user has tried to guess the secret number and I'm just gonna set this equal to zero because Initially, the user will have guessed zero times so remember this guest count variable is basically gonna get incremented every time they guess Right, so I'm gonna come down here. Every time we go through this loop. The user is guessing So every time we go through this loop, I'm gonna increment the guest count. So I'm just gonna say Guest count plus plus and that means every time the user guesses The guest count will get incremented and we'll have a accurate count of how many times the user has guessed All right the second variable that I want to make is Going to be another integer and I'm just gonna call it guess limit and this is gonna tell us how many times the user Can guess so this will basically determine like how many guesses the user gets So why don't we set this equal to three? I think three guesses is a pretty good limit and finally we want to create one more variable and this is also gonna be an integer and I'm just gonna call this out of guesses and I'm gonna set out of guesses equal to zero and out of guesses will basically Tell us whether or not the user has any more guesses and this might not be super clear what this is doing right now But keep following with the video and you'll see how this comes into play. This is actually gonna be really important So we're actually gonna have to modify our code a little bit so down here we have this set up So the user can keep guessing as long as the guess isn't equal to the secret number But we want to be able to limit the amount of times that the user can guess and actually down here I'm going to create an if statement and every time we go through this loop I want to check and see if the user has any more guesses left. I want to in other words I want to see if they've reached their guessed limit so I'm gonna make an if statement and I'm gonna check to see if the guest count is less than the guests limit as Long as the guest count is less than the guests limit That means they haven't guessed as many times as the limit specifies Basically, they can guess again, right so down here inside of this if statement I'm gonna put all of this code and I'm just gonna surround this with curly brackets so basically the user can only guess the number this code will only get executed when the Guest count is less than the guessed limit when the user has Additional guesses right when they haven't guessed as many times as the limit specifies Otherwise though, so if they have guessed too many times Right if the guest count is either equal to or greater than the guessed limit I'm actually gonna set this out of guesses variable equal to one so I'm gonna say out of guesses is equal to one and Basically what this is going to tell us is if out of guesses is greater than zero Then that'll tell us that the user is out of guesses. So Essentially if out of guesses has a value that's more than zero we'll know that they've run out of guesses and If you ever use any other programming languages before this is what we would refer to as like a boolean variable It's basically storing like a true or a false value, which we're representing with zero or one So if the guest counts less than the guessed limit they can guess again Otherwise we're gonna say out of guesses is equal to one. In other words. We're gonna say that they're out of guesses There's one more thing we have to do though is we have to come up here and we have to change this Condition because right now we're gonna keep looping through this code as long as the guest is not equal to the secret number But there's actually two situations where we want to break out of the loop The first is when they've guessed the number correctly Right, then. We want to come down here and print out you win But we also want to break out of the loop when they've run out of guesses So I want to check to see whether or not they're out of guesses so I'm gonna say guess is not equal to secret number and out of guesses is equal to Z So as long as out of guesses is equal to zero That means that they're not out of guesses and they still have some guesses left But if the guest counts less than the guessed limit and out of guesses gets set equal to one Then out of guesses isn't going to be equal to zero anymore. So we're gonna break out of the loop So basically, there's two scenarios now that will break us out of the loop either They get the word right or they run out of guesses So one more thing we have to do in this program is come down here and you'll see down here We're always printing out you win. So no matter what like no matter what happens We're printing out you win and that's because before if they made it down here if they made it out of that loop That means that they guessed the secret number correctly but There's actually two scenarios Down here where they would have broken out of the loop where there are they're out of guesses or they guess the secret word So I want to actually check to see which one we're dealing with. So I'm going to check to see if Of guesses and I'm gonna check to see if it's equal to one and if it's equal to one That means that they lost and they ran out of guesses. So I'm just gonna say of guesses otherwise though, it means that they won so I'm gonna say You win and this will basically be like hey you won the game awesome So this is a lot of code I know that and let's just run this see how we did And we'll see if our games working properly and then I'll kind of explain all the code to you guys And actually you know what? I just noticed the typo down here. I said out of guesses double equals one This is just have to be a single equals. So we're assigning this of value. So yeah, that was a little typo I had two equals that needs to be one. So let's go over here We'll run our program and it says enter a number. So why don't we try to lose the game? I'm just gonna say two two and now we're on our third and final guess if I don't get it this time That means we're gonna lose the game So I'm gonna enter and you'll see it says out of guesses So we weren't able to guess it within our three tries and the game told us that we lost Let's run it one more time. We'll try to win so I'll say like two one now We're on our third and final guess So if I don't get it this time we're going to I'm gonna guess of five and we guessed right so it's gonna tell us that we want so that's sort of Basically how this little program works and I'm gonna walk you guys through one more time so we have all these variables up here secret number is Just storing the number they need to guess the guest keeps track of what they're guessing each time The guest count is gonna tell us how many times they've guessed the number guess limit is gonna tell us how many times they can guess and Out of guesses is going to tell us whether or not the user is out of guesses. So down here We're checking two conditions for this while loop. We're checking to see if the guess is not equal to the secret number and We're gonna keep looping as long as out of guesses is equal to zero every time we go through this loop We check to see if the guest count is less than the guessed limit If it is then we ask them to guess we increment the guest count Otherwise we say out of guesses is equal to one and that's gonna break us out of the loop down here There's two situations the first situation is that they ran out of guesses the second situation is that they won the game and We're using this if statement to check both of those so that's basically how this works and this kind of shows you how we can use things like while loops and if statements and also, variables together in like one single program In this tutorial I'm going to teach you guys how to use for loops in C now a for loop is a special type of loop that we can use in C which allows us to use something called an indexing variable and this indexing variable will basically tell us what iteration of the loop we're currently on and we can use that indexing variable to do a bunch of stuff like we could Loop through an array of items we could do all sorts of stuff inside of a loop. So down here in my program You'll see that I have a while loop Set up and I have just sort of a basic while loop and I want to show you guys what it's doing. So Essentially up here I'm saying int I is equal to 1 so I'm giving this integer I the value of 1 and I'm saying wow I is less than or equal to 5 I'm gonna print out the value of I and then I'm gonna increment I so this is a very simple wire loop basically, we have this variable I and every time we go through the loop, we're printing it out until it's Greater than 5 so let's run this program and we'll see what it does So you'll see over here. We're basically printing out values between 1 and 5 and I want to point out what's actually happening so the first time that we go through this while loop we're printing out 1 The second time we're printing out to the third time. We're printing out 3 in other words this variable I is Basically telling us what iteration of the loop are currently on so on the first iteration of the loop I is telling us that we're on the first iteration of the loop, right the first time we go through the loop I is equal to 1 Second time we go through the loop I is equal to 2 third time I is equal to 3 So this variable I over here is basically telling us how many times we've gone through the loop So on the third time, it's telling us 3 fourth time for etc, and believe it or not This is actually a very useful thing for us to have when we're looping It's there's a lot of situations where you're gonna want to know what iteration of the loop you're currently on when you're looping so with a normal while loop like I can basically just specify a condition up here and I can do whatever I Want right? It's very open You can kind of just do whatever you want with it but in a lot of situations and there's tons of these situations we're going to have a variable just like I That will tell us what iteration of the loop that we're currently on or you know Basically just a variable that's gonna keep changing every time we go through the loop and this is such a common situation in see that there's actually something called a for loop and a for loop allows us to take all of this code and Condense it into its own single loop. So it's taking this situation where we want to have a variable like I and It's basically allowing us to do it a lot easier and a lot cleaner So I'm gonna show you guys how we can create a for loop I'm gonna come down here below this while loop and I'm gonna create a basic for loop structure So I'm just gonna say for I'm gonna make an open and closed parenthesis and an open and closed curly bracket now the difference between a for loop in a while loop is Basically gonna happen inside of these parentheses. So in the parentheses of a while loop, we have our loop condition or our loop guard Right. This is specifying whether or not we can keep looping through inside this for loop We're gonna have three different things. So instead of just one loop guard We're actually gonna have three different things that we want to put inside of here. So with a for loop the first thing I'm gonna put in here is This variable I so you'll notice in the while loop we have our variable I up here and this is basically Allowing us to loop through and keep track of how many times we've gone through the loop So what I can do down here is I can do something similar I could say like int I and I'm not gonna give this a value inside of here I'm gonna say I is equal to 1 so basically I'm gonna take my variable I and I'm gonna give it an initial value Of 1 and now I have my I variable I have my variable that's gonna change every time we go through the loop The next thing I want to do is include my looping condition so up here We have I as less than or equal to 5, that's our condition. I can put the same thing down here So I'm gonna say I is less than or equal to 5 The third thing I want to do is increment I so you'll notice down here Every time we go through this loop, we're incrementing that variable. I I'm gonna do the same thing over here in this little third quadrant So you'll notice I have these little like sections. Here's the first section We're initializing the very I were saying I is equal to one Here we're specifying our looping conditions so i'm saying we're gonna keep looping while I is less than or equal to five and Over here is a little line of code. That's gonna get executed. Every time we go through the loop So here I'm saying I plus plus I could also say like I minus minus and that would decrement I I could say like I is equal to I plus two Etc. Like I could do basically anything I wanted over here. Let's just keep it at I plus plus for now so you'll see I was basically able to take all of this code and condense it into its own little type of loop and now Instead of having to like print this out and create this variable up here. I can do all of that Inside of this for loop now, I can basically take this line of code I can paste it down into here and we essentially have the same thing So right now this block of code and this block of code are 100% equivalent They're doing exactly the same thing So let's go ahead and get rid of all this code and let's test out our shiny new for loop So I'm just gonna run my program and you'll see over here. We're getting exactly the same thing that we got before We're printing out one two, three, four five. So it's the same exact program doing the same exact thing and that's why for loops are great because we can take that little Structure like where we have an indexing variable and we can use it with something like this so I want to show you another situation where these four loops can come in handy and We can use them to loop through all the elements inside of an array so actually up here I have this array that I created. It's called lucky numbers and I'm just gonna grab this and bring it down here. So We have this lucky numbers array. It has 4 8 15 16 23 42 and What I could actually do is I could loop through all of the elements inside of this array From this for loop so I'm gonna show you guys how we can do that now Let's first off see how many elements we have we have 1 2 3 4 5 6 so we have 6 elements in this an array so what I'm gonna do is I'm actually gonna say I is equal to 0 and you'll see why we need to do this in a Second but basically array indexes start at 0 So this first element in the array is at index position zero and just for a little refresher if I wanted to access one of these elements from inside the array I could say like lucky numbers Was zero and this is going to give me access to this element If I said lucky numbers two, then I'll get access to this element this 15 So this is basically how we can access an element inside the array so I'm gonna set I equal to zero and I'm gonna say I want to loop while I is less than six and Six was how how many elements we had in the array? So I want to keep looping as long as we're less than six and I'm gonna say I plus plus Now down here. I'm gonna do this same exact thing but instead of printing out I I'm gonna print out lucky numbers I So I'm gonna print out the array element at index position. I and lucky numbers Basically the first time we go through this loop We're gonna be printing out lucky numbers zero Because I is going to be equal to zero the second time we go through the loop We're gonna be printing out lucky numbers one because I is gonna be equal to one etc And we're gonna keep doing that Until we get all the way up to five which is gonna be the last element, which is this 42 So let's go ahead and do that. So I need to put this back to I and Let's run this program. So you'll see over here We're basically doing exactly what I said. So the first time through the loop were printing out four We're printing out that first element the second time through the loop are printing out eight, which is the second element 15 16 23 and 40 - so we're printing out all of those elements in turn as we go through this for loop and There's a lot of situations where for loops are gonna come in handy but this is a very very very very common situation where we want to loop through all the elements in an array and either print them out or You know do something to them, whatever so that's the basics of working with for loops and I do just want to say like Anything that you do with a for loop you could do with a while loop, you know I basically showed you guys how we transform that while loop into a for loop the thing with for loops though is that they're very Convenient so it makes it really easy to do something like this without having to go through all the trouble of creating a while loop In this tutorial I'm gonna talk to you guys about two topics in C the first topic we're to talk about our two-dimensional arrays a Two-dimensional array is basically a situation where we have an array where all of the elements in the array are actually arrays themselves The second thing I want to talk to you guys about is nested. Loops So we're gonna look at how we can use a looping structure where we have a loop Inside of loops. It's gonna be pretty cool and actually these two topics can go together really well and I'm gonna show you guys how we can use nested loops and Two-dimensional arrays in order to make an awesome program. So let's get started the first thing I want to show you guys is two-dimensional arrays so down here we can create a 2d array and actually the concepts that I'm showing you in this video can apply to Multi-dimensional arrays so not only two dimensions but three four or five really as many dimensions as your heart desires So in order to create a two-dimensional array, I'm just gonna make an array of numbers So I'm just gonna say int and we'll give this a name. So why don't we just say nums and Normally when we create an array after we'd say the name of the array we'd make an open and close square bracket But when we create a two-dimensional array we're gonna make two open and closed square brackets just like that these two open and closed square brackets will basically represent like the Width and the height of our array so you guys will see what I mean in a second but basically we're gonna have like Elements in the array and then each of those elements is gonna be an array and we'll have elements inside of it So these two squares will allow us to like manipulate all that stuff. So what I'm gonna do is I'm gonna set this equal to An open and closed curly bracket now, this is normally how we would create an array So normally I would just say like 1 2 3 4 whatever I could put all my numbers in here But with a two-dimensional array all of the elements are gonna be arrays. So instead of just saying like 1 2 3 We're actually gonna create Arrays inside of here. So for example, I'll put an array right here and this text editor is so annoying with making these so for example the first element in this array, I could just make an array so I'm gonna say this is like 1 So you can see here. I have two elements Inside of this array which is itself the first element of the nums array. So let's make another one We'll come down here and we'll make another one and this keeps trying to format differently So now we're gonna say three four So this thing right here this whole array, that's the first element in the nums array Right and that array has two elements inside of it. Same thing with this one This is the second element in the numbers array and it has two elements inside of it. So it's basically an array within an array let's make one more and So this is going to be five six So now we have three array elements right one two Three and each of them has two elements inside of them So whenever we create a two dimensional array like this We always have to specify the number of elements and then the number of elements inside each array so in our case, we're going to have one two three elements in the array and Each array has two elements inside of it So it's gonna look like that so we would say three and then two and that's basically how we created So now let's talk about accessing these elements. So I'm gonna create a little print statement here and We're gonna print out some of this stuff. So I'm gonna Say % D and I'm gonna show you guys how we can access individual elements So basically I'm gonna say nums and let's say that I wanted to access this top-left element this one the first thing I want to do is specify the index where The value that I want to access is stored So like this would be index position 0 this would be index position 1 this would be index position 2 so we're gonna say 0 and then I want to specify the index position of the individual element inside of 0 so I could say like this is element 0 this is element 1 so why don't we access element 0 So I print out nums 0 0 and this is gonna print out that Numbers coming out. It's gonna print out that one for us. You can see over here we get that one So let's try a different one. Let's try to grab this for right here. So this is going to be an index position One and then one so this would be at 1 1 and now we should get that for let's see Yeah, cool. So we get the 4 All right so that's basically how we can access elements inside of these arrays and also just want to point out that if I didn't want to give this an initial value I could just like put a semicolon here and I could just like Manually define each index location so I could say like 0 0 is equal to 7 or something like I don't have to give it a Value like right up front although in our case. Let's just do that because it's a lot easier All right, so we have our numbers array and we figured out how we can print out the elements So now I want to talk to you guys about another Concept which is called a nested for loop and you guys will see in a second why I'm teaching this alongside 2d arrays but a nested for loop is a situation where we have a for loop and inside of that for loop we have Another loop so I'm gonna show you guys this really quick. Let's say we create a for loop I'm gonna create two variables over here in I and int J and I don't know if I showed you guys this in the course yet But if I want to just like declare two variables I can just say I comma J and that will declare both the variables. I'm not giving them actual values yet We're gonna do that inside these four loops So I want to show you guys how we can use a nested for loop in order to print out all of the elements inside of this two-dimensional array, so I'm gonna say for I Is equal to zero? and we're gonna keep looping as long as I is less than Three and the reason I'm saying three here is because that's how many elements are inside of this nums array so I'm gonna keep looping as long as I is less than three and then I'm gonna say I plus plus Now inside of these curly brackets, I want to create another loop, so every time we go through this one iteration of this top loop, we're gonna fully execute through another loop so I'm gonna say, for J is equal to 0 J is less than 2 and the reason I'm saying 2 here is because that's how many elements Are inside each array Inside of the nums array and you guys will see in a second. Why? this is gonna work and then I'm gonna say J plus plus so now I'm gonna make some more open and close curly brackets and Down here. I'm gonna actually be able to print out all of the elements inside of this array So I'm gonna go ahead and do that I'm just gonna say printf and we're gonna be printing out an integer because these are all integers and we're gonna be printing out nums and I'm gonna print out nums I and J So whatever the value of I is and whatever the value of J is that's the index position inside of nums that we're gonna print out and now just so this is Formatted a little bit better. Why don't we put a comma? Right there and then I'm also gonna put another printf over here that's just gonna print out a new line And you'll notice that this printf is outside of this inner for loop so I'm gonna run this program We're gonna see what it does. You guys will see exactly what's happening and then I'll sort of walk you through a little bit more What is going on, so? Let's run this program And you'll see over here when we ran the program We're basically getting this entire 2d array printed out. So I'm printed out 1 2 3 4 5 6 So let's talk about why that happens Over here I'm saying for I is equal to 0 I is less than 3 I plus plus So I'm going through this particular four loop three times I'm gonna execute all the code inside of this four loop right here Three times that's as many times as there are elements inside of our 2d array Now every single time I go through this top loop every single time I go through it I'm going to execute this loop in its entirety. So I will loop through this loop all the way through I'll go through all of its iterations and this loop says J is equal to 0 J is less than 2 and 2 over here is how many elements are inside of each one of these raise? So this element in the noms array has one two elements inside of it This element in the numbers array has one two elements inside of it, right? That's where this two is coming from Then I'm incrementing J. And I'm gonna print out so I'm saying print F and I'm printing out nums at index position I and index position J so the first time we go through this for loop I is going to be equal to zero and Remember that first time we're actually going to be going through this loop two times So we're going to be printing out nums 0 0 and nums 0 1 and then we're coming down here and printing a new line the next time we go through this I loop we're gonna come down here and print nums 1 0 and nums 1 1 Finally the third and final time. We're gonna print out nums to 0 and nums to 1 That's basically how this is working. So two-dimensional arrays and Nested for loops are a match made in heaven and there's a lot of situations Where you know besides just looping through 2d arrays that we're going to use nested loops But hopefully this gives you a little bit of a introduction into what they are and why they're useful In this tutorial I'm gonna talk to you guys about accessing memory addresses in C Now in the C programming language a lot of times we're gonna want to store different information Right, and there's a bunch of different ways that we can store information We can use things like variables we could use arrays we could use structs but the basic point is that whenever we're using c we're gonna want to keep track of and Maintain a bunch of different pieces of information and one of the easiest ways to do that is by creating Variables so down here you'll notice that I have a bunch of variables I have this integer called age and it's just has the value of 30 We have this double GPA 3.4 and we have this character grade and it has the value of the a character I have a bunch of different variables in my program and it allows me to keep track of data really easily and I can use these to You know maintain and I can even modify these different informations variables are great But I want to talk to you guys a little bit about how these work in the actual physical memory of our computer So whenever I create a variable for example when I create a variable called age And I give it a value of 30 this value 30 actually gets stored on our computer so all computers have Memory, so a lot of times you'll hear people refer to this as RAM It's called random access memory and basically RAM is the memory that your computer is going to use when it's running programs So for example, if I was to run this C program my computer would use Ram It would use that memory in order to store and keep track of all this different information Right. So when I create a variable like int age C is actually gonna store this value 30 at a specific memory Location so it's gonna take that value 30 and it's gonna store it somewhere in RAM right when I create this double called GPA C's gonna take this value 3.4 and it's gonna store it inside of the physical memory on our computer when I create this grade C is gonna store this character on the physical memory in our computer Now here's the thing when I create these variables I give them descriptive names, right? So I gave this a descriptive name So I know what's stored inside of it, right? And when I want to access this value, I can just refer to the name, right? I can just refer to age I could modify and I could print it out I could do something else to it right I can do whatever I want with it and the way that I can access this variable in other words the way that I can access the value 30 is Just by referring to the name of the variable same goes down here if I wanted to access the grade Right if I wanted to access this capital a I could just refer to the name of the variable But again, here's the thing All of this information is stored in our physical memory somewhere And so whenever C needs to access that information whenever our computer needs to access this value 30 or this value 3.4. It's actually going to refer to a specific memory address Right. So when I want to access this variable age, I can just type out age and then I can use this variable But when C wants to refer to this value, it's not actually using age It's gonna use the memory address where this value is stored inside of our physical memory So all of these values are stored inside of a physical address in our memory So all of these values have an address where they're stored in memory and when C needs to access them it can use that address So I'm gonna show you guys how we can access that address how we can print out the address on to the screen And basically just wanted to give you guys an introduction into what memory addresses were. So down here I'm gonna say printf and I'm gonna show you guys how I can actually print out the physical memory address Where each one of these values is stored on our computer? So down here if I want to print out a memory address. I need to use a % and a P so normally if I was just gonna print out like a number I could say like % D or I can say % C for a Character when we want to print out a physical memory address We're gonna say % P and this actually stands for pointer. We're not gonna talk about pointers in this tutorial We're just gonna talk about memory addresses But just know that you need to say % P and now I'm going to type out the name of the variable whose memory I want to access so I'm gonna access the memory address of age and Before the variable. I'm just gonna say ampersand so I'm gonna make an ampersand age and I'm gonna say percent P and Now we should be able to print out the memory address where the variable age is stored In other words, we can print out the memory address where this value 30 is stored. So let's go ahead and run our program and You'll see over here. We're getting this number So I'm getting this number 0 0 6 0 FF 2 0 0 so this would be like a hexadecimal number I guess it's not technically a number. It's like I think it's hexadecimal But basically this is the physical memory address where the value of 30 is stored in other words It's the place where C stored the value inside of this age variable I could do the same thing for these other variables so actually why don't I format this a little bit I'm gonna stay here age and then I'm gonna make a new line and we're just gonna say GPA and again, I'm gonna print out another one of these addresses and we'll do one for grade and We'll print out the address so now I can just come over here and I can sort of modify this a little bit so I can just say GPA and Grade and you'll notice for each of these I'm using this ampersand before I type out the name of the variable So now when we run our program we should get a nice little list of all of these variables and their corresponding addresses so you'll see over here we have age and it's stored up memory address 0 0 6 0 FF OC GPA is stored at this memory address and grade is stored at this memory address so if you were to like go into our computer or go into my computer and Go to memory address is 0 0 6 0 FF 0 C that's actually going to store the value of 30 it's gonna store the value that's inside of that age variable If you were to go to this memory address you would see the value Inside of GPA if you're going to this memory address you would see the letter which was a capital A so basically all of these variables are store at Different memory addresses when I want to access the information in the variable I can just refer to the variables name so I could say a age or I could say GPA But when C wants to access the information and the variable it has to use these Addresses so C would use this address C would use this address and this address? I can just use the variable names and that's why C is awesome because it allows us to do stuff like that But when C and when our computer wants to access these values it has to use these memory addresses and so that's why these are useful and When we're programming and C it can actually be pretty useful to be able to know the Addresses like the actual physical addresses of these certain variables in memory So a lot of times in C when we want to work with these Variables we can just refer to them by name and we can do all sorts of stuff with them We can access them we can modify them. But in other circumstances, we're not just gonna want to be able to access the value We're also gonna want to be able to access their physical memory address in other words we're gonna want to be able to know like what that address is and we can use that for a bunch of stuff and In future tutorials, I'm gonna talk about why that can be useful, but for now I really just wanted to kind of give you guys an overview of what memory addresses are How we're using them in our program and how we can print them out so again I just use this ampersand and then I type the name of the variable and I use this percent P to print it out In this tutorial I want to talk to you guys about pointers in C Now a pointer is basically just a type of data that we can use inside of our programs So up until this point in the course, we've been using a bunch of different types of data, right? we've been using things like integers and an integer is just a whole number we've been using things like doubles and a double is a decimal number we've been using Chars and a char is basically just a character and now I want to introduce you guys to another type of data which is called a pointer and a pointer is basically just a memory address and a memory address it basically refers to a you know a physical address inside of the memory of our computer where we're Storing a value right and I think pointers Tend to confuse a lot of people who learn about them and this is sort of one of those topics and see that everybody dreads Because it's you know, traditionally very confusing to understand but actually pointers are Extremely simple and the problem is that they just get over complicated So what I want you guys to do is I just want you guys to think of a pointer as a type of data That's all it is. It's just a type of data that we can work with in our programs It doesn't have to be any more complicated than that, right? I can work with an integer in my program an integer is a whole number, right? I can work with a double in my program a double is a decimal number I can work with a char in my program a char is just a character I can work with a pointer in my program a pointer is just a memory address That's it. A pointer is just another type of data that I can use and I can work with Inside of my programs and it just happens to be a memory address inside of the memory or the RAM in our computers That's that's all it is It's very simple people overcomplicate pointers and they don't have to be over complicated because it's just another type of data Just like an integer or a double but instead of being like a whole number or a decimal number. It's a memory address So hopefully that makes sense and I hope you think you guys don't Try to over complicate this too much because it doesn't have to be so down here in my program I have an integer that I've created and it's called age. So I just said in age and Inside of this integer. I'm storing a whole number I'm storing an integer right third And if you've been following along with this course in the last tutorial We talked about memory addresses and we talked about how all of these variables are actually storing these values at Physical addresses on our computer's memory so down here I have this print statement and I'm just printing out ages memory address and I'm using this percent P and I'm just printing out Ampersand age and we talked about how this ampersand when I put this in front of the variable basically It's going to give me the physical address in memory where this variable in other words where this Thermia value is stored. So if I run this program you guys will see over here. It says ages memory address and it's this Hexadecimal number right? This is the physical memory address of eight the age variable What did we just talk about before remember what I told you pointers are? Memory addresses that's what they are it's a type of data a pointer is a type of data in our program and It's a memory address right when I use this ampersand and I type out the name of a variable This is giving me the memory address right I'm able to print out the memory address so really this is a pointer This is a type of data in our program. That is a memory address just like an integer is a type of data That's a whole number and a double is a type of data. That's a decimal number and a char is a type of data That's a character a pointer is a type of data. That's a memory address and this right here This guy right here is a pointer. So it's just the memory address of the age Variable that's it and when I want to print out a pointer I can use this percent P and It'll allow me to print it out onto the screen and everyone's happy So essentially what I'm doing here is I'm printing out a pointer when I say percent P I'm telling this print F function that I want to put on a pointer and then I give it a pointer over here I give It a physical memory address. That's what a pointer is now We understand and hopefully understand that a pointer is just a type of data, right? It's just a memory address and We can access the memory addresses of specific variables by using this ampersand and then type The name of the variable and that can be pretty useful Now that we understand that I want to show you guys how we can work with these pointers so over here I have an integer variable called age and this integer variable is storing an integer value 30 I'm gonna say that one more time. I have an integer variable and this integer variable is storing an integer value 30 I could also create a double variable so I could create a double called GPA and Inside of this double variable. I could store a double value like 3.4. I could also create a char variable Called grade and inside of this char variable. I can store a character a I could also create a pointer variable and Inside of that pointer variable I could store a pointer Okay So just like I stored a character inside of this character variable and I stored a double inside of this double variable I could store a pointer inside of a pointer variable so we can actually store these pointers inside of a pointer variable Now here's where this is going to get a little bit tricky When we create a pointer variable we actually need a physical memory address right so when I create this Integer variable like I can just come up with a number right off the top of my head, right? I can just say like 30 when I create a Double variable I can just store whatever number I want to store but when we create a pointer variable remember We're gonna be storing a memory address and I don't necessarily Know any memory addresses like right off the top of my head at least. I don't know any meaningful memory addresses So when I create a pointer variable, what I want to do is store the memory address of a variable That's already in a program. So I'm gonna say that one more time when I'm creating a pointer variable inside of that pointer variable I'm gonna store the memory address of a another variable inside of our program so let's say that I wanted to create a pointer that would store the memory address of This variable over here so thats or the memory adjusts of age, right? I can create a pointer just like this so I could say int and asterisks and now I'm gonna give this a name so I'm gonna give this Pointer variable a name and remember this pointer variable is gonna store the memory address of the age variable and generally when you're naming a pointer, you're gonna start with a lowercase P and Then you're gonna type the name of the variable whose memory address you're storing in the pointer variable So I'm gonna say P age right because this pointer variable is storing the physical memory address of the age variable Now what I want to do is set this equal to the memory address of the age variable Which we can access using this ampersand so I could say ampersand age so now this pointer variable is Storing the memory address of the age variable I'm gonna do the same thing down here for this GPA So if I wanted to create a pointer variable that would store the memory address of the GPA variable. I could say double asterisks and I'm just gonna say P GPA just like that and I'm gonna set this equal to the memory address of This double variable which we can access using this ampersand and then the name of the variable like that I'm gonna do the same thing down here for this character variable So I want to create a pointer variable which is going to store the memory address of The character variable so I'm just gonna say char Asterix a grade, and I'm gonna set this equal to Ampersand grade. Okay, so that's all I'm doing, right? So now I have this integer variable and I have this pointer variable Which is storing the memory location or the memory address of the age variable I have this double variable which is storing a double and I have this pointer variable which is storing a pointer and The pointer just happens to be the memory address of the GPA variable I have this char variable down here And then I have this pointer variable, which is storing a pointer which just happens to be the physical memory address of the great variable in our memory Okay, and that's basically all you need to know about pointers to get started a pointer is just a type of data It's just a type of information that we can work with in our programs it just happens to be a memory addresses write an integer is a type of data that we can work with in our programs and it just happens to be a whole number a double is a type of data that we can work with in our programs and it's a decimal number a char is a type of data that we can work with in our programs and it's a character a Pointer is a type of data that we can work with in our programs and it's a memory address Hopefully that makes sense and just like we create integer variables and double variables we can also create Pointer variables the only difference is whenever we create a pointer variable We're gonna store the memory address of another variable in our program So so you'll see over here when I create this pointer variable. I'm using the data type of The variable whose address I'm storing so over here when I'm storing the address of an integer variable I'm saying int here When I'm storing the address of a double variable I'm saying double here when I'm storing the address of a char variable I'm saying char here and that's the basics of using pointers and Also creating pointer variables and storing memory addresses inside of variables In this tutorial I want to talk to you guys about dereferencing pointers in C Now a pointer is basically just a type of data that we can work with in our programs. That is a memory address So sometimes in our programs we're gonna want to work with memory addresses We're gonna want to use them in our programs and do certain things with them and those memory addresses are basically called pointers in our programs and when you dereference a pointer Essentially what you're doing is you're going to the memory address of that Pointer and you're grabbing the piece of information from there. All right So all points are as our memory addresses and when we dereference a pointer We go to that physical memory address and we get the information or we get the value that's stored inside of there so I'm gonna show you guys how we can do that and see it's actually really easy and can be pretty useful so Down here. I have this integer and It's an integer variable and it's storing the integer value 30 and over here. I have a pointer variable which is storing the memory address of 30 so it's storing the memory address of our age variable as you can see right here and Down here. I'm just printing out this pointer So I'm printing out pH I'm using this percent P and I'm just printing it out to the screen So why don't we take a look and see what we get. So you'll see over here We just get this memory address probably exactly what you expected to get so over here I want to show you guys how we can dereference a pointer So this pointer variable P age is storing the memory address of this age variable, right? So when we printed it out We basically were given the physical memory address where this numbered 30 was stored So P age is storing the memory address of 30. It's storing the memory address where this value is Inside of our computer's memory if I want to dereference a pointer Basically, what I'm gonna be doing is I'm going to be going to that actual physical memory address and grabbing that piece of information So the way that I can dereference a pointer is by using the asterisks So when I'm printing this point, I can dereference it by using this asterisk But now over here since I'm dereferencing this pointer I need to print out a number instead of a pointer because when I dereference the pointer This is no longer a pointer. This is no longer a memory address now This is gonna be whatever was stored at the memory address. The pointer was pointing to so this is going to be an integer because this pointer Variable was storing the address of an integer Right, so when I dereference it This is actually gonna be an integer So let me show you guys I'm gonna print out or I'm gonna run our program and it should print out 30 So you'll see that we get a 30. So basically what's happening here is we're dereferencing the pH Pointer variable we're dereferencing the pH pointer which basically means we're going and grabbing the actual, you know Physical value that's stored at the memory address that the pointer was pointing to and that's why we get 30 And that's basically what dereferencing is, you know, you're you have a pointer You can dereference it and you basically just get the value that it was pointing to It's essentially all we're doing so I want to show you guys how we could do this Just normally so for example I have this age variable if I just typed this out If I wanted to get the address of this age variable I could use this ampersand, right? That's basically what we did up here but what I could do is I could just dereference this so I can say ampersand age and then I can put a asterisks here and this is actually gonna dereference that entire thing So now when I run my program it's gonna print out 30, so it's not gonna print out the memory address It's just gonna print out 30 so you can see over here. We get 30 so I could actually do this like as many times as I want and this will maybe just illustrate what's happening so I could put An ampersand here and now I'm gonna get that memory address again So you'll see we're getting this memory address and I can do the same thing so I could dereference this one more time and You'll see now we're getting that 30 value again so I mean basically what I'm doing I'm constantly like like here I'm getting the memory address where the age variables stored Then I'm dereferencing and getting the value then. I'm getting the memory address again, and then I'm dereferencing it again So, you know, hopefully that makes sense when you dereference a pointer you're basically just getting the value that that pointer is pointing to or you're getting the value that's stored in the memory address of the pointer In this tutorial I want to teach you guys how to write two files in C One of the cool things we can do in C is we can actually modify and change and also create new files So in this tutorial, I'll just basically show you guys how to do that We'll talk about creating files writing files and appending on to files So let's go ahead and do that down here in my main function We're actually gonna create a file. So I'm going to create a file and I'm gonna store some information inside of that file and the way that we can do that is we can just type out file all in caps just like that and essentially what we're doing here is we're creating a pointer to a physical file on our machine, so I'm just gonna say file and I'm gonna make an Asterix and I'm just gonna give this a name So I'm just gonna call this F Pointer and that'll just stand for file pointer, and I want to set this equal to F Open an F open is actually a function that's gonna open a file for us And so inside of these parentheses, I'm gonna give this a couple of different parameters The first parameter is gonna be the name of the file that I want to open. So I'm just gonna call this employees dot text and the second parameter is gonna be a File mode and a file mode is basically just going to tell C What we want to do with the file that we're gonna open And there's a bunch of different file modes. The three most basic types are R and R stands for read So if I put R in there, I mean we want to read the file W stands for right so if I put right in there it means I want to either create a new file or write over an existing file and There's also a which stands for append and that means I want to append information on the file in this tutorial we're gonna look at W and a so what I want to do over here is put in W and Right now employees dot text. This file doesn't actually exist So what I'm gonna do is I'm actually going to create that file We're gonna put some information inside that file and then that file gets saved onto my machine and in order to do that We're gonna need this write mode So it's just going to be a W Anytime that we're open file in see you always want to make sure that you close the file so over here I'm saying F open And down here I want to use another function called F close and Basically what this is going to do is it's going to close off the file so it's gonna remove the file from the memory on our computer and if we do make any changes it'll kind of like save the file and Everything will just be kind of like locked in so you always want to make sure whenever you're working with a file that you close It and inside of this F close function. We just want to pass in this F pointer So I'm just gonna say F Pointer right there. So let's talk about what's happening here file is basically just like Essentially like a data type I guess and we're creating a pointer to a physical file on our computer So if you remember a pointer is basically just a memory address Right a pointer is a type of data that we can use in our programs. It's essentially just a memory address and this pointer is storing the memory address of this new employees dot text file that we're gonna create so Essentially what's going to happen is we're gonna create this employee's dot txt file and F Pointer is going to be pointing to the memory address of that file on our computer So that's essentially what's happening here. And what I want to do is I actually want to write some information To this file. So actually let me just show you guys really quick. What's happening here So without doing anything else just using this line right here when I run my program a new file called Employees dot text is going to get created so over here I'm in my little directory and If you don't specify an absolute path or like a relative path for this It's just gonna create it in the directory that your C files in So if I wanted to create this on my C Drive, I could say like C Whatever and then like employees out text and this will get created in my C Drive, but if I don't specify like an absolute path Or even if I don't specify a relative path then this is just going to get created in the same directory as our C file and You'll see over here My main dot C file is right here. It's in this folder So when I run this program, let's watch over here and we can see this employees doubt text file get created So I'm gonna run my program and you'll see over here that this employees file got created So if I actually bring this out a little bit you'll see it's a text document Its employees dot tax and there's zero kilobytes inside of this so we haven't put any information in there But this file got created. So now let's talk about putting some info into that file inside this file I'm basically just gonna list out a bunch of like employees that might work in an office and The easiest way to write information to a file is just to say F Print F and this is a special Function in C, which actually works a lot like the printf function So if you've used the printf function and if you're following along with this course We've been using it throughout the entire course the printf function basically allows you to like print information out onto that console window F Printf is it can allow us to essentially just write information to a file? I need to give this a couple parameters. The first one is gonna be this file pointer in other words I need to tell this function, you know what it should be writing to so I'm just gonna say f pointer and Then over here we can just give this some information so I can just use like after we put in this file pointer. I Can just use this like I normally would the printf function so I could just print out like some employees So I could say like let's say one of the employees is Jim And we'll put like what they do. So like I can say sales men and then we could say actually let's make a new line and we'll create another employee Pam and she is the receptionist and then we can make some other employees so So now I have three employees that I'm going to basically write out to my employees file. So now when I run this program and We can go over here to this employees file You'll see when I open this up that we have these three lines in here So we have Jim salesman Pam receptionist and Oscar accounting So basically I was able to create this file and write all this Information in the file from down here just from down here in this program. So that's pretty cool And I want to show you guys with right so when I'm using this, right? This is actually going to overwrite a file. So for example if I change this to from all this text and I just put like Overridden in here now when I run this program and We open this employee's dot text file. So let me reopen this You'll see it just says overridden so I've actually overridden all the text that was in there And that's basically what happens when we just write to a file. So let's go back to what we had before I'm just gonna run this again. So we have this text And you'll see now we're back with the employees so let's say that um inside of this file We wanted to add an employee on to the end of it So we wanted to add like a new employee on to this file, right? Well, I can use something called append and what append is gonna do is it's going to allow us to append a new line on To the end of this file or actually just append text on to the end of the file instead of saying w I'm just gonna say a and you'll notice I'm still keeping employees text here and down here inside of this F printf I'm just gonna print out another employee into the file The first thing I'm gonna do is print out a new line because and actually let me show you guys this in this employees filed There actually isn't a line after this last line so the last like position in this file is over here I can't actually get on to the line below Oscar So I'm gonna want to go ahead and print a new line and this will move the next employee on to the next line we could say like Kelly and she's gonna work in customer Service. So now when I run my program instead of overriding what was in the employees text file now? This is just gonna append this new employee onto the file. So I'll come up here run the program And let's open this employee's file and you'll see now we have another entry Kelly from customer service. So when we write a file We either create a new file and add content onto it or we just override the content in the file At least using this F printf function and when we append, we're sub pending information onto the end of the file so just using those two things, I mean you can essentially write out any you want and it's important to note that you can write more than just text file so I could write like an HTML file or I could write like a CSS file you could write really I mean any type of file that you'd want and That's basically how we can write to a file and append it to the end of a file In this tutorial I will not teach you guys how to read the Information from a file in C in the last tutorial we talked about writing to files So we looked at how we could create a file overwrite a file and append information on to a file in this tutorial I'm gonna show you guys how you can read Information from a file so down here you'll notice that I have my file pointer setup So I just say file and the asterisks and I'd called it FP and remember this is just a pointer which you know and a pointer is just a Memory address and it's the memory address of this file in Memory, so it's the memory address of this employees dot txt file which we created in the last tutorial and I'm using this F open function which basically Opens this file and then I'm specifying a file mode We talked about the W file mode and the a file mode now I want to talk to you guys about the our file mode and this stands for read So when I use the our file mode I'm actually able to read information from the file and this can be pretty cool So in order to read the information in the file I'm actually going to show you guys how we can read like the individual lines of the file So actually first let's look at the file This is employees dot txt. It just has you know, basically a bunch of employees their names and then what they do and We're gonna be able to read this file inside of our program so the first thing I want to do is create a variable and I'm gonna create this variable up here before we create the file pointer and it's just gonna be an array of characters and I'm just gonna call it line and I'm gonna give this an initial size of 255 so be able to store 255 characters and then down here in Order to read this file. I can actually read the file one line at a time and We can use a special function Called F Gets and F gets basically is going to allow us to read the lines of the file one by one so I could say F Gets and I need to give this a few different parameters the first parameter I need to give it is a place to store the information that it gets So this function is going to go and it's going to read the information from the file and it's going to store it somewhere So the first parameter we need to give this function is where it should store that information so in our case We're going to store it inside of that align variable that we created up there. The second thing we need to give this is a size and this is basically just gonna be like The maximum size that we can read in so I'm just gonna say 255. Basically this number should match this number up here and Then we also want to give it that file pointer so I'm just gonna say f Pointer and basically what this is gonna do is it's going to read the first line of the file and it's going to store it Inside of this line variable. So if I was to come down here and say print F and print it out a string and Just print out line now when I print out a line It's actually going to be have the value of the first line in the file. So let's run this program and You'll see over here. We're printing out Jim salesman And if you didn't remember that was the first line inside of that employees dot text So basically what F gets is doing is it's reading the first line. And another thing that it's doing is it's moving this pointer so remember this pointer is Essentially pointing to where the file is in our memory and whenever we use F gets this pointer is gonna get incremented So it's basically gonna move past the first line in the file So if I was to use this again? For example if I said f gets again when I use this It's gonna store the value of the first line of the file inside of line And when I use it again, it's now gonna grab the second line in the file. So if I print this out now This should actually be storing the second line in the file. So when I run my program you'll see it's storing the second line Pam Receptionist I can basically do this for all of the lines in the file So that's basically how we can use F gets to read the individual lines inside of a file"
        },
        {
            "video_id": "vLnPwxZdW4Y",
            "title": "C++ Tutorial for Beginners - Full Course",
            "description": "This course will give you a full introduction into all of the core concepts in C++. Want more from Mike? He's starting a coding ...",
            "published_at": "2018-08-24T17:11:35Z",
            "channel_name": "freeCodeCamp",
            "transcript": "Hey, welcome to draft Academy. My name is\nMike in this course, I'm going to be teaching you guys everything you need to know to get\nstarted writing c++, c++ is one of the most popular programming languages around. And\nfor good reason. It's an awesome programming language, it's actually a language that is\nclosely related to the C programming language. In fact, c++ is essentially just like the\nnext level of the C programming language. So if you're already familiar with the C programming\nlanguage, then you're gonna have no problem picking up c++. But even if you're not c++\nis a great first programming language to learn. And in this course, I'm going to teach you\nguys all of the core concepts. For c++, we're gonna start off just with the basics, we're\ngoing to, you know, get everything set up, we'll install c++, we'll get you guys set\nup with a text editor, and I'll show you guys how to write your first program, then we're\ngoing to get a little bit more advanced. So we'll start looking at things like variables.\nAnd we'll work with data, we'll even write a couple of different programs and some little\ngames. And then we're really going to get into the thick of it, we're going to learn\nall sorts of different programming structures, things like loops, and if statements and classes\nand objects, it's going to be awesome, we're going to cover all of the core concepts, not\njust in c++, but all the core concepts for programming in general. So the knowledge you\nlearn in this course will actually be able to carry over to potentially other programming\nlanguages as well. I'm really excited to be able to bring you guys tutorials on c++, it's\nan awesome language, it's super fun to develop in. And it's a good first language to learn\nif you're just getting into programming. So stick around for this course, you can kind\nof work through the videos at your own pace. And hopefully you guys can learn something\nabout this awesome language c++. In this tutorial, I'm going to show you guys how to get everything\nset up to start working with c++. So in order to start working with c++, and started writing\nprograms, and doing all that fun stuff, we actually have to do a little bit of setup,\nwe're actually going to need two things on our computer. The first thing we're going\nto need is a text editor. And we're basically just going to use this text editor in order\nto write our c++ programs, any text editor is going to work. Generally you don't want\nto use a text editor like Microsoft Word or Google Docs, you're gonna want to use just\nlike a basic text editor, it could be something like Notepad, I'm going to show you guys a\nspecial text editor called an ID, which stands for integrated development environment. And\nwe can use that text editor. It's basically just a an environment that's really awesome\nfor writing c++ code. And then we're also going to need in addition to a text editor,\nwe're going to need a program called a compiler, specifically a c++ compiler. And this is a\nprogram that will basically take the c++ code that we write, and it will translate it or\ntransform it into a language that the computer is going to be able to understand. So as long\nas we have a text editor, and we have our c++ compiler, then we're ready to start programming\nin c++. So I'm going to show you guys how to get all that set up. First thing we're\ngonna do is head over to our browser, and I'm over here on this website called codeblocks.\nIt's just www.codeblocks.org. And code blocks is what's called an ID. So it's an integrated\ndevelopment environment, it's essentially just a special environment, special text editor\nthat can be used to write a c++ code. So this is going to be exactly what we need. I'm just\ngonna click downloads over here. And you'll see there's a few options one says download\nthe binary release, download the source code, we're going to click download the binary release.\nAnd this is going to bring us to this page, you can see there's a link over here for Windows\nXP, Vista, seven, eight, etc. There's also links for Linux and Mac, let's click on this\nwindows option. And over here, you'll see there's a bunch of these different options.\nSo what we're gonna do is we're going to download this one over here that says codeblocks 1601\nmin GW setup. And actually, what's cool about this is it's going to include not only the\ncodeblocks text editor, but this is also going to include that c++ compiler that I was talking\nabout. So we can download both of those things in this one download for code blocks. So this\nis the easiest way to do this as a beginner. So let's go ahead and download this, I'm just\ngoing to come over here and click on this link for SourceForge. And this should start\ndownloading the file onto our computer. When codeblocks has finished downloading, let's\ngo ahead and open that up. So I'm just going to head over to my downloads folder. And we\ncan open that guy up. You can see over here it says codeblocks 1601 m i n GW setup. Let's\nopen this, and this should open up into an installer window. So let's click through this\ninstaller window, and we can just select all the default options. And they should start\ninstalling code blocks on our computer. So once code blocks has finished downloading,\nthen we have everything we need on our computer to start writing in c++. And you can see over\nhere I just opened up code blocks and the next tutorial we're going to talk about how\nto set up your first code blocks project and get started writing c++. In this tutorial,\nI'm going to show you guys how to get everything set up. To start working with and start writing\nprograms in c++, in order to set this up, we're actually going to need two different\nthings. The first thing we're going to need is a text editor where we can write our c++\nprograms. And really, for c++, you can use any text editor that you want. So a lot of\npeople might use like something like TextEdit, or maybe a different text editor. In our case,\nwe're going to be using something called an ID, which stands for integrated development\nenvironment. And there's an ID, which is called codeblocks. That is specially designed for\nwriting c++ program. So I'm gonna show you guys how to download that, we're also going\nto need one more thing, which is going to be a c++ compiler. And basically, this is\njust a program that takes our c++ code that we write, and it translates it into a language\nthat the computer can understand. So when we want to run our programs, we want to, you\nknow, execute the programs with the computer, we can use this compiler to translate the\nc++ that we write into computer code. So the first thing I want to do is show you guys\nhow to get that compiler. And it's possible that if you're on Mac, you might already have\nit. But we want to do is go up here to this search bar. And we're just going to type in\nTerminal. And we're going to click Enter. And this should open up the terminal. This\nis basically just a window or a program that we can use to interact with the computer using\ntext commands. So down here, we want to check to see if we already have the c++ compiler\ninstalled. So you just want to type in GCC hyphen, V. And just click enter. If you have\nGCC, which is the C compiler we're going to be using installed and all this stuff should\ncome up with like a version number and, and everything. If this doesn't come up. In other\nwords, if you know it says that you don't have it, all you need to do to get this is\njust say Xcode, select hyphen, hyphen, install, and this is going to go off and install everything\nthat we need for c++. So I'm just gonna click Enter. And I already have these installed.\nSo these are like command line tools, you can see I already have them installed. But\nif you don't already have them installed, then this will basically just prompt you to\ninstall them. Once that installer is done running, then you can just check to make sure\nthat you got GCC. So you can just say GCC hyphen, V. And make sure that you have it.\nSo once we have this c++ compiler installed, and we've run this Xcode, select Install command.\nNow what we want to do is get a text editor. So like I said, we're going to be using a\nspecial text editor called codeblocks. But really, you can use any text editor that you\nwant. So I'm going to go down here into my browser, and I'm over here on this website\ncodeblocks.org. And this is the website where we can download this program code blocks,\nI'm just gonna click downloads. And over here, there's a couple options, you want to click\non the option that says download the binary release. So I'm going to click this. And you'll\nsee there's this little like list here, just click on Mac OSX. And this will bring us down\nhere. So it's basically just a zip file that contains the codeblocks application. Over\nhere, we can download it from SourceForge, I'm just gonna click this. And this should\nredirect us to SourceForge and download the file for us. When codeblocks is done downloading,\nI'm just going to go over to my downloads folder, and we'll see what we got. So we just\ngot the zip folder, I'm just going to double click it. And you'll see over here we get\nthe code blocks application. So what you should do is take this and drag it over to your Applications\nfolder. That way OSX knows that this is an application we want to use, then you have\neverything that you need to start writing c++. So in the next tutorial, we're going\nto set up a project in code blocks, we're going to set up our first c++ file, and then\nwe're going to run it and we'll just get everything set up and ready to go. In this tutorial,\nI'm gonna show you guys how to get your first c++ project up and running in code blocks.\nSo over here, I just opened up code blocks. And this is sort of like the welcome screen\nthat we get when we first open it. And see over here, there's a couple options. One says\nCreate new projects. And that's actually what we're going to do. So before we're gonna start\nwriting our c++, I'm just gonna show you guys how to get a c++ project up and running and\nready to go in code blocks. So let's click Create new project. And this should open up\nthis little window over here. So you'll see there's all these different options. And these\nare essentially just different types of c++ applications that we can create. We're going\nto just do the bare basics. So you want to come over here and click console application.\nAnd then just click Go. And we're just going to click Next. And over here, you'll see we\ncan select between a couple different languages, we want to click c plus plus. So I'm going\nto click Next. And we're just going to give this project a title. So I'm just going to\ncall it draft. And you'll see down here I'm storing it inside of my desktop if you want\nto change it, you can come over here and you can put it wherever you want. Let's click\nNext. And you'll see over here we just have a bunch of options. You can just leave these\nas the Default, and we're going to click Finish. Once we click finish, then our c++ projects\nshould have been created. So over here, in our little Tree Viewer, you'll see that we\nhave our c++ projects. And down here inside of the sources folder, we have this file main\ndot cpp, and CPP is a file extension that stands for c++. So I'm just going to right\nclick this and I'm just going to open it. And you'll see over here we have a bunch of\ncode that's already been included in this file. So this is essentially just like the\nmost basic c++ file that you can write. I mean, this is what we call like a Hello World\nprogram. So you'll see down here, it's just printing out hello world onto the screen.\nAnd don't really worry too much about what this stuff up here is, really, let's just\nfocus on this line down here, this line is actually going to print something out for\nus. So if I was to come over here, and I'm actually going to come up here in my editor,\nand I'm going to click on this build and run option, when I click this, a window should\npop up. And it should basically just say, like, Hello World, you'll see down here, this\nlittle black window popped up and it says hello world. So let's just go over some basic\nterminology. Generally, whenever we're going to run a program in c++, we're going to build\nthe program. And then we're going to run the program. Building the program basically means\nthat we're taking all this code over here, and we're converting it down into a language\nthat the computer can understand. So the first thing we always have to do is build the file,\nthen what we want to do is run the file, which basically means we're telling our computer\nto execute all of the instructions that we wrote in our program. And there's a bunch\nof different ways we can do that here in code blocks, you can click this little cog wheel\nup here, and that'll build your program. And then you can click this play button over here,\nthat's going to run your program. But a lot of times, if you just wrote some new code,\nand you want to test it out, you can just click this build and run option. And for the\nmost part in this course, we're always just going to be whenever I say we're running the\nprogram, I'm just going to click this button, and we'll build it and run it at the same\ntime. So like I said, this is a very basic c++ file. In next tutorial, we're going to\ntalk about like, what all this stuff is, we're going to look at writing some of our own instructions,\nmaybe modifying these instructions. And we'll kind of dive a little bit deeper into you\nknow, just sort of the bare basics. But for now, we have everything set up. So we have\nour c++ project set up, we have our first c++ file called main dot cpp, and we're ready\nto start programming. In this tutorial, I'm going to talk to you guys about the basics\nof writing a c++ program, we're just going to talk generally about what programs are\nand how we can write them. And we're going to write a little program, which is going\nto print out a shape onto the screens, this is going to be pretty fun. Down here, I just\nhave this basic program. And when I first created my c++ project, in the last tutorial,\nwe sort of got this basic program. And this was kind of given to us. And this is, you\nknow, essentially just a very simple c++ program. So I'm going to walk you guys through essentially\nwhat we have here, we're gonna talk about a couple different things, and then we'll\nstart writing some code. So up here, we have these two lines of code. This is like hashtag\ninclude iostream. And this one says using named scape STD. Essentially, what this does\nis it's kind of like configuration options for our c++ file. As a beginner, like, you\nknow, don't really worry too much about what this stuff is or what it's doing. We're going\nto talk more about all this stuff later in the course. But for now, just know that you\nneed to have it there in order for us to write our programs. Down here we have this line,\nit says int main. And there's an open and close parentheses. This is actually what's\ncalled a function in c++, again, don't worry too much about what a function is, I'm just\nkind of throwing out these words. So you kind of familiar with hearing them. But essentially,\nwhat this is, is, it's a container for us to put the code inside of our c++ programs.\nSo this function called main is a very special function because any lines of code that we\nput inside of here, in other words, any lines of code that we put in between these open\nand closed curly brackets, is actually going to get executed when we run our program. So\ndown here, I just have this thing it says return zero. And again, don't worry too much\nabout what this is, just know that you need to have this in this main function. Over here,\nthough, we have an actual line of code. So this says c out. And then it says hello world,\nthen it says end L and this is a basic line of code in our program. So again, any lines\nof code that we put in between these curly brackets for this main function is going to\nget executed when we run our program. So if I was to come up here and run my program,\nand I'm just going to click this build and run option right here, you'll see when the\nprogram runs, it prints out hello world. And you'll see this little window that opened\nup here. This is what we would call The console. And the console is basically just a little\nwindow that will output information. So whenever we run our c++ code, this console window is\ngoing to open up. And sometimes we can tell c++ that we want to print things out onto\nthis console window. So if you ever hear me referring to the console, I'm just referring\nto this window right here. Now let's get down and start talking about programming. So again,\nany of the code inside this main function is going to get executed. And here, we just\nhave one line of code. So what I can actually do is I can copy this and down below here,\nI can say something else. So I could say just like my name, Mike. And now when I run this\nprogram, you'll see it's going to print out both of these things. So here on the first\nline, it prints out hello world. And then over here on the second line, it prints out\nMike. And this is just sort of like basically how we could print something out to the console.\nYou'll see over here it says c out and that stands for console out. And then over here,\nyou'll see we have this little line, it says end L and this stands for end line. And basically,\nwhat this means is we're ending the line where we're going to print out text. So you'll notice\nthat we printed out hello world. And then on the next line, we printed out Mike. So\nusing these little print statements, I'm actually going to show you guys how we can write a\nlittle program that's going to draw a shape out onto the screen. So I'm actually going\nto go ahead and get rid of this text. And I'm just going to copy this guy here a couple\ntimes. So we'll make like four of these. And I'm going to print out a triangle onto the\nscreen. So I'm just going to print a forward slash, and then we'll do a space and a forward\nslash. And I'm just going to keep doing this. And you'll see we're kind of drawing this\nlittle diagonal shape upwards. Now I'm going to use vertical bars, and we're going to go\nall the way down. So I'm just going to keep going like this. And down here, why don't\nwe put some underscores, and then we'll put the last vertical bar, you'll see over here,\nI'm actually writing out a bunch of instructions. And each of these instructions is telling\nc++ that we want to print out a different line onto the console. So now when I run my\nprogram, you'll see we're actually printing out this little triangle. This is a very basic\nprogram. But you'll see just by using those four simple instructions, we were able to\nactually draw something out onto the screen. So let's talk about this. Essentially, what's\nhappening when we click that run button is c++ is going and it's looking inside of our\nprogram. And the first thing it's going to do is it's going to look for this main function\nright here. So it's going to look for this block of code. And that's basically just what\na function is, it's going to look for this block of code called main and inside of these\nopen and closed curly brackets, it's going to execute all of the instructions inside\nof there. And basically, when we're writing a program, all we're doing is we're just telling\nthe computer a bunch of instructions. So we're giving the computer a bunch of instructions\nthat we want it to carry out. So imagine that, for example, in real life, like you were using\na recipe or something, a recipe is a lot like a program, a recipe has a list of instructions.\nAnd if you follow those instructions correctly, then you end up with like something delicious.\nThat's basically what a program is a program is just a collection of instructions that\nwe're giving to the computer. And we can give the computer simple instructions like this.\nAnd we can do something simple, like draw out a shape. But as we go through this course,\nand we learn more and more complex instructions, and we learn how to use them together in unison\nwith each other, we're going to be able to tell the computer to do a bunch of complex\nthings. So the next thing I want to talk to you guys about is the order that these instructions\nget executed. So just like if you were following the recipe, and you would start with the first\ninstruction, and you'd go down to the last instruction, the computer is going to execute\nthese instructions in order. So it's going to start with this instruction. And basically\nhere we're just telling the computer over telling c++ that we want to print this line\nof text out onto the screen. So c++ is going to do this. And then once it's done with that,\nit's going to move on to this instruction, it's going to print this out to the screen\nonto the screen, etc. It's going to keep doing that. So actually, let me show you guys if\nI was to get rid of this line, and I was to put it up here. Now you'll see when we run\nour program that we're going to print out a funky looking shape. So instead of this\nbase being down at the bottom here, we're going to print it out on the top. And that's\nbecause we change the order of the instructions. So again, all a program is it's just a set\nof instructions that we give to the computer. That's it, it's very simple, the more complex\ninstructions that we can give the computer and the more ways that we're able to combine\nthose instructions in different ways, the more complex Our programs are going to be.\nSo as we go through this course, I'm going to be teaching you guys all sorts of more\ncomplex instructions. We're going to learn different ways to do different things and\nwill use real world examples to build little applications. And you'll end up learning a\nbunch along the way. And this tutorial, I'm going to talk to you guys about using variables\nin c++. A lot of times when we're writing programs in c++, we're going to be dealing\nwith all different types of data and information. And a lot of times when we're dealing with\nthat data and information, it can be kind of hard to keep track of. and a variable is\nbasically just a container where we can store different pieces of information or different\ndata values in our programs. And it makes it a lot easier for us to manage and maintain\nand use that data. So I'm going to show you guys an example. And we'll show you guys basically\nhow variables are useful and how we can use them in c++. So down here, I have a very basic\nprogram that I've written out, you'll see down here, I'm basically just printing out\na bunch of lines of text, it says, There once was a man named George, he was 70 years old,\nhe liked the name George, but did not like being 70. So this is basically like my little\nstory here. And you'll see I can run my program. And this is a valid program in c++, it basically\njust prints out the story. And we have all of our information. So you know, this is a\npretty nice c++ program. It serves its purposes. But let's say that I'm looking at my story.\nAnd I'm thinking, Hmm, maybe I want to change the character's name, right. So maybe I don't\nlike the name, George, maybe I want to change it to a different name. So what I could do\nis I could go through and I can manually change it in each line of code. So I could come here\nwhere it says George, and I could change it. Let's say we want to change the character's\nname to john, right, so I can change it to john. I'll keep looking through the story\ndown here. It also says George, so I'll change it to john. And there we go. We've changed\nthe character's name, we've officially updated it. Let's say maybe now I'm thinking to myself,\nI think I want to make the character a little bit younger, instead of 70. Why don't we make\njohn 35. So I can do the same thing, I can go in and manually change the value of 70\nto 35. So we can come over here, and we can say he was 70, which changes to 35. And we'll\nsay did not like being 17. Okay, so we'll change that to 35 as well. So now we've officially\nupdated our store, we've changed the character's name, and we've changed the character's age.\nHere's the problem though. In order to make those changes, I had to manually go through\nand individually edit each one of the places where the characters name showed up or the\ncharacters age showed up. And imagine that instead of having a story that was only four\nlines long, I had a story that was like hundreds of lines. And we mentioned the character's\nname hundreds of times, and we mentioned their age hundreds of times, well, all of a sudden,\nit becomes a lot more difficult for me to manage those pieces of information. So it's\ndifficult for me to manage the character's name and the character's age. Right, if I\nhad a story that was hundreds of lines long, and we mentioned the character's name 100\ntimes having to you know, go and modify and update that name would be a very tedious task,\nbecause I'd have to go through and essentially just do it manually. This is where something\nlike variables come in. A lot of times in our programs, we're going to have different\npieces of information, different data values that we want to keep track of, and we want\nto be able to manage. So what we can do is we can take those pieces of information, and\nwe can put them inside of containers called variables. And variable. Like I said, it's\njust a container where we can store a piece of data. And we'll make it a lot easier for\nus to use and manage that piece of data in our programs. So I'm gonna show you guys how\nwe could create a variable that can store the characters name and the character's age.\nAnd you'll see why this can be useful in something like this. So over here, I'm going to create\na couple of variables. When we create a variable in c++, we actually have to tell c++ a couple\nthings. The first thing we have to tell c++ is what type of information we want to store\ninside of the variable. Now, in the next video, I'm going to talk to you guys all about the\ndifferent types of data that we can use in c++. But for now, I'm just gonna show you\nguys two types of data. The first type of data that we can store inside of a variable\nis called a string. And that basically means it's a string of characters. So it's like\nplain text. So this down here, where it's saying There once was a man named john, this\nis a string, right? It's plain text in our program, a lot of times we're going to be\ndealing with strings. So I'm going to create a string variable. In other words, I'm going\nto create a container that can store a string value. So I'm just going to say string. And\nthat's the first thing that we have to tell c++. The next thing we have to do is give\nthis container give this variable a name. So what we want to do is give this a descriptive\nname, which will basically tell us what is inside of the variable. So I'm just going\nto call this character name just like that. And what I can do now is I can give this a\nvalue so I could say character name is equal to and now we can type in the character's\nname so I could say, john, just like that. Alright, so once we've created this character\nname value variable now this value, john, this string value is now stored inside of\nthis character named variable. The next thing we're going to do is create another variable\nto store the character's age. In addition to storing data in the form of a string, we\ncan also store numbers. Now age is a whole number. So what I can do is I can store it\ninside of something called an integer. And an integer is basically just a whole number.\nSo I can just say int, and I can just call this character age. Now I want to show you\nguys another thing that we can do. So up here, what we did is we said string character name,\nand we set it equal to a value right away. But what I could also do is put a semicolon\nhere. And also I do want to point out, whenever we're writing lines of code in c++, every\ntime you finish writing a line of code, you want to put in this semi colon. I'm not sure\nif I mentioned that in the last video. But the semicolon basically tells c that we're\ndone with that line of code. So this separates one line of code from another. So you need\nto always make sure you put these semicolons. But with a variable, what I could do is I\ncould say int character name, I could do the same thing for string. And then I could go\non to a new line. And I could give this a value. So I could say like, character age\nis equal to and now I'm just going to type in a number. So we said that john was going\nto be equal to 35. And you'll notice when we use numbers, we don't have to surround\nthese with quotation marks, we just can type out the number. So now we have two variables,\nand I showed you two different ways that we can create them. And what we can do is we\ncan use these variables inside of our story. And you'll see how this makes it a lot easier\nfor us to maintain this program. So what we want to do is we want to replace every instance\nof the characters name and the characters age with the variable. So instead of just\nprinting out john here, I want to refer to this variable. And the way that we need to\ndo that is we basically need to include this variable. So over here, I'm printing out this\nstring of text, I'm printing out a bunch of plain text, right. But let's say instead of\njust printing out john here as plain text, I want to instead print out the value that\nwas stored inside of the character name variable, what I can do is I can just get rid of john.\nAnd I can say less than sign less than sign. And what this is basically going to tell c++\nis that we want to take the value that we're going to type out here, so I'm just going\nto type out character name. And it's basically telling c++ that we want to take this value,\nand we want to insert it right here, inside of this line of text. So when I go ahead and\nrun my program, now, you'll see that we're still printing out there once was a man named\njohn. Except now I didn't actually type out john, all I did was include this variable\nright here. And I basically just said that we want to put the variable right in there.\nSo that's how we can include a variable inside of one of these print statements. So over\nhere, I'm going to do the same thing. So I'm just going to say less than less than character\nname. And now this is going to insert the character name. In other words, it's going\nto insert the value stored inside of the character name variable. at this position, we can do\nthe same for the age. So over here, we have the characters age, I'm going to get rid of\nthat. And I'm going to say less than less than, and now, character age. And so the value\ninside of the character age variable is going to get placed right in there. And we have\none more place where we have the characters age. So over here, I'm going to get rid of\nthis. And now this is going to be special. So you'll see over here, we want to insert\nthe value inside of the character age variable, right in between all of this text. So I want\nto put it right here, what I can do is I can make two quotation marks. And essentially\nwhat this is doing is it's saying this is going to be its own string of text. And this\nis going to be its own string of text. And I can make to less than signs, I can type\nout the character age variable. And then I'm going to make two more or less than signs.\nAnd this is essentially just going to string all of these together. So it's gonna say,\nprint out this text, then print out the value inside of the character age variable, then\nprint out this text. So I've now replaced every instance of the characters age, and\nevery instance of the character's name with those variables. Let's run our program and\nsee what happens. Over here, you'll see we have the same exact story as we did before,\nthere was a man named john, he was 35 years old john 35. So without having to manually\ndo anything, we were able to include those values. And now what's cool about variables\nis if I wanted to update the character's name, or update the character's age, all I have\nto do is change it up here in one spot. So if I wanted to change the character's name\nto Tom, and I wanted to make Tom let's say 50 years old, I only have to modify the values\nthat Getting stored in the variables in, they'll automatically update down in our story. So\nnow when I run my program, you'll see it's using the name Tom. And it's saying that he's\n50 years old. So that's kind of an awesome way that we can use these variables. Another\ncool thing that these variables allow us to do is modify the value. So let's say that\nhalfway through our story, I wanted to change the character's name. So halfway through,\nI wanted to make the name be a different name, all I have to do is say, character name. And\nI can actually assign this a different value. So I could give this the value of Mike. And\nagain, I'm going to need a semicolon here at the end of this line of code. And now you'll\nsee halfway through the story, the character's name is going to change. So it says There\nonce was a man named Tom. And down here, it's using the name, Mike. So not only was I able\nto just use those variables to insert these values, but I can actually modify those variables\nat different places in my program. So that's pretty awesome. Now, this is just sort of\nlike the bare basics of variables, variables are containers, they allow us to maintain\nand keep track of the data and the values in our programs a lot better. And they also\ngive us the advantage of only having to assign a value once so I can assign a value once\nup here. And then I can use it and refer to it in different places down here. I can also\nmodify those values in different places in my programs. So in this tutorial, we talked\nabout storing values as strings of text, and as integers, which are whole numbers. In the\nnext tutorial, I'm going to show you guys all of the different types of information\nand the different types of variables that we can create in our programs. In this tutorial,\nI want to talk to you guys about the different data types in c++. a data type basically just\nmeans a type of data or a type of information that we can use and work with inside of our\nc++ programs. So there's all different types of information, we can store like text, different\ntypes of numbers, decimal numbers, true false values, all sorts of stuff. And I'm gonna\nkind of walk you guys through what all of those are and how we can use them. So the\neasiest way for me to demonstrate this is just going to be to create a bunch of different\nvariables. So any of the different types of data that we can work with in c++, we can\nactually store inside of variables. So I'm just going to create a couple of different\nvariables and kind of show you guys exactly how this is going to work. So the first data\ntype I want to talk to you guys about is called a character. And a character basically allows\nus to represent one single character. So the way we can create a character variable is\njust by saying CH, ar. And now I want to give this a name. So let's just call it like grade\nor something. And whenever we create a character, we're going to use these single quotation\nmarks. So I can store any like regular character that I would want inside of here. So you know,\nessentially any character that you can think of, you could store in here, and then we're\ngoing to include this semicolon. So that's basically like the character data type. And\nin addition to just storing one single character, there's going to be a lot of situations where\nwe're going to want to store like more than one. And what we can actually do is use something\ncalled a string. And a string is basically just a string of characters. So it's, instead\nof just being one single character, it's like a bunch of different characters. So this would\nbe like, essentially just plain text that we would see in a program. So I could just\nsay string. And we could just call this like phrase. And when I create a string, I can\nuse these double quotation marks. So I can say, like, draft Academy or something. And\nnow we're going to be able to store instead of just one character, a bunch of different\ncharacters. So there's different situations where you might want to use either like a\nchar or a string. But for the most part, I think strings are probably a little bit more\ncommonly used than chars. So instead of just plain text, we can also store and work with\nnumbers. So essentially, there's two different types of numbers are two basic types of numbers.\nThere's whole numbers, and then there's decimal numbers. Some people will also call those\nfloating point numbers, a whole number is like a counting number. So think like 12345,\nright? There's just whole number of solid numbers, there's no decimal points, right?\nThen we have decimal numbers, so it'd be like 0.5, or 1.267, or 10. Point 11. You know,\nbasically a number that has a decimal point after it. When we work with these different\nnumbers, c++ is actually going to distinguish between them. So the first type a number we\ncan work with is an integer. So I could just say int, and this could be like an age or\nsomething. So whenever we're creating a number, we can just type out the number so I could\nsay like 15. And you'll notice I don't need any quotation marks. I don't need anything\nspecial surrounding this, I can just type out the number. In addition to positive numbers.\nYou can also use negative numbers, but anytime we're using an integer, you can't have a decimal\npoints, he can't do anything with decimals, these are just going to be solid whole numbers.\nIf you want to work with a decimal, you have two basic options. So there's two data types\nthat represent decimals in our programs. The first is called float. And this basically\njust stands for like floating point number. The second one is called double. Now you'll\nhear different people talk about these different data types, the main difference is just how\nmany decimal points they can store. So a double can store more decimal points than a float.\nSo if you need a number to be very specific, as far as like how many decimal points you\ncan take it to, then you definitely want to use a double. And I would say for the most\npart, as a beginner, just only worried about doubles, floats will be used more in specific\ncircumstances. But you know, as you're just learning this language, really just worry\nabout double. So we can just say double like GPA. And I can set this equal to like 4.5,\nor like 2.3. Basically, I can make this any decimal number that I wanted. Keep in mind,\nyou could also do like 2.0. So it doesn't have to be like a different number decimal.\nAnd again, you can make these negative, that's no problem. So ants are going to be what we're\ngoing to use for whole numbers, for the most part doubles are going to be what we're going\nto use for decimal numbers. So that covers text and numbers. And just with those two\ndata types. With text, we can use characters and strings and an instant doubles. You can\nrepresent like just about any type of information in your programs. But c++ is awesome. So they're\nactually going to give us another data type, which is called a Boolean. And a Boolean is\nmaybe not as intuitive as, like text and numbers. A Boolean is actually what we would call a\ntrue false value. So when we're writing our programs, there's actually going to be a lot\nof situations and circumstances where we want to represent true or false data. And a Boolean\nis just a special word for true or false. Right. So I could say B o L stands for Boolean,\nand we could create a variable like is male, right, so this variable is male is going to\nstore a true or a false value inside of it. And this will basically tell us whether or\nnot someone is male. So in my case, I could say true, because I am a male, right. So you'll\nsee how this can kind of come in handy for different things like, we could say something\nis true, or we could say something is false. And that allows us to represent a certain\ntype of information, I could also say false over here. And that's going to be the opposite.\nSo these are going to come in handy a lot these true false values. And we can use Boolean\nto represent them. So for the most part, these are the basic data types. Now there's a couple\nother data types that we could also get into. But I think 99% of the time, as a beginner,\nas somebody who's learning c++, you know, don't concern yourself with anything that\nyou don't have to so Boolean doubles, which are just decimal numbers, and which are whole\nnumbers, strings, which is plain text, and chars, which are just single characters. That's\nwhat we're going to be working with. So as we go forward in the course, we're going to\nbe working with all this different type of information. Now, I want to point out one\nmore things, I'm actually just going to make a little print statement here. And you know,\nthis is the basic statement. So if I wanted to, I could print out any one of these variables,\nlike if I could print out a grade, for example. And this is going to go ahead and print that\nout onto the screen. You see over here, we're just printing out a, but we don't have to\nstore this information inside a variable. So if I wanted, I could just type in a string\ndown here, right, I don't have to store in a variable. And this is what we would call\na constant. So I don't need to store it inside of a variable, I could also you know, type\nout like false. Or I can type out a number like 4.5. Or I could type out an integer.\nOr I could type out a character like, you don't have to put these things inside of variables,\na lot of times you can just use like straight up like that. And this is what we would call\na constant. But a lot of times you're going to want to store information in variables\nbecause it's really useful. And obviously when you do that, you have to declare the\ndata type and you have to tell c++ what type of data you want to work with. In this tutorial,\nI'm going to talk to you guys about the ins and outs of working with strings in c++. And\nthe c++ programming language, one of the most common types of data that you're going to\nbe working with are going to be strings and strings are basically just plain text. So\nany type of plain text we want to represent or work with in our program is going to be\nconsidered a string. So down here, you'll see I have this little program set up basically\njust printing out a couple lines. So the way I can create a string is just by using an\nopen and closed quotation marks like this. So I can basically type out whatever I want.\nIf I wanted to, I could type out draft Academy. You'll see now I'm printing out draft Academy\nand Hello. If I was to run my program, you'll see that we Drop Academy and Hello. First\nthing I want to show you guys is doing has to do with this see our line of code over\nhere. So you'll notice here it says end l right here. And basically when we put end\nl right there, it tells c++ that we want to print a new line after we print whatever is\nin here. So if I was to get rid of this, and I just said, See our draft Academy. Now, what\nyou'll see is that Hello is going to get printed on the same line as draft Academy, because\nwe didn't put an L. So we didn't put a new line. If I wanted to, though, I could actually\nmanually come in here and specify a new line by saying a backslash n. So backslash n basically\nmeans that we want to print out a new line. So this inside of a string represents the\nnew line character. So now when I run this program, you'll see that Hello gets printed\nout on a new line. So that's how we can use that backslash n inside of our string in order\nto do essentially the same thing as and L is doing. And if I wanted, I could put this\nlike in between these two words, and it would put them on a new line. So in addition to\njust printing out a string, like we did over here, I could also store a string inside of\na variable. So in order to create a string variable, I can just say string, we'll give\nit a name. So we could just call this phrase, and I could set it equal to whatever I want.\nSo let's set it equal to draft Academy. And then I can do exactly what I did down here.\nSo here, I can just print out phrase. And now it'll be printing out draft Academy onto\nthe screen, just like that. So in addition to just printing out strings, and kind of\nworking with them that way, storing them inside of variables, we can also use what's called\nstring functions. Now, a function is something that we're going to get into more later in\nthe course, we're going to write our own functions. But for now, just know that a function is\nbasically like a little block of code that we can call, which will perform a specific\ntask for us. So these functions do all sorts of things. And there's a lot of functions\nthat we can use with these strings. And they're called string functions. So these functions\nwill either like modify the string, or they'll give us information about the strings. So\nI'm going to show you guys a couple. So the first string function that I want to show\nyou guys is the length function. And all I have to do to use this is I can just come\ndown here. And I'm actually just going to print out the result of using these functions.\nSo I'm going to put it down here, I'm going to say phrase dot length. And I can make an\nopen and close parentheses. And generally when we're calling a function and see, we're\ngoing to use this dot, and then we're going to type the name of the function. So this\nis the length function. And we're going to make an open and close parentheses like that.\nSo now if I was to run this program, you'll see we're getting 15. So this is basically\njust telling us how many characters are inside of this phrase, strings, how many characters\nare inside draft Academy. Now, if I wanted to, I could actually access individual characters\ninside of here. So let's say that I wanted to access just this G. So I wanted to print\nout the first character in this string, we can make an open and closed square brackets\njust like this. And inside of here, I can put zero and zero is going to refer to this\nfirst character in the string. So now when I run my program, you'll see we're just printing\nout this capital G. If I wanted to access this R, for example, I could say two, and\ntwo is going to refer to this R. So now when I run my program, we're printing out our as\nyou can see over here. So if you haven't caught on yet, whenever we're indexing a string,\nwe're starting at zero. So if I was to assign index positions to each one of these characters\nin the string, I would say that g is an index position zero, I is an index position one,\nR is an index position two, a three, four, etc. So whenever c++ is indexing a string,\nit always starts indexing it at zero, so it'll start counting basically 01234. Even though\ng is the first character in draf Academy, it's technically at index position zero. So\nwhenever we're using something like this, we're referring to like a specific character,\nwe want to refer to the index position, which is going to start at zero. Another thing I\ncould do is I could actually, like modify a specific character in a string. So I could\nsay like phrase, and I can refer to an individual character inside of this string. So we could\nsay like phrase zero, I could assign this a new value. So I can assign this the value\nof a new character. So you'll notice I'm using these single quotes, so I could say like,\nB. And so now, instead of saying, gee, Ira FFP, it's going to say, Be IRA FFV because\nI'm essentially changing one of the characters in this string. So now when we print this\nout, you'll see it says burapha Academy instead of draft Academy, so that can be kind of handy\njust to modify a specific character inside of a string. We could also find out information\nabout this string. So I showed you guys how we can find out the length of the string But\nimagine if we wanted to find out whether or not a specific string or a specific character\nwas inside of this string, I could say phrase dot find. And I can make an open and close\nparentheses. And actually, inside of these open and close parentheses, I'm going to give\nthis find function a couple of different pieces of information. So I'm going to give it some\ninformation for it to perform its task with. And these are called parameter. So anytime\nI give a function, different pieces of information, we call it passing parameters. Or you also\nhear people call them arguments. So passing arguments, or passing parameters, basically,\nit's just information that we give to this function. So this fine function, I need to\ngive a couple pieces of information, the first thing I can do is give it a string or a character\nthat I wanted to find. So let's say I want it to find Academy. So basically, I want to\ncheck to see if the word Academy is inside of this phrase string up here. The next argument,\nI want to give this an X parameter is going to be an integer. And it's going to be the\nindex where I want to start looking. So if I wanted to just check to see if it was in\nthe string, I could say zero, if I wanted to check to see if Academy occurred after\nthe third index, then I could say three, let's just say zero. So now, this is actually going\nto give us back in number and it'll tell me at what index position inside of this string\nAcademy occurs. So now I'm going to run my program, you'll see over here, it's giving\nus an eight back. That's because academies starts at index position 012345678. So Academy\nstarts at index position eight. And that's why it gave that back to us. So I could do\nthis with anything I could say, like FFP, or something. And now this will tell me where\nFF II starts inside of this string. So it starts at index position four. So that can\nbe pretty useful. And it's a really useful way to find the figure out of different things,\nor different strings show up in this string you're working with. There's one more string\nfunction that I want to show you guys, which is called substring. So it's just phrase.su.\nb str. And this is also going to take two parameter. So we're going to give this two\npieces of information. The first piece of information we're going to give this is a\nstarting index. Now substring allows us to take, you know just part of this string, so\nI could specify that I want to take like all the characters after this a or I can specify\nthat I wanted to take like, from index position zero from index position one all the way to\nthe end, basically, it'll allow me to take like just a subsection of this string. So\nthe first parameter, I want to give this as a starting index, so I could say like eight.\nAnd so basically, this is going to start grabbing a new string at index position eight, then\nI can give this a link. And this is basically going to tell substring, how many characters\nI want to grab. So if I said like three, this is basically going to start at index position\neight. So it's going to start up here at this a, and it's going to grab three characters.\nSo it's going to grab this A, this c and this a. So now when I print this out, you'll see\nwe get a CA just like that. And that's basically what we do. So this is the starting index,\nand this is the link. And one of the cool things we could do is we could actually take\nthis and store this substring in another string. So I could say like, string, phrase sub, just\nlike that. And then I could come down here and I could say phrase sub is equal to, and\nthen what we just had before, so phrase dot substring. And now if we print it out phrase\nsub, it'll print out ACA. So I'm essentially storing the value of the substring in another\nstring. So that can be pretty useful. And that's really the basics of working with strings.\nI mean, obviously, there's certain things that I left out, you know, I could spend an\nhour just talking about all the different things we could do with strings. But I think\nthat kind of covers the basics kind of shows you all the basic things that you can do,\nwe looked at some basic functions, we talked about grabbing individual characters, we talked\nabout string indexes. So I think for now, that should be a good introduction into working\nwith strings in c++. In this tutorial, I want to talk to you guys about working with numbers\nin C. Now whenever you're writing programs, and C, one of the most common types of data\nthat you're going to be dealing with are going to be numbers. So these can be things like\nwhole numbers or decimal numbers. Basically, I'm gonna give you guys a full overview of\nhow to work with numbers, we'll talk about the basics, we'll look at how we can use different\nmathematical functions in order to do different mathematical operations with our numbers.\nSo this is gonna be a pretty cool tutorial. Now, down here, I'm just going to talk to\nyou guys about the basics. There's really two types of numbers and see that we deal\nwith whole numbers and decimal numbers. And whole numbers are basically referred to as\nintegers. And decimal numbers can be referred to as two things either floats or doubles.\nAnd essentially, the only thing you need to know about that as a beginner is that doubles\nallow you to store more specific decimal points. So the double you can store you know, potentially\nmore decimal points and you In a float, and there's more differences. But if you want\nto get more into that you can kind of look it up. But the basics of using numbers as\nyou just type them out. So if I wanted to, for example, print out the number 14, you\nsee I have this C out here, I can just type it in and we can print it out, we can work\nwith it. In addition to positive numbers, we could use negative numbers, if I wanted,\nI can make this a decimal. So really, numbers are very simple, you just kind of type out\nthe number. But we can also do things like math. So for example, I could say like five\nplus seven. And in addition to printing out five and seven, this is actually going to\ndo this math operation. So this will actually print out the result of five plus seven. So\nyou can see we get 12 over here. So we can use addition, we can also use subtraction,\nwe could use division, which is going to be this forward slash, and we can use multiplication,\nwhich is going to be this Asterix, so if I was to multiply these two numbers, now you'll\nsee over here we get 35. So those are the four basic math, you know operations. So that's\ngoing to work really well. Also, one other thing I want to show you guys, which is called\nthe modulus operator, and the modulus operator will basically give us the remainder of dividing\ntwo numbers. So if I said like 10, and then I made this percent sign, and actually this\nis read 10 mod, and then I said three, so we would read this 10 mod three, what this\nis going to do is it's going to take 10 divided by three, and then it's going to give us the\nremainder, so this module is operator will give us the remainder, so 10 divided by three\nis going to be three with a remainder of one. So now we just we should just get one. And\nyou can see over here we get one. So sometimes that modules operator can come in handy, you\ncan also represent order of operations in C. So C is going to adhere to like the normal\nor reparations, like p DMS, I think it is Please Excuse My Dear Aunt Sally, basically\nlike multiplication and division are going to come before addition and subtraction. So\nif I said for example, like four plus five times 10, this is going to do five times 10\nfirst, so it's going to be 50 plus four, so we get 54. But if I wanted to do the addition,\nfirst, I could just put parentheses around this. So now it's going to do five plus four,\nnine times 10. So now we should get 90. And you can see we do so if you need to separate\norder of operations. I mean, it's essentially just following basic math order of operations\nrules. But you could represent those like that. So in addition to doing all that stuff,\nand just printing out numbers, we can store numbers inside of variables. So I can make\nan N, we'll just call it like w nom for whole number. And we'll just make this five. I could\nalso use like a double. And this will be like de nom for decimal number. And this would\nbe like 5.5, right? I mean, now we're storing these numbers inside of variables. If I wanted,\nI could just, you know, print them out. Naturally, like we did down here, I want to show you\nguys one cool thing we can do though, which is incrementing, a number that's stored in\na variable. So I could say like w num. And I could say plus plus. And what this is going\nto do is it's going to add one on to W num. So now when we print out w num instead of\njust being five, it's going to be six because we're adding one to it. So you can see we\nget six. And that's a shorthand that'll come in handy a lot. There's a lot of situations\nwhere you want to increment a value. You could also do like minus minus, and that will subtract\none from it. You could also do like w plus equals, and we could say like 80. And so what\nthis is going to do is it's going to take w nom and it's going to add 80 to it. So now\nwe should get 85. And you see we do, you can do plus equals multiplication equals minus\nequals, I think you can do division equals, and all of that will it's just basically shorthand\nso you don't have to type out all that stuff. So now that we kind of looked at all the different\noperators, let's talk about how decimal numbers and integers work together. So here's a little\nexperiment. Let's say I came down here and I added 5.5 plus nine, so I'm adding a decimal\nnumber. And I'm adding it to a integer number, right, so let's see what happens over here,\nyou'll see that we're going to get a decimal number back. So anytime we're doing math between\na decimal number like a double or a float, and an integer, a whole number, we're always\ngoing to get a decimal number back. So it's always going to give us the decimal back.\nBut it's important to note though, if I did math with two integers, so for example, let\nme show you guys if I was to say like 10 divided by three, and these are both integers. Keep\nin mind, I'm actually going to get an integer number back. So we're going to get like three\nback because that's technically the answer. But here's the thing. This isn't actually\nthe answer. Really what it is, is it's three with a remainder of one. But because we did\nthe math with two integers, we're going to get an integer value back. If I was to make\none of these a decimal number or even if I made both of them a decimal, a decimal number.\nNow we're going to get back The actual like full answer. So it's going to be three with\nthree repeated just like that. So you can see if we do math between just two integers,\nwe're always getting an integer back, even if that's not like fully the correct answer.\nAnd different circumstances, you're going to want to do that in other circumstances\nyou're not, but just keep that in mind. So that's kind of how integers and decimal numbers\ninteract with each other. So now what I want to do is show you guys how we can use different\nmath operations. So it generally just with math, there's all sorts of different, like,\nI guess, operations, you can do like square root, you can take a number to a power, we\ncan round a number. And in C, there's actually these things called functions, which can do\nall that stuff. For us. A function is basically just a collection of code that we can call\nthat will perform a specific task. And we're going to talk more about functions later.\nBut for now, I'm going to show you some basic math functions that we can use. In order to\nuse these math functions, I actually have to do something called importing them. And\nessentially, when we import something, we're basically going we're telling c++ that we\nneed to go out and grab code from other files. So up here, you can see we're using this include\nstatement, and we're grabbing something called iostream, I'm going to add another line here,\nwe're just going to put a hashtag, we're basically just going to copy this guy up here. And we\ncan open and closed greater than less than sign. And in here, I just want to type in\nC math. And basically, what this is going to do is it's going to tell our c++ program\nthat we want to use some math functions, that's kind of all you need to know at this point,\njust know that you need to put this up here in order to follow along with what I'm going\nto be doing. So down here, we can now use a bunch of different math functions, essentially\njust math operations. So for example, I could say like POW. And what this will do is it'll\ntake two arguments. So in here, I could pass two numbers, like I could pass a two, and\nI could pass a five. And what this will do is it'll take two raised to the power of five,\nand it's just going to print that out. So when I run my program, you'll see we're getting\n32. So 32 is two raised to the fifth power. And you can kind of do that with any number.\nSo I could also say like three raised to the third power, so three cubed, and now we should\nget 27, which we do. So that POW function can be pretty useful. There's another one\nsquare root Sq RT essentially doing the opposite. So we can say like square root 36. And now\nthis is going to give us the square root of 36 back, which is going to be six. So that\ncan be pretty useful. And inside of these functions, we you can put a decimal numbers\ntoo. So I can put both integers like whole numbers and also decimal numbers. There's\nanother one which is called round, which is going to round a number. So if I put like\n4.3 inside of here, this will return the rounded number. So you see, we just get four and this\nwill follow normal rounding rules. So if I change this to 4.6, now we should get five\nback. There's a couple other these functions, which will similarly like round decimal numbers,\nI can say CIO, and what this will do is it'll automatically just round the number up. So\neven if this was like 4.1, this will round the number up to the next highest whole number.\nSo you'll see here we get five, you can do the opposite, which is floor. So if I just\nsay floor here, if I put a 4.8 in here, normally, it's supposed to round up, but now it's going\nto round down because we're using that seal or that floor function. So those can be pretty\nuseful. And there's one more I want to show you guys, which is called f max. And f Max\nis going to take two numbers. So I can pass in like a three and a 10. And this will tell\nme which one's bigger. So this will return back to us the bigger of the two numbers.\nSo now when I run this program, you'll see it's giving us a 10 back because 10 was the\nbigger number and a lot of circumstances, in C, you're going to have two numbers, you\nmight not know which one is bigger. So this can be really useful to tell us. And you could\nalso use f min, which will do the opposite. So this will tell us what the smallest number\nthat we passed in was. And you can see we get three over here. So those are some basic\nmath functions. There's a lot more if you just go online and search c++ math functions,\nlike you'll find a huge listing of all them that you can use. There's things to do like\nsine, cosine, tangent, you can do like logarithmic stuff you can do, you can use like exponentials\nall different stuff like that can be really useful. But that's kind of the basics of how\nyou can use that. And you know, really, numbers are extremely useful. And that's kind of been\nlike a broad overview of sort of all the stuff you can do with them. In this tutorial, I'm\ngonna show you guys how to get input from a user in c++. A lot of times in our programs,\nwe're going to be working with all different types of information. But one of the most\nimportant types of information is going to be information that the user inputs. So a\nlot of times in our programs where Want to allow the user to input information. And then\nwe're going to want to use that information in order to do different things. So in this\ntutorial, we'll just give a broad overview of how that's done, we'll talk about how to\nget different types of information. And you know, you'll kind of learn everything you\nneed to learn. So down here, whenever we're getting information from the user, the first\nthing we always want to do is store that information somewhere. So whenever I'm asking the user\nto give me a piece of information, if they give me that information, and I don't put\nit anywhere, like it's kind of useless, right, so we usually what we want to do is create\na variable. And I'm actually going to write a little program that will allow the user\nto enter in their age. So I'm going to create a integer just called age. And I'm not going\nto give it a value. So I'm just going to put a semicolon there, we're essentially declaring\nthe integer. So we're telling c++ that we want to use this integer, but we're not giving\nit a value, we're going to let the user give this variable a value. The next thing I want\nto do is I want to prompt the user to enter in something right. So if I don't give them\na prompt, if I don't tell them what information I want, then they're not going to know what\nthey should input. So I'm just going to say C out. And I'll just print out a little prompt,\nso we'll just say, enter your age. And we're basically just prompting them to enter in\ntheir age. Alright, so once we've created the variable, and once we've prompted them\nto enter in the information, now what we can do is we can actually get the information\nfrom them. So the way that we get information is actually the opposite of the way that we\nprint out information. So instead of saying c out, I'm just gonna say C n, and I'm gonna\nmake two greater than signs. So when we use C out, we use these lesson signs, when we\nuse C, and we use greater than signs, and that's really important. So over here, I'm\njust going to type in the name of the variable that I want to store what they enter inside\nof. So I'm just going to put age here, because I want to store whatever they input into this\nage variable. So we're assuming that they're going to enter in an integer number, and I'm\ngoing to store that integer number inside of this integer that we created. Now, what\nwe can do is we can just print out something. So we'll print out a little message to them,\nbasically saying like you are, and then we'll say like age, or we can say like, years. Old.\nCool. So now we're basically just asking them to enter in their name, we're taking whatever\nthey input, and we're storing it inside of this age variable, we can do that using the\nC in command here. And then we're just printing out You are the age years old. So let's go\nahead and run our program. And we'll see how we did. So I'm going to build and run. And\nyou'll see here it says enter your age. So we can just put like 30. And now when I click\nenter, it's going to take that integer that we entered in 30, it's going to store it inside\nof the age variable, it's going to print out the prompt. So when I click enter, you'll\nsee it says you are 30 years old. So that's awesome. So we can do that and we can get\nan integer, I could also get a double. So if I made this a double, it would be the same\nthing. So here, I can run the program. And I can enter in like 4.5. So maybe someone's\nlike four and a half years old. And here they're entering in 4.5. So it's gonna work the same\nexact way, you could also do the same thing for characters. So if I made this a sharp,\nhere, it'll be the same. So we'll be able to get a character from them as well. So now\nwhen I run the program, I could just enter in like a G, for example, whatever, obviously,\nthat's not the age, but it does the same thing. So it's able to take in that character, and\nit's able to use it. Now, here's the thing, that's how we can get characters in numbers.\nBut if we want to get a string of text, we're actually going to do something different.\nSo if I wanted to get a string, I'm actually not going to use this C in command. So I'm\ngonna show you guys how we can get a string. So instead of entering in the age, why don't\nwe have them enter in their name. So over here, I'm going to make a string, and I'm\njust going to call it name, instead of using C and I'm going to use another command, which\nis called get line. And get line will basically allow us to get an entire line of text. So\ninstead of just getting like one number or one character, we're going to get like the\nentire line that the user enters. And in here, we need to pass this a couple of different\nparameters. The first is going to be c n. And c n is basically just that little like\ncommand prompt. So like whenever we enter stuff into that command prompt, that's basically\nwhat this is saying. And then we want to enter in the name of the variable where we want\nto store the line of text that we get. So I'm just going to store inside of name. So\nover here, we can just say hello to the user. So I could say hello. And it's going to be\nname. So now we'll be able to get the name from the user. So we're basically get the\nentire line. So for example, I can come over here I can say like john smith, and now when\nI click enter, it says hello, john smith. So that's how we can get strings of text.\nAnd that's really the difference is if I wanted to get like an integer and store it inside\nof an integer variable, if I wanted to get a char and store it inside of a char variable,\nI have to use C in. But if I want to just get like a string of text, then I can use\nthis get line function, and they're both going to be useful. So that's kind of an overview\nof how we can get input from the user. And you can get as many values as you want. And\nso you know, you can essentially like copy this whole line, paste it a bunch of times\nbelow there, and get, you know a bunch of different pieces of information and use them.\nIn this tutorial, I'm going to show you guys how to build a basic calculator in c++. Essentially,\nwe're going to build a calculator where the user can enter in two numbers. And then we'll\nadd those numbers together and will spit out the answer. So this is going to be kind of\ncool. And it'll show you guys a little bit more about getting input from users. So down\nhere, the first thing we want to do before we do anything is create two variables, where\nwe can store the two numbers that we want to add together. So I'm going to create an\ninteger. And I'm just going to call it num one. And I'm not going to give this a value\nbecause we're actually going to let the user give this variable a value, I'm going to create\nanother one called num two. And same thing, actually, let me show you guys something cool,\nwe can do it, we're creating two variables like this. And they're the same data type,\nI can actually put them on the same line. So I could say num, one, comma, num, two.\nAnd a lot of people find this to be really useful. So for example, I could do like as\nmany as I wanted. In our case, we're just going to have two numbers, though. So now\nthat we've declared our two number variables, the next thing we want to do is prompt the\nuser and get some information. So I'm going to say C out. And the first thing we'll do\nis prompt them for the first number. So I'll say enter first number. And now we want to\nactually get the first number from the user. So I'm going to say cn, and over here, I'm\njust going to specify num one. So we're going to store the number that they enter inside\nof this num, one variable, I can actually just copy this. And we're going to do the\nsame thing down here. So I'm just going to say enter second number. And now instead of\nnum, one, it's going to be num two. So at this point in our program, we should have\nboth of those numbers, we should have gotten both of those numbers from the user, the last\nthing we want to do is just print out the answer. So we can actually just say, C out.\nAnd I'm just going to add number one and num two together. So we should be printing out\nthe result of adding those two numbers together. So let's go ahead and run this program. And\nwe'll see how we did. So I'm going to build and run. And actually Whoops, I put the wrong\ndirection for these arrows here. So this is probably a really common mistake with C and\nwe want to make to greater than signs not to less than signs. So that's something that\ncould easily trip up a new user. And it tripped me up. So when we're using C and we're using\nthese two greater than signs when we're using C out we're using these two less than sign.\nSo that's my mistake. But I guess that does kind of highlight a common mistake for beginners\nin c++. And even for someone like me who's programmed in c++ a lot before. Alright, so\nnow let's run our program. And it says enter first number, so enter in a five, enter second\nnumber entered and a 10. And now when I click enter, it should add both these numbers together.\nSo it does and we get 15. So that's pretty cool. Another thing we could do is instead\nof using integers, we could also just use doubles. And that's as easy as just changing\nthese variable declarations. So now when we run the program, we can work with double.\nSo I could enter in like a four, I could also enter in like a 9.8. And now we'll be able\nto add those guys together. So that's kind of cool. And really, that's a basic calculator.\nSo essentially, we're declaring the variables up here, we're using C out. And with C out\nremember, we're using these less than signs, then we're using cn with the greater than\nsigns. And this line is basically getting the use the input from the user. And it's\nstoring it inside of this variable. We're doing that twice. And because we store these\nas doubles or before integers, we're able to add them together and print out the answer.\nSo that is the basics of building a calculator. Actually, later in the course, I'm going to\nshow you guys how we can build an even cooler calculator that will be able to add, subtract,\nmultiply and divide, and the user will get to decide in order to build something like\nthat. We're gonna have to learn some more stuff. So stick around, and we'll learn how\nto do something like that later in the course. In this tutorial, I'm gonna show you guys\nhow to build a little mad libs game in c++. So a Mad Libs is basically a little game where\nyou enter in a bunch of random words could be like nouns, verbs, adjectives, and then\nall those words get taken and get sprinkled into a story. And generally since you entered\nin random words, the story ends up being pretty funny. So let me show you guys over here in\nmy browser, I just have an example of a Madlib you know, essentially there's this story and\nthen you would sprinkle in all those random words that the person entered into the story.\nSo we're going to build something like this in our c++ program. Down here, I have my little\nprogram set up. It's just this little poem, it says Roses are red, violets are blue. I\nlove you. So this is a, you know, sort of a classic poem. But I think this could be\na lot better if we turn it into a Madlib. So let's say instead of saying Roses are red,\nwhy don't we let the user enter in a color, instead of saying violets are blue, we'll\nlet them enter in a plural noun. And instead of saying, I love you, let's say I love celebrity,\nso some random celebrity they can enter in. So basically, we're going to ask the user\nto enter in all these different values, we'll store them in variables, and then we can print\nthem out inside of our story. So let's get started, this should be kind of cool. The\nfirst thing we want to do is actually create variables for all these things. So I'm just\ngoing to say string. And we'll create a variable for the color for the plural noun and for\nthe celebrity. Alright, so now we've basically told c++ that we're going to use all these\nvariables, but we need to give them values. And we're actually going to let the user give\nthem values when they enter in all those things. The first thing we want to do when we want\nto get input from the user is we're just gonna say C out and we're gonna print out a prompt,\nso I'm basically just gonna say, enter a color. So we're gonna have them enter in a color,\nnow we want to actually get the color that they input, so I'm just going to say, Get\nline. And in here, we're just gonna say ci, N. And that's basically just standing for\nlike that console input. So whenever we like, input text into the console, so it's gonna\nget whatever gets inputted into there. And then we're gonna store it inside of this color\nvariable. So this will get the line of text that they enter. And I'm actually just going\nto copy this, and we'll do the same thing for all the other values. So we're gonna say\nenter a plural noun. And we'll store that inside of the plural noun variable. And then\ndown here, we're going to do the same thing for the celebrity. So we'll store that in\nthe celebrity variable. Alright, so we're declaring the very most, we're printing out\nour prompts. And then we're getting the input from the user using this get line function.\nLast thing we need to do is modify this part of the program. So instead of saying roses,\nour color, we're actually going to put the color that they entered into the story, same\nthing for this plural noun. So I'm just going to say, plural noun, and you can see how that\ngets placed in between these lessons. And then I love celebrity, we're going to actually\nput in the celebrity variable. Cool. Alright, so now our program should be set up, everything's\nwired up, we're getting values into all these variables, and we're printing them out, down\nhere in our story. So let's run this program and we should be able to play our madlibs\nenter a color, why don't we enter in magenta? Enter a plural noun, let's do microwaves.\nAnd enter a celebrity. Why don't we do Tom Hanks. So now when I click enter, all of the\nvalues are going to show up in our story. So it says roses are magenta, microwaves are\nblue. I love Tom Hanks. Awesome. So our Madlib worked, and we are ready to go. So that's\nessentially how you can build a Madlib I mean, it's it's as easy as getting different inputs\nfrom the user and printing them out inside the story. But this is a very simple madlibs.\nI mean, I'm sure you guys can see that you could ask the user for like 20 different words\nand print them out into some huge long story. And it's going to work out the same way. So\nthis is an awesome way to create our Mad Libs game. In this tutorial, I want to talk to\nyou guys about using arrays in c++. A lot of times when we're writing programs in c++,\nwe're going to be dealing with large amounts of data. And one way that we can keep track\nof and manage that data is by using something called a variable. But the one thing about\nvariables is that generally you can only store one value inside of a variable. So if I create\nlike a character valid variable, I can only store one character in there. If I create\nan integer variable, I can only store one integer in there. A lot of times though, in\nc++, we're gonna be dealing with huge amounts of data. And that's where arrays can come\nin array is basically a container a lot like a variable. But unlike a variable arrays can\nhold multiple data values. So an array could hold like a list of you know, 1000s, or millions\nof pieces of information. And generally, we could put, you know, pieces of information\nthat are related to each other in some way inside of the same array. So I'm going to\nshow you guys how we can create arrays and how we can work with them. You create an array,\na lot like you create a normal variable. So the first thing we have to do is tell c++\nof what type of data We want to store inside of the array. So I'm just gonna make an array\nof integers. So I can just say int. And again, just like a variable, we're going to give\nthis a name. So I could say like lucky nums, right, and this would be an array of lucky\nnumbers. Now, here's where this gets different from a variable. When we're creating an array,\nwe always want to put an open and close square brackets after the name. So after lucky nums,\nwe're gonna put this open and close square bracket. And that basically tells c++, okay,\nthey want to create an array, so they want to be able to store multiple pieces of information\ninside of this container. Now, I'm just going to say equals, and one, the easiest way to\ncreate an array is just to assign it some default information right off the bat. And\nI can just make an open and close curly bracket and inside of here, I can just start typing\nout the information that I want to store. So let's say I want to store like a list of\nnumbers, I could say like for a 1516 2342, right, so I'm storing all of these numbers\ninside of this single container. So unlike a variable where we can only store one number,\nnow I'm sorting a whole list of numbers. And we will refer to these as elements in the\nlist. So four would be the first element in the list. And then we would delineate the\nnext element using this comma. So now we have the second element, 815 16, excetera. So these\nare all going to be elements inside of our array. Now down here, I'm going to show you\nguys how we can access individual elements. So I'm just gonna say C out. And let's say\nthat I wanted to access one of these particular elements, let's say I wanted to access like\nthis first element here inside the array, because what good is the array, if we can't\naccess the information inside of it, right, I can just say, Lucky nums. And I can make\nan open and close square bracket. Now inside of this open and close square bracket, I can\nput the index of the element inside the array that I want to access. So if I want to access\nthis first element in the array, I just need to put an index in here, that's going to be\nzero. So now when I run my program, you'll see we're printing out four, we're printing\nout that first element in the array, if I wanted to get access to this 15, it's going\nto be 012, it's going to be at index position two inside of this array. So now whenever\nmy program, we get that 15. So if you haven't caught on by now when we index these arrays,\nwe start with index positions zero. So I would say that four is an index position. 08 is\nan index position. 115 is an expedition 216, three excetera. So we would always say that\nthe first element in the array is actually an index position zero. And if you're familiar\nwith how strings are indexed in c++, it's the same exact thing. So that's how we can\naccess an individual element in the array, we can also modify an element in the array.\nSo I can say like, Lucky nums. And like, let's say I wanted to change the first element,\nI could say lucky num, zero, and I could give this a different value. So I could set this\nequal to 19. For example, Now down here, when I print out lucky numbers, zero, I'm actually\ngoing to be printing out and actually typo whoops, I'm actually going to be printing\nout 19. So you can see we're able to modify one of the indexes inside of that array. Another\nthing we can do with these arrays is I can give them a size. So normally, if I just create\nthe array like this, or just say, Lucky nums and an empty square brackets, the array is\nonly going to be able to store the elements that I declare over here. But a lot of times\nwhen you're making these arrays, you might not know what all the elements should be.\nSo over here, I could put in a number like I could say, like 20. And essentially what\nI'm doing here is I'm telling c++, that I want to be able to store 20 elements inside\nof this lucky nums array. So over here, I don't have 20 elements, yet I only have elements\n012345. So what I can actually do is I can add more elements into here. So I could say\nlike lucky numbers six or lucky numbers 10. And I could give this a value. So I could\ngive lucky numbers 10 the value of 100. And now down here, if we printed out lucky numbers\n10 it's going to be printing out 100. As you can see, another thing you can do is just\nnot give this any info right up front so I can get rid of all of these. And I can just\nput a semicolon here. And then down here, I can give all these different values. So\nI can say lucky number zero is equal to 100. And now I can you know essentially just assign\nall the elements after we declare it so like I said, a lot of times you might not know\nexactly what's going to go in the array when you declare it and so you can just basically\ntell, see how many items you want to hold in there and then you can just you know, fill\nthe the array up as you go. But that's really the basics of arrays and arrays are very simple.\nSo this is a very simple way To store multiple pieces of information. In this tutorial, I\nwant to talk to you guys about using functions in c++. A function is basically just a little\ncollection of code that performs a specific task. So a lot of times in c++, when you're\nwriting much code out, you have code that's designed to do a certain thing. So you might\nhave like four or five lines of code that's supposed to do something. And a function is\nbasically a container where you can put that code, and then you can reuse it throughout\nyour entire program. So I'm going to show you guys how we can create a function in this\ntutorial. So down here in my program, you'll see I have this little block of code here,\nit says int main, there's an open and closed parentheses. And then there's these open and\nclosed curly brackets. This is actually a function. This is a little block of code.\nAnd this block of code performs a specific task. And the purpose of this main function\nis it's the function that gets executed when we run our program. So any code that we put\ninside of this main function is going to get executed when our program runs, I'm gonna\nshow you guys how we can create another function. So up here above this main function, I'm going\nto create another function. And the task that this function will be performing is it's going\nto say hi to the user. So whenever we're creating a function in c++, we need to give c++ a couple\npieces of information, the first piece of information we need to give is called a return\ntype. Now whenever we create these functions, a lot of times the functions will go off,\nthey'll perform a specific task, and then they'll return a value back to the caller.\nAnd we're actually going to talk more about returns and return types in the next video.\nBut for the purposes of this video, you can kind of just follow along. And I'm just going\nto go ahead and put void here. And when we put void here, it basically means that this\nfunction is not going to return anything. So this is kind of like the most basic type\nof function. And after we put void, now we need to give this function a name. Remember,\na function is a block of code that performs a task. So generally, when we're naming a\nfunction, you're going to want to name it according to the task that is performing or\naccording to the purpose of the function. So I'm just going to call mine Say hi, because\nour function is going to say hi to the user. Now I'm going to make an open and closed parentheses.\nAnd after this, I'm going to make an open and closed curly bracket. Any code that I\nput inside of this open and close curly bracket is going to be considered inside of the function.\nSo inside of here, why don't we just say like C out, and we'll just print out like Hello,\nuser. And that's basically all we'll do. So this is a very simple function, I just have\none line of code in here, I can have as many lines as I want. This is a simple function.\nBut I can have, you know, a dozen lines or 100 lines, if I wanted to, you can put as\nmany lines of code in the function as you want. Now, let's run our program. And we'll\nsee what happens. So I'm going to go ahead and run my program. And you'll see over here,\nnothing's getting printed out. So hello, user isn't actually getting printed out when we\nrun our program. Here's the problem, when we want to execute the code that's inside\nof these functions. In other words, when we want to execute a function, we have to do\nsomething called calling it. So if I want this code inside of here to be executed, I\nhave to call the function. Now remember, the code inside this main function gets executed\nby default, right, so no matter what this is going to get executed. So inside of here,\nI can call this Say hi function, I can just type out say hi. And I can type an open close\nparentheses. And when I do this, when I type this out, this tells c++ that I want to execute\nall of the code that's inside of this, say hi function. So when c++ sees this, it's going\nto jump up to this Say hi function is going to execute all the code inside of there, and\nthen it's going to come back down. So let's go ahead and run our program. And we'll see\nwhat happens. So you can see over here, now we're printing out Hello, user. And real quick,\nreal quick, I just want to show you guys the flow of the so if I said like C out over here,\nand I said top. And then I did the same thing over here, and I said bottom. When I run my\nprogram, you'll see that we're printing out top, hello, user and then bottom. And actually,\nthis probably would have been better if I put new lines in there. But the point is that\nwhen this program executes, c++ is going to execute this line of code, it's going to see\nthat we want to call this Say hi function. And it's actually going to leave this main\nfunction, it's going to jump up here to the Say hi function, it'll execute all of the\ncode inside of here. Then when it runs out of code to execute inside of the say, Hi function\nis going to jump back to the main function and execute this line. So that's basically\nlike the flow of what's happening. So this is a very basic function, but we can make\nthis more complex and one thing you can do With these functions, you can actually give\nthem information called parameters. So this Say hi function, I can give this a piece of\ninformation. And the Say hi function can use that piece of information to, you know, performance\ntask differently or better or whatever. So these are called parameters. And if I want\nto specify that this Say hi function should be given a piece of information, I can just\ncome over here and specify what piece of information it should take. So, in our case, instead of\nsaying hello user, why don't we say hello, hello to someone specific. So up here, I could\nsay like string name. And now this functions going to accept one parameter a name. And\ndown here, instead of saying hello, user, we can just say hello name. Now, whenever\nI call this, say hi function now, because it's specifying that it needs to take a parameter,\nI need to pass it a parameter, I need to pass it a value. So in here, I can just pass it\nlike Mike. And now it's going to print out Hello, Mike, because the value Mike is going\nto get stored inside of this name variable. Alright, let's go ahead and run our program.\nAnd now you'll see it's printing out Hello, Mike. So that's kind of cool. And you can\ntake any piece of information as a parameter, and you can also take multiple parameters.\nSo why don't we specify another parameter like age, so now the caller is going to have\nto pass in their name and their age. So now we can say hello name, will say like you are.\nAnd then we'll just say how old they are. So we'll say like age. So now we're passing\nin two pieces of information inside of this function. And down here, when I call the function,\nI have to give it two pieces of information. So now I could just say, like, Mike, and let's\nsay that I'm 60. So now, when we call this function, it's going to be able to take in\nboth of those pieces of information, and use them to perform the task differently. And\nwhat's cool about these functions is I can call this as many times as I want. In other\nwords, I can reuse all of the code that's up here. So I can come down here, I can copy\nthis and why don't we do this a bunch. So we'll say like, Tom is going to be 45. And\nlet's say Steve, is going to be 19. And so now, I'm actually going to run this code three\ndifferent times. And actually, over here, I'm just going to put a and line so that gets\nprinted out on new lines. Alright, let's run the program. And you'll see it says hello,\nMike, you're 60 times 45 and Steve's 19. So functions are great, because we can reuse\nthe code that we write inside the function. So basically, like I wrote this function one\ntime, and I can reuse it as many times as I want inside of my program. So anytime you\nhave code that's going to be reused a lot, that's a good candidate for a function. Alright,\nso I want to show you guys one more thing, you'll notice that I'm creating this function\nup here above my main function, right. But if I was to take this and move it down here,\nso for example, I moved it below the main function. Now when I run my program, we're\ngoing to get an error, you can see we're getting a little red block here. This is the problem,\nwhen we create this function below the main function, it doesn't actually know about it.\nSo like all this code up here, is getting executed. So c++ is trying to execute the\nSay hi function, but it has no idea like what that is because we created it down here. So\nwhat we can do is we can actually create what's called a function stub. So up here, we're\nbasically just going to write out the functions signature, and we're going to tell c++ about\nit. So you guys remember, like, if I created a variable, like if I created an int, and\nwe just call it num, I don't have to give this a value right away, I could then come\ndown here and say, like num is equal to four or something. This is basically what we're\ngonna do with this function, we're gonna essentially just declare the function and then somewhere\nelse in our program, we can define it. So over here, I'm just gonna say, void, say hi.\nAnd it needs a string name, and it needs an int age. So now, when I create this little\nfunction stub up here, or this function signature, I'm basically declaring the function and I\ncan give it a value down here. And now c++ is going to be able to call it because it's\ngoing to have some information about it. So when I run my program, now, we're able to\ncall it No problem. So that's kind of just how we can do that with functions. And really,\nyou can create as many functions as you want. In fact, a good program will have lots and\nlots and lots of functions. And the next tutorial, I'm going to show you guys how we can actually\nget information back from functions using the return keyword. In this tutorial, I want\nto talk to you guys about returns in c++. So when I'm talking about returns, I'm talking\nabout returns from functions. So in c++, we can write functions which are basically like\nlittle containers that store a bunch of code that performs a specific task. And with those\nfunctions, we can call them and we can also pass them information. So I can give them\nall sorts of like parameters and different information that they can use to perform their\ntask better. But in addition to giving functions, information functions can actually give us\nback some information. So when I call a function, not only can I give it parameters, but that\nfunction can give information back to me. Now I'm going to show you guys how we can\nuse this and how we can use the return keyword in c++. So why don't we create a function\nup here, and I actually want to create a function that's going to cube a number. So when I cube\na number, I'm basically taking it to the third power. So if I was to say like, two cubed,\nit's basically just two raised to the third power, or it's just going to be two times\ntwo times two, right? That's what cubing a number does. So why don't we create a c++\nfunction that's going to cube a number. Now when we create a function in c++, the first\nthing that we have to do is declare something called a return type. And a return type basically\ntells c++ what type of value or what data type, this function is going to return. Now\nin the last tutorial, if you're following along with the course, we just put void here.\nAnd void basically meant that our function wasn't going to return any information. In\nthis tutorial, though, we definitely want to return some information. So you can put\nany of the generic c++ types here, you can put like int, double, you put character, you\nput string, essentially, any of those values can go here. In our case, we're going to cube\na number. So why don't we just make it a double. And I'm going to say double. And now we need\nto give this a name. So I'm just going to call it cube. And we're going to take one\nparameter into this function. So why don't we take a double, and we'll just call it num.\nNow, inside of this function, all we want to do is cube the number and then return the\nresult that we get. So I'm actually going to create a double, I'm going to call it result.\nAnd I'm going to set this equal to the cube value of num, so I'm just gonna set it equal\nto num times num, times num. So this is basically me cubing num. So now result has inside of\nit, the result of cubing all these numbers, okay, down here, I want to return the value\nthat's stored inside of results. So I can just say return result. And now this is going\nto tell c++ that we want to return this value stored inside result back to the caller. Now\ndown here in my main function, I can actually call this function so I could say cube and\nI could pass as a double, let's say like 5.0. Right? Now, actually, what's going to happen\nis when we call cube and we pass it this information, it's actually going to get a value back. So\nif I wanted, I could basically say like, double answer is equal to cube 5.0. And now the value\nthat gets returned back from this cube function is going to get stored inside of this answer\nvariable. So let me show you guys, I can say C out, and I'm just gonna print out answer.\nAnd so now when I run my program, what you'll see is, we're going to be printing out the\nresult of cubing, five. And you'll see over here, we get 125. So five times five is 2525,\ntimes five 125. So we are able to cube the number. And you can see here, this is getting\na value back. So I'm able to store the value that gets returned from this function inside\nof this variable. If I wanted, I could also cut out the middleman and I could just print\nout cube 5.0. So let's just paste this bad boy down here. And now it's going to do the\nsame exact thing. So we should get 125. Cool. And actually up here, if we wanted, instead\nof storing num times num times num inside of this result variable, I could instead just\nreturn these guys up here. So we again, we cut out the middleman. And we'll just return\nthat and we should get the same exact answer. So there's also one more thing I want to talk\nto you guys about, which is this return statement, this returned keyword right here. This is\na very special word in c++. And basically whenever we type out this return keyword,\nit's essentially telling c++ that we're done executing the code inside of this function.\nSo if I was to put like a C out here, and I just printed out like hello. When I run\nmy program Now, you'll notice that it's not printing out Hello, even though we're executing\nthat cube function, even though we're executing all that code, it's never printing out Hello.\nThat's because whenever we use this return keyword, it's going to break us out of the\nfunction. So this line of code is actually never going to get executed because it's never\ngoing to get reached. When c++ sees this line is is going to break out and we'll head back\ndown to the main method. So that's essentially what this is doing. And that's sort of the\nbasics of using returns. So like I said, if you didn't want to return a double, you could\nreturn any type of date, I mean a string, you can even return something like an array.\nSo really, you can return anything you want. And then that value will get stored over here.\nIn this tutorial, I'm going to talk to you guys about if statements in c++, an if statement\nis basically a structure that we can use in our code, which will allow our program to\nrespond to different situations. So when one situation occurs, we can do one thing. And\nwhen another situation occurs, we can do another thing, essentially, we're able to check different\nconditions. And when those conditions are true, we can do certain things. And when those\nconditions are false, we can do other things. So I'm going to show you guys exactly how\nthis works down here in our main function, I'm just going to create a couple of different\nthings. So the first thing I'm going to do is create a variable, it's going to be a boolean\nvariable. Remember, a boolean variable stores a true or a false value, so I'm going to create\na Boolean called is male. And I'm going to give this a value initially of true. So we're\nbasically creating this variable izmail, it's storing whether or not someone is male, and\nI'm giving it a value of true. Now I want to show you guys how we can use an if statement.\nAnd an if statement, like I said, allows us to respond to different situations. So what\nI'm going to do is I'm going to be able to write an if statement that will respond to\nthe situation where the user is a male, and the situation where the user is not a male.\nSo what I can do is I can actually say F, I'm going to make an open and close parentheses,\nand then I'm going to make an open and closed curly bracket. Now, inside of this open and\nclose parentheses, I can specify a condition. So I can actually check a condition. And if\nthe condition that I put inside of those open and close parentheses is true, then we're\ngoing to execute the code inside of here. If it's false, then we're going to move on.\nSo over here, we're essentially putting a true or a false value. And that's basically\na condition right? It's a true or false value. So I'm gonna come down here, I'll say if and\nI'm just going to type out his mail. And essentially, what this is saying is if the value stored\ninside of his mail is true, in other words, if the value in here is true, then we're going\nto execute the code that's inside of these curly brackets. So I could say, like C out,\nand I'm just going to type out like you are a male. And now when I run my program, you\nguys, we'll see what happens. So run the program. And you'll see over here, it says you are\na male. And that's because the Boolean is male was true. So the value that was inside\nof this condition, the value inside of the parentheses, which was true, and we executed\nthis code, if I made this false, now, you'll see that this code isn't going to get executed,\nso we're not going to be printing anything out. So because the value inside of this parentheses,\nbecause the condition was false, we're actually not going to execute this code. But let's\nsay that if the person wasn't male, we also wanted to handle that situation, I can use\nanother keyword in C called else so I can type out else just like that. And we're gonna\nmake an open and closed curly bracket. Now, inside of this open and close curly bracket,\nI can put a message that's going to be displayed when this is false. So I'm going to show you\nthis a C out. And I'll say, you are not male, right, so I'm responding to this situation.\nSo now, even though is male is false, when I run my program, it's going to be able to\nrespond to that. So it's just gonna say you are not male. Essentially, what's happening\nhere is, my program is now smart enough to respond to this variable. So if this variable\nis male is true, it can handle that. If it's not true, it can also handle that. And so\nbasically, inside of these parentheses, I specified a condition in our case, it was\na true or false value that was stored inside of this is male variable. So that's kind of\ncool. Now let's up the ante a little bit, I want to show you guys how we can make these\nmore complex. This is a very simple example. But let's say I added in another Boolean,\nso I had another Boolean called is tall. And I'm going to set this equal to true and actually,\nI'm gonna set this equal to true as well. So now in addition to izmail, I also have\nis tall. So let's say that we wanted to check to see if the person was both male. And if\nthey were tall, so down here, what I can do is I can use something called the AND operator\nI could say is male, and is tall. And basically what's happening now is c++ is saying If the\nperson is male, and the person is tall, then we're going to print this out. So I'll just\nsay you are a tall male. So this code, this line of code down here, and any of the code\ninside of these open and closed curly brackets is only going to get executed when is male\nis true, and is tall is true. Essentially, this and operator is allowing me to check\ntwo separate conditions. And both of them have to be true, in order for this line to\nget printed out. So you'll see is male is true and is tall is also true. So now, when\nI run my program, you'll see that it says you are a tall male. Here's the thing, though,\nif I set one of these to false, so if I set his tall to false, this whole condition is\nno longer going to be true. So then we're going to go down here to this else block.\nAnd this should probably say, like, you are not male, or not tall, but we'll just leave\nit like that just for demonstration purposes. Alright, so now it says you are not male,\nright. And obviously, like I said, that message should be different. But the point is that\nthis condition was false, because one of these values up here was false. And that's how we\ncan use this and operator, there's another operator called the OR operator. And that\nis similar to and except only one of these conditions has to be true, in order for the\nwhole thing to be true. So even though his tall is set to false, and his male is set\nto true, this is still going to execute, so it's still gonna say you are a tall male,\nbecause one of them is true. So let's go ahead and run this program. Now, you'll see it says\nyou are a tall male, so it executed the code that was inside this initial if block. And\nthat's because one of them is true. If I set both of these to false now, because we're\nusing the or now it's going to go down to you are not male. So you'll see down here\nit says you are not male. So that's basically how we can use and and how we can use or with\nthe AND operator, we can put two conditions in both of them have to be true for the whole\nthing to be true with the OR operator, only one of the conditions has to be true for the\nwhole thing to be true. And they can both be true as well. And it'll be true. But if\nboth of them are false, then it's going to be false. All right, let's make this even\nmore complex. So so I want to show you guys, another thing we can do, I'm going to bring\nthis back to and so I'm gonna say is male, and is tall. But let's say that we wanted\nto check to see if they were male, and they weren't tall. So if they were like a short\nmale, well, I can actually check another condition. So I can use another keyword. In c++, it's\ncalled else if, and I'm going to make an open and close parentheses and open and close curly\nbracket. And I'm just going to bring this down to a new line. So else if is basically\nsaying, if this condition up here is false, then we're going to come down here, and we're\ngoing to execute this condition. So if this condition appears false, instead of just going\nto else, we're going to come over here, and we're going to check another separate condition.\nSo over here, I want to check to see if they're male, and they're not tall, so they're not\ntall. So I can say, is male, just like before, so I'm saying elsif is male, and is tall.\nBut remember, I want to check to see if they're not tall. And here, I want to introduce you\nguys to another operator, it's called the negation operator, it's basically an exclamation\npoint. And whenever you put this exclamation point before a condition like is tall, it's\ngoing to actually negate that entire condition. So if is tall is true, and we put this negation\noperator over here, it's going to set it equal to false, and vice versa. So essentially,\nwhat I'm saying here is else if is male, and is not tall. That's basically what this is\nsaying. So now, over here, we can just print out, you are a short male, right? Because\nif this code, in other words, if this condition is true, that means they're male, and they're\nnot tall, so they're short male. And there's one more that we can check. So I'm going to\nsay another LSF over here. And there's one more possible scenario with these two variables\nup here, that's when they're tall, but they're not male. So I can say not, is male, and is\ntall. So this would be like, you know, it could be like a tall female or something.\nRight. And so down here, I'm going to go ahead and say C out, and I'll just say you are tall,\nbut not male. Right. So essentially, I'm just printing that out onto the screen. So now\nwe have all of these different situations covered. So over here in this if else block\nwhich is what we would call this and actually down here in this else block, we would want\nto change this. So this is going to be you are not male and not tall. So that's just\nyou know semantically going to Correct. All right, so we're able to respond to every possible\ncombination of these two variables up here. So let's try this out, I'm going to set both\nof these equal to true. And now I'm going to run my program. So they're both equal to\ntrue. So our program will be able to respond to that situation, who see it says you are\na tall male, awesome, that was able to respond to that, let's set his male equal to false.\nSo now we have izmail false and is tall, true, our program, once again, is going to be able\nto handle that. So it's gonna say you are tall, but not male. So the program is smart\nenough now to be able to tell us what we are depending on the value of these variables.\nLet's try another one. So we'll set is male to true and is tall to false. And again, it's\ngoing to be able to respond. So it will say you are a short male. And then finally, we'll\nset them both false. And we should get the answer which is going to be you're not male,\nand not tall. Awesome. So we were able to figure this out just by using all this stuff.\nSo let me walk you guys through this one more time, we have this if statement, and it's\nchecking if they're male. And if they're tall. Now, these are both conditions, right? So\nI'm checking this is Gmail, this is a condition, essentially, it's a true or false value, right?\nAnd then I'm checking is tall. And if both of these are true, then we'll execute the\ncode inside of here. If this is false, then we'll come down here and we'll check this\nother condition. And we're going to keep doing that. And so we get down here, and we figured\nout okay, they're not male, and they're not tall. So that's the basics of if statements.\nAnd really, this is just scratching the surface of if statements, I talk to you guys about\na lot of the different things we can do. But there's one more thing I want to talk to you\nguys about in the next tutorial, which are called comparisons. And down here, we're using\nthese Boolean variables in order to get our conditions right, so I'm using these, and\nthese are either going to be true or false, right. But we can also use something called\ncomparisons. And with comparisons, we can check to see if different values relate to\neach other in different ways. So I could check to see if like a number is greater than another\nnumber or something. And we can use those comparisons as our conditions. And that's\nbeen pretty cool. So stick around for the next tutorial. And I'll talk to you guys more\nabout these if statements. In this tutorial, I'm going to talk to you guys some more about\nif statements more specifically, we're going to be looking at using comparisons inside\nof our if statement condition. So this would be kind of cool. In this tutorial, I want\nto create a function, so we're going to write a function, and it's going to basically tell\nus the max of two numbers. So this function will take as parameters, two numbers, and\nthen will basically return whichever number is the largest. And this is a great example\nof how we can use comparisons with if statements. So over here, I have my main function. And\nup here, I'm going to create another function. And let's just say it's going to return an\ninteger, and I'm just going to call it get max. And we'll make an open and close parentheses\nand open and close curly bracket. So inside of this function, we're going to take two\nparameters, one is going to be an integer, and we'll get another integer. So essentially,\nwe're going to take two integers as parameters as input. And the goal will be to figure out\nwhich of the integers is the biggest, and return that back to the caller. First thing\nI want to do is just create a variable called result. And I'm not going to give this value\nright away. But eventually, at the end of this function, we're going to return results.\nSo whatever we do in here, we have to store whichever of these is bigger inside of this\nresult variable. So this should be kind of interesting. Now, we need to figure out which\nis bigger. So we can use an if statement to do that. So I'm just going to say F, open\nand close parentheses and an open and close curly bracket. Now, inside of this parentheses,\nwe need to put a condition. In other words, we need to put a true or false value, right?\nIf the value is true, then we'll execute whatever's down here. If the value is false, then we'll\njust move on. Here's the thing though. In the last tutorial, when we were learning about\nif statements, we were using Boolean, right, and a Boolean is a true or false value. So\nit's really easy, right? You just throw it in there, and it's true, or its false. And\nyou can just kind of do the if statement. But in a lot of cases, we're not going to\nhave any Boolean information available to us. So it's not going to be as easy as just\nlike throwing a Boolean in there. All the only information that we have are these two\nnumbers. So how can we create like a true or a false value using just those two numbers?\nWell, what we can do is we can use a comparison. So if I want to figure out which of these\nnumbers is bigger, I can just compare them right so over here inside of this if condition\nI can basically just say if num one is greater than num two, if num one is greater than num\ntwo, then we can just set result equal to num one. And the reason I'm doing that is\nbecause we know for a fact That if this condition, if this comparison is true, the num one is\nthe bigger. So you can see this comparison num, one greater than num two, it's actually\ngoing to get resolved down to a true or a false value. Right? num. One is either greater\nthan num two, or it's not technically, this is going to be a boolean value, right? Once\nyou evaluate the comparison, once we figured out if it's true or not, it's going to be\na true or false value, right? So I can basically check to see if num one is greater than num\ntwo, and if it is, was that result equal to num one. And we can just say else, and we'll\nset result equal to num two, right. And the reason we're saying this down here is because\nof this condition is false. If num one isn't bigger than num two, then we know that num\ntwo is the bigger of the two numbers, or in certain circumstances, the numbers might be\nequal, but it's still going to work anyway. So down here, we're going to return the result.\nSo let's go ahead and test this function. I'm just gonna come down here. And why don't\nwe print out the answer. So I'm just gonna say get max. And we'll throw like a two and\na five in there, right? So pass in a two and a five. And now when we run this program,\nhopefully we should get that five back. So I'm gonna run the program. And Yep, over here,\nwe get our five. So that's working perfectly. So this is basically how we can use comparisons\ninside of these if statement conditions, right? Technically, this comparison is going to get\nresolved down to a boolean value, it's going to get resolved down to a true or false, like\neither the comparisons true or it's not right. And that's kind of interesting. So that's\nsort of the basics. And in addition to using greater than we could also use less than,\nwe could use less than or equal to, we could use greater than or equal to, we can use equal\nto and equal to is a double equal. So when we use the equal sign down here, we're using\nit for assignment. So I'm assigning the variable result the value stored inside num one. When\nI use this double equals, it's a comparison operator. So I'm comparing the value of num\none with the value of num two. And again, that's either going to be true or false, right?\nThey're either going to have the same value or they're not. And then the last one we can\nuse is a not equals and not equals does exactly what you think it does. This whole thing is\ngoing to be true if num one is not equal to num, two. So those are sort of the basics.\nNow let's make this a little bit more complex. So this get max function takes two integers.\nWhat if we had it take three, so let's say int, num, three. Now all the sudden, instead\nof just comparing two numbers, we have to figure out which is bigger among the three\nnumbers. And this is going to make our if statement a lot more complicated. So why don't\nwe just start over. And I'll show you guys how we can do this. So inside of this comparison,\nI need to check to see if num one is bigger than num two, just like we did last time.\nBut I also need to check and see if num one is bigger than num three. If no one's bigger\nthan num two, and it's bigger than num three, then we know it's the biggest. So let's start\nthere. I'm just gonna say if num one. And instead of just saying greater than I'm gonna\nuse a greater than equals right, because there is that chance where they're all the same\nnumber in which case this will cover that. So we can say if num one is greater than or\nequal to num two. And so I'm going to use this and operator and this is going to allow\nme to check another condition. So I can say num one is greater than or equal to num three.\nSo now if num one is greater than or equal to num two and is greater than or equal to\nnum, three, than we know num, that one's the biggest. So I'm going to set result equal\nto num one. Now down here, we need to check another condition. So I'm gonna say else if\nand we basically want to check to see if num two is greater than or equal to num one. And\nnum two is greater than or equal to num three. And if this is the case, in other words, we're\ngoing to check this condition if this condition of here is false. So this condition is false.\nWe know that num one's not the biggest, right. But if this condition is true down here, then\nwe know number two is the biggest. So we'll say result is equal to num two. Now all we\nhave to do is just say else. And down here we can just say result is equal to num three.\nBecause if this condition is false, that means num one's not the biggest. If this condition\nis also false, that means num twos not the biggest. So if num one's not the biggest and\nnum twos, not the biggest, then num three must be the biggest. So we're going to default\nto this value. Alright, so that is the if else block that we need. And you see I'm using\na bunch of different stuff here. So not only am I using this and operator, I'm also using\nthese comparison operators and that's what these guys are called. So let's go ahead and\ntest our little function out. So now instead of saying two parameters, we need to pass\nin three So in the past one to five and 10, and we should get 10 back, which we do, if\nwe wanted, we could test out each of the positions. So for example, I could test out, we'll make\nthis one the biggest now the second one. And we'll see if it works. And it does. And we'll\nmake this one the biggest now, and we'll see if it works. And it does cool. And then also\nthere was that condition where like two of them were the same. So let's try this were\ntwo of these guys are going to be the same. And we're on the program. And yeah, so it's\nstill going to be able to return 200. So there is our max function. And hopefully this gives\nyou guys a little introduction into using comparisons. Now we can compare all different\ntypes of data. So using these comparison operators, we can compare integers, we can also compare\nlike doubles and floats, and we can compare characters. So you can compare all those guys\njust by using all that stuff in there. In this tutorial, I'm going to show you guys\nhow to build a four function calculator in c++. Now, if you've been following along with\nthis course, you'll know that in the beginning of the course, we created a very simple calculator.\nAnd basically, that calculator was able to take in two numbers as input, and added them\ntogether and printed out the answer. But in this tutorial, now we've learned a little\nbit more in the c++ language, we're going to build a more complex calculator. So this\ncalculator is going to allow the user to enter in two numbers, but it's also going to allow\nthe user to specify which operation they want to perform. So they can specify that they\nwant to add the numbers and multiply the numbers, divide them, multiply them, whatever. So it's\nessentially going to be a more powerful calculator. So down here, inside of my main function,\nI want to start writing the code for this. And the first thing I'm going to do is create\na few variables. So I want to create a couple variables. And why don't we just create these\nas and you could also make these doubles, if you wanted. We'll just call them num one\nand node two. And these are going to represent the two numbers that we want to perform the\noperation on. And then down here, we're also going to want to create a character. And I'm\ngoing to call it Opie for operators. So we're going to throw the two numbers here. And we're\ngoing to sort of the operator here. So it's either going to be plus or minus division,\nor multiplication. Alright, so now that we've created those two variables, we want to start\nwriting the code to get the input from the user. The first thing that we want to do is\nprint out a prompt, so I'm just going to say C out. And I'll basically just print out enter\nfirst number, so we'll prompt them to enter in the first number. And then down here, we're\ngoing to use C in and remember you want to these, these two greater than signs. And we\nwant to store the user's input inside of num one, just like that. Okay, cool. So now that\nwe got num, one, I'm actually just going to copy this code, and then down here, we can\npaste it two more times. So down here, we're going to ask them for the operator. So I'll\nsay enter, operator, and we're going to store the operator inside of that Opie variable\njust like that. And then finally, we're going to enter in the second number, and we'll store\nit inside of num two. So basically, what I'm doing is I'm prompting the user for all of\nthe information that we need. So we're going to get that first number, we're going to get\nthe operator and then we're going to get the second number. So they'd give me like five\nplus two, or six divided by seven or something like that. Alright, so now that we have all\nof that information, we have one more thing that we need to do, which is we need to figure\nout what the user wants to do. Right over here, we have the operator. So ideally, they\nwould have entered in like a plus sign a minus sign, whatever, but we don't know what exactly\nthey entered in like we don't we have no idea what what they were going to enter in. So\nwe need to figure that out. And this is a perfect scenario for an if statement. So I'm\ngoing to use an if statement. And I'll show you guys how we can check this. So I'm just\ngonna say if. And we need to put a condition in here. So basically, what we want to do\nis want to figure out what that operator is. So the first thing I'm gonna do is just check\nto see if the operator is equal to a plus sign. Right? So if the operator is equal to\na plus sign, then we're basically just going to print out the result of adding the two\nnumbers together. So why don't we come up here, and I'm going to create an integer called\nresult. And then down here, we'll set result equal to num, one plus num, two. And we know\nthat we want to add them because if this condition is true, then we're going to execute this\ncode. So now let's do an ls F. And down here, I basically just want to check to see if it's\na minus sign. So I'll say if Opie is equal to a minus sign, and if it is equal to a minus\nsign, then we can do exactly what we did up there. But we can subtract the two numbers.\nSo I'll say num, one minus num, two. Alright, so we can do the same thing for multiplication\nand division. So I'm actually just going to copy this else if, and I'll paste it down\nhere. And now we'll say okay, is equal to forward slash, that means division. And then\none more time, we're going to do this for multiplication. So use this Asterix, and then\nhere we're going to multiply the two numbers. So now we're basically covering all of the\noperators. So they enter in a plus sign, and we got that covered minus sign, division sign\nand multiplication sign, right, we can cover all of those standard scenarios, but there's\nalways the chance that the user entered in an invalid operator. So instead of entering\nin one of these, they just entered in some like, you know, random character, in which\ncase, I'm going to use an else block over here. And this LS block is going to get executed\nwhenever none of these conditions are true. So if none of the conditions are true, then\nwe know they entered an invalid operator. So I'm just going to go ahead and print that\nout, I'm going to say C out. And we'll just print out invalid operator. Alright, so basically,\nby the end of this, if block, we should have a value stored inside of result. So down here,\nwe'll just going to print it out. So I'll just say C out, and we'll print out result.\nAlright, so let's see if our program works. I'm going to go ahead and run the program.\nAnd it says enter first numbers, why don't we insert a five? Enter operator, let's enter\na plus sign and second number. Why don't we do 30. So now when I click enter, hopefully\nour if statements going to execute, we'll be able to figure out which operation I was\ntrying to do, and then we'll be able to perform it correctly. So you see down here, we printed\nout 35. So it looks like everything worked. So why don't we try a couple other ones. Let's\ndo like 50 divided by five. So down here, we get 10. Yes, it looks like that's working.\nAlright, let's check one more thing, let's check to see if we enter an invalid operator.\nSo I'm gonna put like a five, we'll enter the operator, let's make it like a capital\nG, and then put a nine for the second number. And you'll see down here it prints out invalid\noperator. And then we're also getting this other little printout here. And actually,\nthat's just because we didn't give results we didn't give result in initial value. Alright,\nso that's basically our four function calculator, you guys can see how we can combine getting\ninput from the user, then we can use these if statements to basically figure out what\nthe user input and that can be extremely powerful. And this tutorial, I'm going to talk to you\nguys about using switch statements in c++. Now a switch statement is basically a special\ntype of if statement, which allows us to check one particular value against a bunch of other\nvalues. So this is a very special use case, when we're trying to compare different things.\nSo I'm gonna talk to you guys about what switch statements are. And we'll do an example which\nare kind of illustrate what they're doing. So in my program, In this tutorial, I actually\nwant to create a little function, which is going to be able to convert a number into\nthe day of a week. So basically, if the user passed in a zero to this function, I'd want\nto be able to print out like Sunday, or if the user passed in a one, I'd want to be able\nto print out Monday, etc. So I want the function to be able to convert an integer number to\na day of the week, just like that. So I'm gonna show you guys how we can do this inside\nof our c++ program. So I'm going to create my function, and we're basically just going\nto have it return a string. And I'm just going to call it get day of a week, just like that.\nAnd I'm going to make an open and close parentheses. And this is going to take one parameter, which\nis going to be an integer. And we'll just call it day num. So this is going to be the\nnumber of the day of the week. So like zero through six, basically. Alright, so inside\nof our little function, now, we need to figure out how we can do this. So depending on the\nday of the week, in other words, depending on the day num, that they give us, we want\nto be able to return a different value. So the first thing I'll do is I'm going to create\na variable. And it's just going to be a string, and I'm just going to call it day name. So\nthis will be like this will end up storing the name of the day that they requested. And\nthen down here to the end of this function, we're going to return it. So I'm just going\nto say return day name. So now we know what we're going to end up returning. So our goal\ninside of this function now is to populate this day name variable with the correct day\nof the week. So let's think about this. I mean, one way that we can build this function\nis by using an if statement. So I can say like, if day num is equal to zero, and if\nday num is equal to zero, then I can say day name is equal to Sunday, right? That works.\nAnd then I can just keep doing this for every day of the week. So I can say like, else if\nand again, I have to check to see if day num is equal to something else. So day num is\nequal to one and then down here we'll do the same exact thing. So we Ad name is equal to\nMonday, right? I can keep doing this for every single day of the week. Here's the problem,\nthough, I'm gonna have to do this like seven times, right? Potentially eight times, if\nwe want to check for an invalid input. So I'm going to have to create eight of these\ndifferent if else structures in order to figure this out. And that is extremely inefficient.\nAnd actually, this is a perfect circumstance for us to use something called a switch statement.\nNow a switch statement essentially takes what we're doing over here with these if else statements,\nand it makes it a lot easier. So one thing I want you guys to notice is in every single\none of these conditions, in other words, in every single one of these, if conditions,\nwe're checking to see if the same value, day num is equal to a different value. So in here,\nwe're saying Dana is equal to zero. Here, we're saying Dana equal to one and the next\none, it would be Dana equal to two, then Dana equal to three, all of those conditions are\nchecking to see if daenam is equal to something else. And when you have a situation like that,\nit's a perfect candidate for a switch statement. So I'm going to show you guys how we can use\na switch statement to make this a lot easier. So I'm just going to write out switch and\nopen and close parentheses and an open and close curly brackets. So so far, it looks\na lot like an if statement, up here in these opening, close parentheses, I'm going to put\nin a value. And we're basically going to put the value in here that we want to compare\nto all those different values. So in my case, it's going to be daenam. Right, I'm comparing\ndaenam to 0123456, excetera, right? daenam is the value that I want to compare to all\nthe different values. Now inside of this switch statement, I can write cases. And basically\nI can say case, and then I can just put a value in here. So I can say zero and a colon.\nAnd then down here, I can basically type out what I want to happen. So I could say day\nname is equal to Sunday. Now essentially, what this is doing is it's saying in the case,\nthat day, num is equal to zero, we want to set day name equal to Sunday. And then right\nbelow here, I'm just going to say break. And I'll explain what break does in a second.\nBut I can basically make one of these cases for every single number. So I could say like,\ncase one. So in the case, the day num is equal to one, I'm going to set day name equal to\nMonday. And then again, I'm just going to say break. And then I can keep doing this\nfor 23456, etc. Right. So what this break is doing down here, this break statement is\nessentially breaking us out of the switch statement. So if I don't put this break statement\nhere, c++ is actually just going to keep looking through all these cases. So even if daenam\nis equal to zero, and it sets it equal to Sunday, it's still going to keep going and\nchecking all these different values and less I say break right here. And generally, it's\na good idea to say break unless you want to be able to check for more than one condition,\nwe're basically saying in the case, the day num is equal to zero, we're going to do all\nthe code down here. And I'm actually going to make one of these for each day of the week.\nSo I'm going to go off and do that. And then we'll meet back here, and I'll kind of show\nyou guys what I have. Alright, so I went ahead and made one of these little case blocks for\nevery day of the week. So you can see down here we have zero through six. And they're\nall corresponding with the appropriate day. So in case three, day name is Wednesday, etc,\nright, so everything seems to be working. Now there's one more thing that we have to\ndo in this switch statement. So down here, there's always the chance that the user enters\nin an invalid day of the week. So in other words, if the user doesn't enter zero through\nsix, then we want to be able to handle that. In other words, I want to be able to handle\nthe situation where the number that they entered isn't in here. And inside of a switch statement,\nwe have a special little block, which is called default. So we can just say default, a colon,\nand then down here, this code is going to get executed, if none of the cases up here\nare true. So if the number isn't equal to any of these numbers up here, then this code\ninside the default block will get executed. So down here, I could just say, day name is\nequal to invalid day number. Alright, so now we have our switch statement set up. And you\ncan see how this is a lot cleaner than something like an if statement. So this is a lot clearer\nwhat's going on, we don't have to type out LSF like 1000 times, we don't need all those\nparentheses and all that stuff. Basically, it's just really clear, it's really easy to\nvisualize what's going on. Alright, so let's see if our get day the week function is working.\nI'm going to go in here and we're actually going to print out the value. So I'll say\nC out. And we'll call this so I'll say get day of week and we need to pass this an integer.\nSo why don't we pass it zero. And hopefully we should get printed out here Monday. Or\nSunday. Whoops. Yeah. So over here Sunday, so Sunday would be the first day of the week.\nLet's try. Let's see if we can get Monday. So I'm going to put one here instead of zero.\nAnd now we should get Monday. Yeah. Awesome. All right, let's try one more, we'll try six.\nSo six is going to be Saturday. And let's see if it works. Cool. So Saturday worked\nas well. Alright, there's one more situation, which is where we pass in an invalid number.\nSo if I pass in like a 10 here, now we'll be able to see that this isn't going to work.\nSo it should tell us invalid day number. Awesome. So this is a pretty cool function. And it's\nworking. And you can see how we can use these case statements. In order to make this a lot\neasier. Now, here's the thing, I could have easily done this with an if statement, nothing\nis stopping me from doing that. But it's a lot easier to use something like a switch\nstatement. And that's why c++ included it in the language. In this tutorial, I'm going\nto show you guys how to use while loops in c++. Now a while loop is basically just a\nprogramming structure that allows us to loop through a block of code, while a certain condition\nis true. So with this tutorial, we're starting into something called loops. And loops are\nextremely useful. And there's a lot of situations in our programs, specifically in c++, where\nwe're going to want to be able to loop over code and do things a bunch of times. So I'm\ngonna introduce you guys to the most basic type of loop, which is a while loop. And we'll\nsort of see what it does and see how it works. Alright, so down here, the first thing I'm\ngoing to do before I create my while loop is I'm actually just going to create an integer.\nAnd I'm just going to call it index, and I'm going to set it equal to one. So this isn't\n100% necessary when you're creating while loops. We're just going to use this in our\nexample in this tutorial. Now, when I want to create a while loop, I can basically just\nsay, while I can make an open and close parentheses, and an open and closed, curly bracket, and\nthis is sort of like the main structure, the main outline for a while loop. Now here's\nwhat's going to happen. Okay, over here, inside of these parentheses, I'm going to specify\na condition. Now, if you remember, learning about if statements in c++, this is essentially\nwhat we're doing here. So in here, we're putting a condition just like we would an if statement.\nAnd as long as this condition is true, I'm going to loop over and continually execute\nall of the code that's inside of these curly brackets, as you'll see in a second, we're\ngoing to put a bunch of code inside of these curly brackets. And as long as the condition\nup here is true, we're going to keep looping through that code. And every single time we\nloop through that code, we're going to check this condition. So let me just show you guys\nthis, and we can kind of get a feel for what's going on. So up here in these parentheses,\nI can basically just write a condition. So what I want to do is I'm going to say while\nindex is less than or equal to five, so this is now my condition, while index is less than\nor equal to five, I'm going to execute the code inside of this loop. So I'm going to\nexecute the code inside of these curly brackets. So down here, what I want to do is I basically\nwant to print out the value of index. So I'm just going to say, C out index. And then I'm\nalso going to say and so we print out a new line. And then down here, I'm going to increment\nthe index, so I'm just gonna say index plus plus. So you remember index plus, plus just\nadd one two, index essentially. Alright, so what I'm doing is I'm specifying my condition,\nwhile index is less than or equal to five, I want to execute all of this code. So I'm\ngoing to run my program. And maybe you can sort of see already what this is going to\ndo. But if not, we're going to run it and we're going to take a look at what's happening.\nSo you see over here, when I ran my program, we basically got 12345. Here's what's happening\nover here, I created this variable called index, I set it equal to one and I basically\ntold c++ that while index is less than or equal to five, I want to keep looping over\nthis code. So basically, what happened was the first time we went through, we checked\nthis condition, so we check to see if index is less than or equal to five. Since that\nwas true. In other words, since index was one on the first iteration of the loop, we\nexecuted this code, so we printed out one, and then we incremented index, so index was\nnow equal to two, then we came all the way back up here and we check this condition again.\nSo we check to see if index is less than or equal to five. In this case, index is equal\nto so the conditions true index is less than or equal to five. So we're going to execute\nall of the code inside of here again, so we printed out two, and then we incremented to\nup to three, and then we came back up, we checked the condition again, every single\ntime we go through the loop, we check that condition. So before we execute the loop,\nwe execute that condition, we go back and check it again and execute the code again.\nEventually, we got to the point where index was equal to six. So we came up here to check\nthis condition and six is not less than or equal to five. So Then we just came down,\nwe broke out of the while loop, and everyone was happy. So that's essentially what we did.\nAnd that's what a loop is basically you specify a condition, as long as that condition is\ntrue, then you're good to go. And we can pretty much just keep looping through all the code\nin there. And there are tons of situations where using loops is gonna come in handy.\nAnd in the next tutorial, we're actually going to build a little game where we can use a\nwhile loop. But before we do that, I want to talk to you guys about a couple more things\nwith these loops. The first thing you need to watch out for when you're using these loops\nis something called an infinite loop. an infinite loop is a situation where this condition up\nhere never becomes false. So in certain circumstances, like the condition that you specify up here\nwon't become false ever. And then your loop will just continually loop through. So for\nexample, if I was to get rid of this line of code right here, where we're incrementing\nindex, now the index is always going to be one. And so this condition up here is never\ngoing to be false. So when I run my code, you'll see over here that we're just continually\nprinting out one, you can see the screen keeps flashing, really what's happening is we're\njust looping, looping, looping, looping through that while loop, and it's never going to stop\nme I can leave this on for years. And it's never going to stop, right because that condition\nis never going to be false. So you always want to make sure that any conditions that\nyou write with these, while loops at some point are going to become false. Now, there\nare certain circumstances where you're going to want a while loop. But I would say for\nthe most part, while loops aren't going to be necessary. And they can actually be dangerous,\nespecially if you're doing something where you're like creating variables or allocating\nmemory, like you can end up crashing your program or even crashing your computer if\nyou're not careful. So that's just a little tip about infinite loops. There's one more\ntype of loop that I can show you in this tutorial. And it's a different type of while loops,\nkind of like a different flavor of while loop. But before I show you that, I just want to\nshow you a demonstration. So if I make this int index equal to six, when I run my program,\nthe code inside of the while loop is never going to execute. And that's because before\nwe loop through all of this code, we check this condition first. So before I'm allowed\nto execute any of this code, I check the condition up here in these parentheses. So I check to\nsee if index is less than or equal to five, since index is starting out at six. We're\nnever ever going to execute this code, right. So if I ran my program, you guys will see\nnothing gets printed out, right. So we didn't do anything. But there's another type of loop,\nwhich is called a do while loop. And I want to show you guys how we can make one, I'm\njust going to cut this and I'm going to paste it down here. And I need to include a semi\ncolon. And then up here where that while used to be I'm just gonna say do and this is what's\ncalled a do while loop. And a while loop is essentially just a normal while loop, but\nit's reversed. So instead of checking the condition, and then executing the code, we're\ngoing to execute the code, and then we're going to check the condition. So it's just\nsort of like the while loop reversed. So now even though index is equal to six, I'm still\ngoing to be able to execute this code first, then we're going to check the condition and\nit's not going to let me do it again. So let me show you guys what happens when I run this.\nAnd you'll see over here, we're able to print out that six. That's because with the do while\nloop, you execute the code in the loop before you check the condition. And there's a bunch\nof different situations where you can use while loops or do while loops. And to be honest\nwith you everything that you can do with a do while loop you can do with a normal while\nloop. So do our loops aren't technically necessary. But in a lot of circumstances, they are useful.\nSo that's why they're included in the language B I mean, that's a basic overview of loops.\nThere's actually another type of loop that we can talk about in a future tutorial called\nfor loops. But for now, you know, practice with these wild loops, you can kind of see\nlike how they work. In this tutorial, I'm going to show you how to build a little guessing\ngame in c++. And this is going to be cool because we're actually going to be able to\nuse some of the stuff that we've been learning up to this point in the course. So we'll use\nthings like while loops, if statements, we'll use variables, we use all sorts of stuff in\norder to build this game. So essentially, how this is going to go is the user is going\nto try to guess a secret number, right? So I'm gonna have a secret number stored here\nin my program. And the user's job will be to try and guess what that number is. So the\nconcept of the game is pretty simple. And as you'll see in a second, it's actually pretty\nsimple to program something like this. But here's the one caveat is if the user doesn't\nget the guests right on the first try, I want to keep asking them keep prompting them to\nenter in another guest. So I'm going to show you guys how we can do this. So the first\nthing I want to do is create our secret number. So I'm just going to make an integer and I'm\njust going to call it secret num. I'm just going to set this equal to I don't know, let's\nsay seven. So seven is going to be our secret number. And then the next thing I want to\ndo is create another integer which we're gonna call guests, and we're not going to give guests\na value right up front. So now we have our secret number, and we have our guests. And\nwe want to be able to keep asking the user to guess what the secret number is until they\nget it right. So whenever something needs to be done continually, that's usually a good\nsign that we want to use a while loop. So I'm going to go ahead and say, while when\nmake an open and close parentheses, and I'm gonna make an open and close curly bracket.\nSo inside of this while loop, we want to continually ask the user to enter in the number until\nthey get it right. So what I want to do here is specify a condition. In other words, I\nwant to keep looping Wow, the secret num is not equal to the guests. So as long as the\nguests is not equal to the secret nom, in other words, as long as the user hasn't guessed\ncorrectly, I want to keep going through this loop. Now, every time through the loop, I\nwant to prompt the user to input a number. So I'm just going to say C out. And we'll\nbasically just say, enter guests, so they're going to enter the number that they want to\nguess. And then down here, we want to be able to get that answer, we want to store it in\na variable. So I'm just gonna say C n, two greater than signs. And I'm just gonna put\nguests here. So basically, what we're telling see is that we want to take whatever the user\nenters, store it inside of the guest. So basically, every time we go through this loop, the user\nis going to be guessing, and then we're going to check their guests against the secret num.\nIf they got the secret num, right, then we'll just break out of the loop. So down here,\nif they end up getting out of the loop, that means they got the guest right, so I can just\nprint out, you win, so we'll give them a success message. Alright, so this is essentially all\nwe need to build our guessing game. So I'm going to go ahead and run this program, and\nwe'll see how we did. Alright, so it says enter guests, so I'm just going to enter in\nsome numbers. So you can see I entered in a three, that wasn't the secret number, so\nI can keep entering in different guesses. And no matter how many times I guess, it's\ngonna keep asking me to guess until I get it right. Now let's try to get the guests\nRight, so the secret number was a seven. So when I enter a seven in now, all the sudden\nthe condition that was in that while loop is going to be false. So the secret num is\ngoing to be equal to the user's guess. And we'll break out of the while loop. And it's\ngoing to say you win. So that's essentially how we can build our little guessing game.\nNow I will say down here, I created this game using a while loop, right. But there's actually\nanother way that we can build this using a do while loop. So your homework for this tutorial\nis to go off and see if you can do this using a do while loop instead of just a normal while\nloop. Alright, so here's the thing, this is actually a pretty fun game, and it works out\nwe were able to program it really easily. But the game is a little bit unfair. It's\nunfair in the sense that the user gets essentially unlimited guesses. So they can guess as many\ntimes as they want. And honestly, that doesn't seem fair. So what we could do is we can impose\nsome sort of a guess limit. So I can say, hey, the user is only able to guess like three\ntimes and then they lose the game, right. So I'm going to go ahead and show you guys\nhow we can actually program something like that, we're going to need to add in a couple\nextra variables, the first variable I'm going to add in is going to be called guest count.\nAnd this variable is basically just going to keep track of how many times the user has\ntried to guess the secret numbers. So every time the user guesses the secret number, we\nwant to increment the guest count. And I'm actually going to set this equal to zero initially,\nbecause the user will have guessed zero times, then down here, every time the user guesses,\nI'm going to increment the guest count. So I'm just gonna say, guest count, plus plus.\nSo now we're basically able to keep track of how many times the user has tried to guess\nthe secret number. All right, we're gonna make another variable over here. And I basically\njust want to call this gas limit. And guess limit is going to specify how many times the\nuser is able to guess until they lose. So why don't we set this equal to 30. So we'll\nsay that the user gets three guesses, they can't get the word and three guesses, then\nthey're going to lose the game. Alright. And then one more thing, we want to create another\nvariable, which is going to be a Boolean, and this is going to be called out of guesses.\nAnd I'm going to set this equal to false initially. So out of guesses will tell us whether or\nnot the user has any guesses left. If out of guesses is false. That means the user has\nguesses left, right? Because they're not out of guesses. If it's true, it means they don't\nhave any guesses left, because they ran out of guesses. Alright, so now that we have these\nvariables, I want to show you guys how we can modify this a while loop. So down here,\nevery time we go through this while loop, you'll see that we're letting the user guessed\nthe number. But here's the problem. If the user doesn't have any guesses left, then we\ndon't want them to be able to guess the number. Right? In other words, if they've reached\nthe guessed limit, we don't want to give them another guess. So what I can do here is I\ncan actually use an if statement and what I'm going to say is if guest count is less\nthan guest limit. So if the guest count is less than the guest limit, then I'm going\nto let them guess, right? Because if this condition is true up here, that means that\nthey still have some guesses left, right? They haven't reached the guests limit. So\nthen they're going to be able to guess what increment the guest count, etc. Otherwise,\nthough, if the guest count isn't less than the guest limit, that means that they ran\nout of guesses, right, so what I want to do is I want to toggle this Boolean. So basically,\nI want to say out of guesses is equal to true. So I'm telling my program that they ran out\nof guesses. Alright, so once we've set this equal to true now, we're basically done inside\nof this while loop, right? So every time we go through, we're checking to see if they\nhave any guesses left. If they do, then we let them guess. Otherwise, we tell our program\nthat they're out of guesses. There's one more thing that we have to do to this while loop\nwhich is modify the condition. And up here in this while loop condition, we can use this\nand operator. And this and operator will allow me to put two conditions inside of there.\nSo I could say while secret num is not equal to guests, and we can check another condition.\nSo what I want to do is I want to check to see if they're out of guesses. So I want to\ncheck to see if out of guesses. And I want to check to see if they're not out of guesses.\nSo we're going to keep looping as long as they haven't guessed the secret word. And\nthey're not out of guesses, right if one of those becomes false, so if they run out of\nguesses, or if they guessed the secret word, then we're going to break out of the loop.\nSo that's essentially what's happening here. Alright, so one more thing down here below\nthe while loop, we have this C out, and we're just printing out you win. But this isn't\ntechnically correct, because if the user runs out of guesses, then they're going to break\nout of the loop. But they didn't win. So we shouldn't tell them that they won, we should\ntell them that they lost. So what I'm going to do is make another if statement. And I'm\ngoing to check to see if out of guesses. So if out of guesses is equal to true, then I\njust want to print out a you lose message. And otherwise, if it's not equal to true in\nother words, if they had guesses left, that means that they want so that means they guess\nthe secret word. Alright, so let's go ahead and run this program. And we'll see how we\ndid. Alright, so down here, it says enter a guest. So why don't we try to lose the game.\nSo I'm just gonna say three, four, and two. So this is our last guest. If we don't get\nit on this try, that means that we lose. So you lose, right? So we lost the game. Alright,\nso looks like it's working. So now instead of being able to guess infinite times, we\ncan only guess three times. Let's see if we can win the game now. So we're gonna guess\nlike a three, a two. Now we're on our last guests, I'm gonna say seven. And when I enter\nthis, it says you win. So we were able to win the game, as well. So this is sort of\nhow we can use all of these different programming structures together. So you'll see down here,\nnot only that, I use this while loop. And not only did I use all these variables, but\nI also use if and else in combination with all that stuff. And really, this is what real\nprogramming is going to look like, you know, it's not just going to be like little simple\nexamples, it's going to be a little bit messy just like this. Not that this is messy code.\nBut we want to be able to use all of these different programming structures in combination.\nThere's also one more thing I want to tell you guys, which is the way that I wrote this\nlittle algorithm, this little function here, we could have written this like a dozen different\nways. So I could have programmed this game. And you know, I can think of like at least\ntwo or three other ways that I could have done this. And this is another lesson in programming\nis that generally there's going to be like five or six different ways to do the same\nthing. So I could have done this with a do while loop, I could have used different things\nI could have used like a break statement or something else. And so that's one of the cool\nthings about being a programmer is it's going in and trying different ways to do the same\nthing. But that's basically how we can build this guessing game. Hopefully, you guys learned\na little bit about seeing all those different structures like ifs and Wiles, and variables\nand all that stuff used together. In this tutorial, I want to talk to you guys about\nfor loops in c++. a for loop is a special type of loop, which actually allows us to\nkeep track of how many times we've gone through the loop. So in a for loop, we can use something\ncalled an indexing variable. Basically, that indexing variable will allow us to keep track\nof how many times we've gone through the loop. And you can also use the indexing variable\nto do a bunch of other stuff too. So I'm going to show you guys how for loops work, we're\ngoing to look at why they're useful and in what situations you're going to want to use\nthem. So over here, you'll see that I have this basic program set up and essentially\nI just have a while loop over here. So I have this a integer called index and I just set\nit equal to one. And then while index is less than or equal to five, I'm just printing out\nthe value of index. And then I'm incrementing it. So I'm gonna go ahead and run this program,\nyou guys can kind of see what's happening. So you'll see, we're basically just printing\nout 125. So this is a very simple while loop. And if you've been following along with this\ncourse, and you've you know, hopefully you're familiar with what while loops do at this\npoint. But I want you guys to notice a couple things. So this while loop is special, because\nevery time we go through the loop, this variable index tells us what iteration of the loop\nwe're on. So when I run this program, you'll see over here, like the first time we go through\nthe loop, index represents one right index has the value one, the second time we go through\nthe loop index has the value of 2/3, time has the value of three, etc. Right? So this\nindex variable is essentially telling us what iteration of the loop we're currently on.\nRight. In other words, on every iteration of the loop, the value inside of this index\nvariable is changing. So it's in our case, it's incrementing, by one, but the point is,\nis that we have this variable, this index variable, and it's essentially just keeping\ntrack of how many times we've gone through the loop. Now, in c++, and in just about every\nmajor programming language, this is a very, very powerful looping structure. In other\nwords, there's a lot of situations where keeping track of you know how many times we've gone\nthrough the loop, or even just having a variable that's going to change every time we go through\nthe loop is very useful. And in fact, this is such a useful situation, that there's actually\na special loop just to do something like this. So there's a special type of loop whose sole\npurpose is to provide us with a structure very similar to this, where we have this indexing\nvariable that is going to change every time we go through the loop. And in a lot of circumstances,\nit's actually going to represent what iteration of the loop we're currently on. And that's\ncalled a for loop. So I'm going to show you guys how we can build a for loop. And essentially\na for loop is just going to be exactly what we have up here, it's just going to be a lot\nmore compact and a lot easier for us to use. So it's great if we're live, we can just say\nfor making open and close parentheses and open and close curly bracket. So so far, it\nlooks exactly like the while loop. Now the one difference with the for loop is instead\nof only having one thing up here in the parentheses. So in this while loop, we just have our looping\ncondition write, a lot of people call this like a loop guard. Down here in this for loop\nparentheses, we're actually going to have three different things that we want to include.\nSo the first thing that we want to put inside of this for loop parentheses is a variable\ndeclaration variable instantiation. So up here, you'll notice that I'm creating this\nindexing variable called index, and I'm giving it a value of one. So I'm declaring the variable\nand I'm assigning it an initial value, right, I'm initializing the variable. inside of this\nfor loop parentheses, we can do exactly that. So I could actually just copy this line, and\nthen down here, I can just paste this in here. And instead of calling it index, why don't\nwe just call it AI. So AI is gonna stand for index, we'll set it equal to one, then you'll\nnotice I have this semicolon here, after I put this semi colon, we can actually put another\nline. So another thing that we have in this wild looping structure is our loop guard,\nright, this loop condition, it's essentially telling us when we should loop so if this\ncondition up here is true, then we want to keep looping. So that's the next thing that\nwe want to put inside of this for loop parentheses. So we're putting this variable declaration\nand initialization and then down here, we're also going to put the looping condition. So\nthis is going to tell the loop when it should stop and when it should go. Alright, so then\nwhat I'm also going to put another semicolon here. So you'll notice I have a semicolon\nhere, after we create this variable. And I have another semicolon here, after we specify\nthe looping guard. The next thing I want to do is put in a line of code that's going to\nget executed after each iteration of the loop. Up here in this while loop, you'll notice\nthat we have this line of code over here, index plus plus, this line of code is going\nto get executed at the end of every single loop iteration. So the last thing that we're\ngoing to do, when we go through this while loop is increment the index variable, right.\nSo that's essentially what we're going to put over here, we're going to put a line of\ncode, which is going to get executed after every iteration of this loop. And in our case,\nwe're just going to increment this variable i so I'm just going to say i plus plus, we're\nadding one tie. Now again, I can put essentially, any line of code here that I want, I mean,\nI can put like i minus minus, I could do, you know, basically whatever I want, but in\nour case, we're just going to increment i just like we did up here with index. So now\ninside of this for loop body inside of these open and close curly brackets, we can just\nput whatever we want to do on each iteration of the loop. So that's going to be this line\nup here. So I can actually just paste this guy in right here. And now we have a completed\nfor loop. So believe it or not, this loop down here is actually equivalent to this loop\nup here, you'll notice this took 1234 lines of code, whereas this only takes two lines\nof code. So like I said, this is such a common scenario where we want to have a variable\nlike index, which is, you know, essentially changing every time we go through the loop\nand can allow us to keep track of things like the current loop iteration, such a common\nsituation that there's a special loop called a for loop for that. And the for loop, the\nfirst thing we do is create the variable just like I did up there. So I'm initializing this\nvariable. The next thing we do is specify the looping guard the looping conditions,\nthat's what I did here. And then we specify a line of code that's going to get executed\nafter every iteration of the loop, which is going to be this i plus plus. And you'll notice\nthat these are all separated with semi colons. And you'll notice also that I don't need a\nsemicolon over here. So let's actually get rid of this while loop. And I'm going to go\nahead and show you guys what happens when we run the for loop. And actually, I need\nto change these to eyes. So instead of this being index, I'm just gonna leave it as i\nand this is also going to be I, so we have int is equal to one, we're going to keep looping\nas long as i is less than or equal to five. And then at the end, we're just going to increment\nit. So we're gonna say i plus plus. And every time through the loop, we are printing out,\nI so let's go ahead and run this code. And you'll see we get the same exact output as\nwe did with the while loop. So it's just still just 12345. So what's cool about these four\nloops is we can essentially, like keep track of a value every time we go through. And in\nour case, we're basically just keeping track of how many times we've gone through the loop,\nI want to show you guys how we can use these for loops to actually iterate through the\ncontents of an array. So let's say I created an array of integers, so we'll just call it\nlike nums. And I'm just going to give this an initial value. So why don't we just say\n12573. So I have this array of integers. And it just has a bunch of numbers in it. And\nif you recall, with integers, if we wanted to access a specific element inside of this\nlist, I could just say like nums, and then put the index in here. So if I said num zero,\nthis is going to give us access to this one, if I said nums, four, it's going to give us\naccess to 01234, it's going to give us access to this three, what I can actually do is I\ncan modify my for loop down here in order to actually loop through and print out all\nthe contents of this array. So array indexes start at zero, so I'm going to start this\nI variable at zero. And what I'm going to do is I'm basically going to say i is less\nthan the number of elements inside of the array. So inside of this array, we have 12345\nelements. So I'm going to say while i is less than five, we want to keep looping and then\nI'm just going to say i plus plus. And down here, instead of printing out, I could actually\njust print out nums ai. And what this is going to do is on the first iteration of the loop,\nit's going to print out nums zero, on the second iteration of the loop, it's going to\nprint out nums one, on the third iteration of the loop, it's going to print out nums,\ntwo, etc. And it's going to do that all the way up to number four, which as we saw is\ngoing to be this three. So that's going to be the last element in the array. So we can\nactually use this for loop to loop through all the elements in the nums array. So let's\ngo ahead and do that. And you'll see over here, we're printing out all the elements.\nSo we're printing out 12573. So that is a very common situation, we can use for loops\nto iterate over the elements inside of an array. And it can be really useful. So play\naround with these for loops, these are extremely useful. And one more time, I just want to\ngo over the structure. So the first thing we're doing over here is we're creating a\nvariable or we're initializing a variable, so I'm saying int is equal to zero. And then\nI'm specifying my looping guard. So my loop condition, I'm saying we're gonna keep looping\nas long as i is less than five. And then this is a line of code that will get run after\nevery iteration of the loop. So every time we go through this loop, we'll come up here,\nrun this line of code, and then we'll check the condition. Again, that is the basics of\na for loop. This is a very useful loop, I would say this is almost even more widely\nused than a while loop and a lot of situations. So you definitely want to practice and play\naround with these four loops. In this tutorial, I'm gonna show you guys how to build an exponent\nfunction in c++. an exponent function is basically a function that will take a number to a specific\npower. So I could write a function that I could pass in two numbers, like if I passed\nin three and four. This would basically give me back three race to the fourth power. So\nI'm gonna show you guys how we can build this and we'll actually get a chance to use four\nloops. So we can use a for loop in order to build this function, that's going to be pretty\ncool. So, up here, I'm going to create my exponent function. So we're going to have\nthis use a integer, so I'm just gonna say int. And why don't we just call this power\nbecause it's taking a number to a specific power, and make an open and close parentheses\nand open and close curly bracket. Now our power function is going to take two arguments.\nSo it's going to take a base number, and it's going to take a power number. And we're basically\ngoing to take the base number to the power of the power number. So I'm just going to\nsay int, and then and power num. Now down here in our power function, we need to figure\nout how we can do this. So I basically need to take bass num to power num. And we can\nuse something called a for loop in order to do that. So the first thing I want to do is\njust create an a variable, so I'm just going to call it result. And I'm just going to set\nthis equal to one. And then down here, I'm basically just going to return results. So\nessentially, our goal inside of this function is to get rid the result variable equal to\nthe value of the base num raised to the power number, right, that's kind of our goal. Throughout\nthis function, let's just say for the purposes of simplicity, and the purposes just for this\ntutorial, that we're only going to be able to handle positive number exponents. So we're\njust going to go ahead and assume that pounamu is going to be positive. And now let's just\nmake it a lot simpler and kind of help me to drive home the point a little bit better,\nwhat we're going to need is a for loop, and I'm going to go ahead and write out this for\nloop. Now up here in the parentheses, we need to specify three things, the first thing I\nneed to specify is a variable. So I'm just gonna say int i is equal to zero, I'll start\nthis out at zero. Now what I need to do is specify a looping a condition or a loop guard.\nSo I want to keep looping, as long as i is less than the power num. Essentially, what\nI'm saying here is I want to go through this loop power num times. So as many times as\nthe power num specifies I want to go through this loop. So if power num is three, I want\nto loop through three times, if panamas five, I want to loop through five times. That's\nbasically what this is saying. And then over here, we can just specify something that we\nwant to do after each iteration of the loop. So I'm just gonna say i plus plus. And basically\nwe'll just be incrementing, the value of i every time we go through the loop. Alright,\nso down here inside of our for loop, we need to think about what we can do. So where are\nwe already know that we're going to be looping through here, power num times, right? So what\nI think we should do is, we should multiply result times the base num, every time we go\nthrough this loop. So what I'm going to say is result is equal to result times base num.\nAnd the reason that this is going to work is because let's just kind of break this down,\nthe first time we go through this loop, right? result is going to be equal to one. So the\nfirst time we go through this loop, we're multiplying base num by one, so we just get\nbased on the second time we go through the loop result is equal to based on right, in\nother words, result has the value of base num. So the second time we go through, we're\nessentially multiplying base num times based on based on squared, right, the third time\nwe go through this loop result has the value of base num squared. So for molting multiplying\nbase num squared times base num, that'll give us base num cubed. So that's kind of why this\nis going to work, right. So we're looping through this for loop power num times. And\nevery time through the loop, we're multiplying result times the base num. And you can see\nthis for loop is very useful, because it allows us to only loop through the loop a specified\nnumber of times, right? It makes it really easy for us to only loop through, you know,\npower num times essentially. Alright, so this is the basic function. And this looks pretty\ngood to me. So again, we're only going to this is only going to be able to handle positive\nnumber, exponent, so positive number power nums. Okay, so let's go ahead and call this.\nSo I'm just going to say, actually, why don't we print out the result. So I'm going to see\nout power. And I'm going to pass in two numbers. So why don't we pass in two, and three, so\nwe're going to go ahead and do two cubed. So now let's run this function. And you'll\nsee we're getting eight. So two cubed is eight. Two times two is four, four times two is eight.\nLet's try another one. Why don't we do four squared. So now we should get 16. And you\ncan see over there we get 16. So it looks like our little function is working. And basically\nthe point of this tutorial was just to kind of demonstrate to you another way that we\ncan use these for loops. So I'm using this for loop in order to essentially specify how\nmany times I want to loop through something. And four leaves are really useful for that\nbecause we're keeping this count. So I is representing how many times we've gone through\nthe loop. So on the third iteration of the loop I can tell us that we've gone through\nthree times, essentially. And that's why this is useful. And so you can see, it's actually\nreally easy to do something like that it only takes up like two lines of code. So that's\nthe basics of building something like a power function. And actually, this is kind of useful,\nbecause you can kind of see how a function like this might get put together. In this\ntutorial, I want to talk to you guys about two separate subjects in c++, the first subject\nwe're going to talk about are going to be two dimensional arrays. And a two dimensional\narray is a situation where we have an array, where every single element inside the array\nis another array. So this is a pretty cool situation. And I want to talk to you guys\nabout one other thing which are nested for loops. And a nested for loop is a situation\nwhere we have a for loop inside of another for loop. So this is gonna be kind of cool.\nAnd you'll see we can actually use these two subjects together two dimensional arrays,\nand nested for loops in order to build a kind of a cool program. So I'm gonna show you guys\nthe basics of doing that stuff. First thing I want to show you is a two dimensional array.\nSo I'm going to go ahead and create an array of numbers. And I'm just going to call it\nnumber grid. And normally, when we create a regular array, we're just going to make\nan open and close square bracket. But since we're making a two dimensional array, I want\nto make another open close square bracket after this. Now remember, a two dimensional\narray is a situation where we have an array, where every element inside of the array is\nanother array. And I'm going to show you guys how we can go ahead and set something like\nthis up. So I'm going to give this an initial value. So I'm just gonna initialize this.\nAnd I'm basically just going to put a bunch of array elements inside of here. So the first\nthing we're going to do is create the first element in the array. Now normally, if I was\ncreating an array, I could just kind of type out elements like this, right? You know, I\ncan kind of type them out delineate them with a comma, and then we have our array. But with\na two dimensional array, remember, each individual element is actually another array. So if I\nwant to create one element inside of this two dimensional array, I can basically go\nlike this, right, so I can make another sort of mini array inside of here. And I'm actually\njust going to format this a little bit. And so now the first element in this number grid\narray is going to be an array with elements one and two. So number grid, first element\nis this array. And this array has two elements of its own. So I'm going to copy this, and\nwe're going to make another element. So I'm going to put a comma here, because remember,\nwe need a comma to delineate the different elements. And then down here, I'm just going\nto paste. So now we're going to do three and four. So we have 1234. And why don't we do\none more, and we'll just do five, six. Alright, so essentially, what's happening here is we\nhave our overall array, right, so these two curly brackets represent the number grid array.\nAnd inside of the number grid array, we have three elements. So this is the first element,\nthis is the second element. And this is the third element, all of which are arrays. And\neach one of these arrays has one, two elements inside of them. So whenever we're creating\ntwo dimensional arrays, we always want to specify the numbers over here. So inside of\nthis first open and closed square bracket, we want to tell c++, how many total elements\nare in the number grid array. So in our case, we have three, because again, there's 123\nelements. Then over here, we want to specify how many elements are inside of each array\nelement. So you'll notice we have 121212, etc. So there's going to be two elements in\neach one of these arrays. And it's very important, especially when you're dealing with two dimensional\narrays, that you specify these numbers, because otherwise you can get really confused, you\nknow, and so by specifying Three, two, I know the basic layout, like I know that this array\nhas three rows, like you can call these rows, and then it has two columns. So these would\nbe like columns, essentially, we're building a matrix. Alright, so that is a two dimensional\narray. And let's talk about how we can actually access some of these elements. So if I want\nto access some of these elements, I'm actually just gonna go ahead and print some of these\nout. So over here, I can just say number grid, and what I can do is I can make two open and\nclosed square brackets, so I can go just like just like this. And inside of these open and\nclosed square brackets, these first ones I want to specify the row. In other words, I\nwant to specify the element inside of number grid that I want to access. So this would\nbe the element at position zero, this would be the element at position one, and this would\nbe the element at position two. So let's say we want to access this element right here.\nI can put zero here because it's inside of element zero. And then over here, I want to\nput the index of that element inside of the array, so it's going to be an index position\n01. So zero again is corresponding to this overall element, and one is corresponding\nto this element inside of that array. Alright, so now when we print this out, we should get\na two. And you'll see over here, we get that two. Let's try one more, why don't we try\nto get this five over here. So five is going to be an element 012. So we're going to put\na two over here, and it's going to be element zero, so we're just going to put a zero and\nnow we should get that five, which we do. Alright, so that kind of shows you a little\nbit about how we can create a two dimensional array. And actually, this same concept can\napply to like n dimensional arrays. So you could have a three or four or five dimensional\narray. And all these same concepts are going to apply. Obviously, the more dimensions you\nadd, the more complex it becomes. But you can get pretty complex with arrays, just by\nusing this technique. So that was the first thing I wanted to show you guys. And now I\nwant to introduce another topic, which is a nested for loop. And nested for loop is\na situation where we have a for loop inside of another for loop. And actually nested for\nloops can be extremely useful, because we can use them to print out all of the elements\ninside of this two dimensional array. So basically, we could iterate through all the elements\ninside of here using a nested for loop, but I'm going to show you guys how that's going\nto work. So down here, I want to create a basic for loop. So I'm just gonna say for,\nand I'm just gonna say int i is equal to zero. Again, our goal here is to be able to loop\nthrough all of the elements in this array. And, you know, as I sort of create this for\nloop, just kind of stick with me, eventually, this is all gonna make sense. But what I want\nto do is I want to keep looping, while i is less than three. And I'm using three here,\nbecause I want this for loop to loop through all of these individual elements. So all of\nthe arrays inside of the number grid array, and over here, I'm just gonna say i plus plus.\nSo this for loop is responsible for iterating over all of these elements. So this first\nelement, the second element in this third element, but remember, each of these elements\nis another array. So what I want to do is for each of these arrays, I want to iterate\nover each of the elements inside of those arrays. So I can create another for loop to\ndo that. So I can say, int, and I'm just going to call this J. And a lot of times when we're\nusing nested for loops, people will name these ij, that's kind of a convention, I'm gonna\nset this equal to zero, and I'm going to keep looping as long as j is less than two. And\nremember, two is a how many elements are inside each of these arrays, right? So this loop\nover here is responsible for iterating through all of these elements, and this one down here\nis responsible for iterating through all of these elements. So I'm gonna say j less than\ntwo, and then I'm just gonna say j plus plus. So now we have our basic structure setup.\nFor every iteration of this I loop, this j loop is going to fully iterate. So it's going\nto go through all the way. And down here, I'm just going to see out. And I'm basically\njust going to print out all these different elements. So I'm going to print out number\ngrid, i j, and you guys will see in a second, basically how this is going to work. And then\nreal quick down here, I'm just going to see out a new line. So I'm just going to say C\nout and L and that'll print kind of a new line. So let's go ahead and run this. And\nthen I'll give you guys more of an explanation as far as what it's doing. So when I run this,\nyou'll notice that we're actually printing out all of these elements. So we're printing\nout 123456. So I'm actually able to go through and iterate over every single element inside\nof this two dimensional array. And basically what's happening is, every time we go through\nthis top loop up here, this AI loop, we're fully iterating through the J loop. So this\nI loop is responsible for iterating over each individual element. So it's responsible for\niterating over this, this and then this, this j loop is responsible for iterating over each\nof the elements inside of those elements, which are arrays. So the J loop is going to\nloop over this and this. So the first time we go through this loop is going to be equal\nto zero and j is going to be equal to zero. So we're going to print this out, then we're\ngoing to go through this j loop again, I is still going to be equal to zero, but j is\ngoing to be equal to one. So we're going to print this element out. And then AI is going\nto be equal to one. So it's going to be one zero, we'll print this out and then it's going\nto be one one. So we'll print this out. And that's essentially what's happening here.\nSo nested for loops and even like nested while loops, I mean, any sort of nested loop can\nbe very useful. And it can be useful for looping through like I said, complex structures like\nthat. And this tutorial on talk to you guys By using comments in c++, or comments are\na little special blocks of code, which aren't actually going to get executed or rendered\nby c++. So a lot of times in your programs, you're going to want to, you know, basically\nwrite things that are meant for human beings. So whenever we're writing programs, like whenever\nwe're writing code or instructions, those instructions are meant for the computer. So\nI can tell the computer to print something out, or I can tell the computer to loop over\na block of code or something like that. But a lot of times, we're going to want to write\nout messages just for human beings, so either for yourself or for someone else. And we can\ndo that using something called a comment. And I'm gonna show you guys what comments\nare essentially, a comment is just a, you know, a little line of code or a block of\ncode that c++ is going to ignore. And therefore we can use it to write little messages for\nourselves. So in order to create a comment in c++, there's actually a couple of ways\nwe can do it. The first way is just to make two forward slashes. So when I make two forward\nslashes, you'll notice that when I start typing, all of this text is actually colored different\nthan the text over here. That's because this is a comment. So any text that I put after\nthese two forward slashes is going to be considered a comment. And it's not actually going to\nget rendered by c++. So even though I have a bunch of nonsense up here, I can still run\nmy program, and it's still going to be able to execute. So you'll see I can run the program.\nAnd there's no errors, it's just printing out comments are fun. So this is a really\ngreat way to kind of write a little note, a lot of people will use this to write notes\nto themselves, or maybe write notes to other developers. You can also use this to like\ndescribe a line of code. So I could like describe this line of code over here, I can say like,\nprint out text, right? Obviously, you know, you probably wouldn't need to describe this\nline. But if you had like a complex function, or you know, complex loop or something like\nthat a comment can come in handy. You can also put these comments like after a line\nof code, so I can just cut this out and paste it down here. And you'll see that everything\nthat comes after these two forward slashes is going to be considered a comment. But I\ncan still put code over here. And again, you can use this to like describe what the line\nof code is doing or something like that. The one downside to this type of comment, though,\nis that it only works on one single line. So if I come down here to the new line, all\nof a sudden, this goes back to normal text. So this is no longer a comment. If you want\nto have a long block of comments, though, you can use something called an opening and\nclosing tags. So if I make a forward slash, and an Asterix, then everything that comes\nafter this, even if it's on a different line is going to be considered a comments, you\ncan see all of this stuff is now a comment. But I can close this off by saying an Asterix\nand another forward slash. But now everything that's in between these two tags is going\nto be considered a comment. And these two types of comments are very common. And you\nknow, pretty much either one you use is going to be correct. And it's going to work out.\nSo that's basically how the you know the two types of comments and how you can use them.\nAnother way that comments are useful is for commenting out lines of code. So a lot of\ntimes when you're working with your programs, maybe you want to try to run your program\nwithout a certain line of code. And you might be running into a problem and you think a\ncertain line of code is the culprit? Well, one option would be to just remove the line\nof code. So for example, let's say that this line of code was potentially like messing\nup my program. And I wanted to see how the program would act without that line of code.\nWell, I could just delete it, save the file, and then run the program. And now we're running\nthe program without that line of code. The problem with that, though, is I have to physically\ndelete the line of code, right? If I wanted, though, I could just put a comment in front\nof it. And now this entire line is going to get ignored by c++. So it's essentially the\nsame as removing it, but we don't actually have to physically remove it from the file,\nit's still gonna be there, we can still see it, we still know that it's there. It's just\nnot going to get executed. So that's another useful way that comments can come in handy.\nSo yeah, I think a lot of developers use comments, you definitely want to take advantage of them\nin your programs when they're appropriate. In this tutorial, I want to talk to you guys\nabout pointers in c++. Our pointer is basically just a type of information that we can work\nwith in our programs. If you follow along with this course up to this point, we've been\nworking with all different types of data. So we were working with things like integers,\nwhich are whole numbers, we've been working with like doubles, which are decimal numbers\nwhen working with strings and chars which are like plain text. And this is where I want\nto introduce you guys to another type of information we can deal with which are called pointers.\nAnd pointers are basically just memory addresses. So we're going to have get into what that\nmeans. What is a memory address, we're gonna talk about all that stuff. And I'll give you\na full introduction into pointers. So over here in my program, I have a few different\nvariables that I created. I have an integer called age and I gave it you know, a value\nDouble college GPA and a string called name. Now all of these are variables in my program,\nright. So in other words, all of these are essentially just containers where I'm storing\nspecific information. For my purposes, when I'm writing this program, I'm storing the\nvalue 19, inside of this age variable, right, I'm storing 2.7 inside of this GPA variable.\nBut let's kind of, you know, go underneath the hood a little bit and talk about what's\nactually going on here. So in everyone's computer, you have something called your memory. And\nanother word for this would be Ram. So you might have heard people talk about ram stands\nfor random access memory, it's essentially just the active memory that your computer's\nusing when it's running programs. So whenever your computer runs a program, it's using Ram.\nSo it's storing information inside of this memory, let's just say our program, for example.\nSo in the case of this program, if I was to run this program, my computer would actually\nbe using Ram. In other words, my computer is going to use its memory in order to store\nand keep track of information. In fact, it's going to be storing all of these values inside\nof its memory. So when I create this variable age, and I give it a value, what's actually\nhappening is my program is going to take this value 19. And it's going to store it inside\nthe physical memory of my computer. When I create this double GPA, my computer is going\nto take this number and it's going to store it physically inside of the memory in my computer.\nSame goes for that string. And so for all of these different pieces of data that are\nall actually getting stored inside of the memory of my computer, so when I write the\nprogram, like for my purposes, I just know that 19 is stored inside the age variable.\nBut when we go underneath the hood 19 is actually stored in side of the computer's memory, so\nit's physically stored in the memory. Now one of the cool things about the memory of\nour computer is there's a bunch of these little containers, right, each one of these variables,\neach one of these values is essentially just like inside of one of those containers, right?\nThat's kind of a broad strokes explanation, but you can basically think of it as like\nthis number 19 is stored inside of a container in memory, this value 2.7 is stored inside\nof a container in memory. And each of the containers inside the memory of my computer\nwhere these values are stored has an address. So it has an address, which uniquely identifies\nit. So for example, this value 19 is stored inside the physical memory of my computer,\nand it's stored at a specific memory address. This value 2.7 is stored in the memory of\nmy computer, and it's stored at a physical memory address. And so when my program wants\nto access this value, it can access it by using that memory address. When I want to\naccess the variable, I can just access it using like age or GPA. But when my computer\nwants to access it, my computer has to access it using the physical memory address. So that's\nkind of like what's going on. And I want to show you guys how we can go ahead and access\nthat physical memory address. So I can actually print it out, I get to say C out. And if I\nwanted, I could basically print out the memory address where each of these variables are\nstored. In other words, I could print out the memory address where this value 19 is\nstored, I can print out the memory address where this value 2.7 is stored. All I have\nto do is just make an ampersand and then I can type in the name of a variable. So I could\ntype in like age for example. And what this is going to do is when I put this ampersand\nhere, it's essentially going to tell c++ that I want to print out the memory address where\nthe age variable is stored. In other words, I want to print out the memory address where\nthis value of 19 is stored. So when I run my program, you'll notice over here that I'm\ngetting this kind of crazy number. So 0x, six, a FPS zero. This is a hexadecimal number,\nbasically, it's just some long number. That will be very difficult for a human being to\nremember. But the computer is able to remember it just fine. So if you were to go to this\nphysical memory address inside of my computer, you would find the value 19. I mean, that's\nessentially what this is doing. Right? So that's basically like where that value 19\nlives inside of our memory. Right. So if I wanted to access or change it or modify it,\nmy program can do it using that address. And that's essentially what we're talking about.\nAnd in c++, we have a word for these addresses. So we have like a special word that we use\nwhen we're talking about addresses. It's called a pointer. So generally, if I'm working in\nc++, and I want to talk about a memory address, I'm going to talk about pointers. So I would\nsay that this is a pointer, right. So over here, we can say that I'm printing out a pointer.\nAnd a pointer is just a type of information. It's just a memory address. So any memory\naddress that we're working with, or that we're using inside of our programs is going to be\nconsidered a pointer. And the way that we can access the pointer of these variables\nor in other words, the way We can access the memory addresses where these variables are\nstored is by using this ampersand. So I have a little demonstration I want to show you\nguys, this is just a block of code that I wrote out before the tutorial. And it's essentially\njust printing out all of the memory addresses for all of these variables. So I'm going to\ngo ahead and run this. So you can see over here, I'm essentially just printing out all\nthe individual memory addresses for all of these variables. So we have age, and it's\nlocated at this memory address, we have GPA at this memory address and name at this memory\naddress. So all of these memory addresses, if we were to go to them in our like physical\nRAM and the physical memory of our computer, we would see those values. And again, we would\ncall these pointers. So this is a pointer, this is a pointer pointer is just a memory\naddress that is just a type of data, we're just giving it another name. So that's kind\nof cool. And that kind of shows you guys how we can access like the memory addresses of\nthese different variables. But we can actually take this a step further. So I want to show\nyou guys another thing that I can do. So I can actually create a variable where I can\nstore the pointer. So over here, like I'm creating an integer variable, and inside of\nit, I'm storing an integer right over here, I'm creating a double variable, and I'm storing\na double over here, I'm creating a string variable, I'm storing a string. And actually,\nif we want to manage and keep track of the memory addresses or the pointers inside of\nour programs, we can create a pointer variable. So I'm going to show you guys how we can do\nthat. And a pointer variable will basically be just a container where we can store a pointer,\nright, it's a container where we can store a memory address. Generally, when we're working\nwith memory addresses in our programs, we're not just going to work with random addresses,\nright. In other words, like I don't know, any, like meaningful memory addresses off\nthe top of my head. So generally, when we're using memory addresses, we're going to be\nusing the memory addresses of the different variables in our programs. So therefore, when\nwe create an actual pointer variable, in other words, when I create a container, what I'm\ngoing to store a pointer, I'm generally going to create it based off of one of these variables.\nSo let's go ahead and create a pointer variable that will store the pointer. For this age\nvariable, I'm just going to say int. And whenever we create a pointer variable, you always want\nto use this special character, which is going to be the Asterix, and then you want to type\nin the name of the variable. So I'm just going to call this P age. And a lot of times when\nyou're creating pointer variables, you'll use this lowercase P. And then you'll type\nout the name of the variable whose memory address you're storing. So I could say int\np age is equal to and now I can just say ampersand age. So remember when we use this ampersand,\nand then we type out the name of the variable that gives us the pointer. In other words,\nthat gives us the memory address where the value is stored. So I'm essentially storing\nthis pointer inside of this variable over here called p age, I could do the same thing\ndown here for this double, I could just say double Asterix, and I'm just gonna say p GPA.\nAnd I'm going to set this equal to ampersand GPA. So now this pgpa pointer variable is\nstoring inside of it a pointer. In other words, that storing inside of it a memory address,\nand it just happens to be the memory address of this GPA variable. I can do the same thing\nfor this string down here. So I can say string p name. And actually don't forget to put the\nAsterix and I can just set this equal to ampersand name. And now this pointer variable p name\nis storing the pointer. In other words, it's storing the memory address have this name\nvariable. So now, I can actually work with these different pointer values using these\npointer variables. So if I was to come down here, I could say C out. And I could just\nprint out like p age. And now this is going to go ahead and print out the value that's\nstored inside of that pointer variable, which is going to be a pointer, which should be\nthe memory address of Ph. So you can see down there, that's exactly what we get. So that's\nkind of useful. And, you know, really, I think a lot of times people get a little intimidated\nor maybe confused with pointers. But pointers are really simple. A pointer is just another\ntype of data that we can work with in c++. So you know, you can work with things like\nintegers, which are whole numbers, you can work with doubles, which are decimal numbers,\nyou could work with strings, which are just a bunch of characters, you could also work\nwith pointers, which are memory addresses, you know, that's all it is. It's just a different\ntype of data. And we when we create a pointer variable, it's just a container where we can\nstore a pointer. That's kind of all it is. Now I want to point out to you guys, whenever\nI created this pointer variable, you'll notice that I use the data type of the variable that\nI was pointing to. So this pointer variable is storing the memory address of an integer.\nTherefore I said int over here, this pointer variable is storing the address of a double.\nSo I said double over here. Same thing down here. This is storing the memory does have\na string. So I said string over here. That's basically just what you have to do when we're\nmaking pointer variables. This kind of brings me to another point I want to show you guys\none more thing we can do, which is called dereferencing, a pointer. And dereferencing.\na pointer basically means that we're going to grab the value that's inside of the memory\naddress. So remember, a pointer is a memory address. So if I have a pointer, that is a\nthe address of a physical, you know, slot or a physical location, in my computer's RAM,\nand my computer's memory, that's all it is, it's just an address, right? Like you have\nan address for your house. That's kind of what this is, it's an address. But instead\nof for a house, it's for a memory location. And when we dereference a pointer, we're basically\ntelling c++ that instead of using the actual pointer, we now want to go to that physical\nmemory address, grab the value out of there and use it in our program. And the way that\nI can do that is by dereferencing. it. So you'll notice, like when I print out p h,\nright, this is a pointer. So when I, when I run this program, and I print it out, we\nget a memory address. But if I was to dereference, this pointer, we would actually end up getting\nthe value that was stored at that memory address. So if I put an Asterix here, this is what's\ncalled dereferencing, a pointer. So I could say Asterix p age, and now we'll be dereferencing,\nthe P age pointer. So now instead of getting that memory address, when I run this program,\nwe're going to get the value 19 because that is the value at the memory address that the\npointer was storing, and the pointer was representing. So I'm here in my program, and you'll see\ndown here we get 19. So when I get rid of this Asterix, we get the memory address, when\nI put the Asterix here, we're dereferencing the pointer. So we just get 19. And that's\nkind of how that works. So hopefully that makes sense. I'm gonna show you guys one more\nthing. So dereferencing is really useful. And if I just said, for example, like ampersand\nGPA, right? GPA is this variable up here, it's storing the value of 2.7. This is a pointer,\nright, so this is going to give me the memory address. So over here, when I run this, we\nget this memory address. But I could just dereference this, and hopefully this kind\nof shows you guys what we're doing. So I can just put an Asterix here, and this is going\nto dereference, this entire thing. So now this Asterix is dereferencing, this pointer,\nand we should end up getting the actual value, which is 2.7. So you can see we get this value.\nAnd you can I mean you can kind of chain these together. Not that you'd want to but I could\nsay like ampersand, and now we'll get the memory address again. So that's kind of how\nthat works. And, you know, pointers. And, you know, working with pointers, doing stuff\nwith pointers can be really useful in c++. This is also a very useful concept in another\nlanguage, which is called C. And C is actually the programming language that c++ is based\non. You use pointers a lot in that ceiling which but they're also important in c++. And\nif you're going to be a c++ developer programmer, you need to have at least a baseline understanding\nof what pointers are and how they work. So hopefully that gives you a little bit of an\nidea of what they are. Remember, essentially, pointers are just types of information. It's\njust another type of data that we can use in our programs, we can print them out, we\ncan use them, we can store them inside of variables, we can also dereference them, as\nyou saw earlier in the tutorial. So hopefully that helps. And hopefully now you can kind\nof play around with pointers. In this tutorial, I'm gonna teach you guys about classes and\nobjects in c++ classes and objects are extremely useful. And this is a very important topic\nin c++. So I'm gonna give you guys a full overview of what these are. And we'll kind\nof get an idea of how to create classes and objects. So down here in my little program\njust created a few different variables. And basically, what I'm doing here is I'm just\nstoring different pieces of information, right, I'm storing my name, inside of this name variable,\nand we're storing it inside of a string. I'm storing pi, the first three digits of Pi in\nthis double variable. And then I'm storing my favorite letter G inside of this character\nvariable. So just using these variables, were able to store a bunch of different types of\ninformation. And actually, if you know anything about c++ data types, you'll know that by\ndefault, c++ allows us to store a bunch of different types of data. So we can store like\ntext. We can store numbers, we can store like whole numbers, decimal numbers, we can store\ncharacters, we can store all of these different types of information. But here's the problem\nthough. And this is kind of a limitation to this is that there's a lot of types of information.\nIn other words, there's a lot of things there's a lot of real world entities that can't just\nbe represented using a string or a number or a character. Like there's a lot of things\nthat we just can't represent with a string or a number or a character like, like a phone\nfor example, like I can't really like represent a phone In my program using like a string\nor using just a number, or think of something like a computer, or a keyboard, or an animal\nor a person, like there's all these, like real world entities, that it can't necessarily\njust be represented using the limited data types that we have, or we only have like,\na certain number of data types that we can use. And those data types really aren't enough\nfor us to necessarily model everything in the real world. So imagine I was creating\na program, for example, where I wanted to work with books, like maybe I was creating\na program for a library. And inside of that program, we needed to represent book like,\nI wanted to be able to work with books and store books and use books inside of my program.\nWell, there's no book data type, right? There's no, like, I can't just come over here and\nsay, like, book, you know, my book, whatever, like, there's no book data type for me to\nuse. So this is kind of a problem. And, you know, forget, forget about books for a second\nimagine any other, you know, real world object, like a person or a location, or a musical\ninstrument, or really any type of like object in the real world that I'd want to represent\nin my program. And so you know, really, the problem is we only have a limited data types,\nright, there's only certain types of data we can represent. And this is where classes\nand objects come in. So what we can do is we can actually create a class. And a class\nis essentially a new data type. So when I create a class, I'm basically creating a new\ndata type in c++. And that's really why classes are useful, because we can kind of create\na blueprint for a new type of data in our program. So like I said, before, you know,\nI can't just come down and down here and create like a book data type, right. But what I can\ndo is I can create a class that will specify what a book data type is. And then I can actually\nuse that book data type that I created inside of my program. So I'm going to show you guys\nhow we can do this, let's write a program that will allow us to store and work with\nand represent books inside of our program. So we're essentially going to be creating\na book data type. In order for me to do this, I am just going to come up here. And I can\ndo this in the same file as this main function. And I'm going to create a class and a class\nis essentially just a specification or a blueprint for a new data type in our program. So when\nI create a class, I'm basically creating a new data type, I'm creating a new type of\ndata that we can work with, and we can use in our programs, it's pretty cool. So over\nhere to create a class, I'm just gonna say class, and then I'm going to give this a name.\nAnd generally when we're naming classes, we are going to name them with capital letter.\nSo I'm just going to make call this book. So we're going to create a book class. So\nthis book class is going to act as a blueprint or a template for the book data type. Okay,\nso this is just a specification, right? We're basically specifying what a book is, inside\nof our program. So what I want to do down here is I want to actually define the book\ndata type. And we can do that by giving it attributes. So we can basically say that a\nbook is going to have like two or three or five different attributes that will describe\nit. And we're going to use all those other data types like strings, integers, doubles,\ncharacters, etc, in order to represent those attributes. So essentially, this book class\nis going to be a collection of attributes, which are going to be things like numbers\nand strings, etc. So I'm just going to say public, and I'm going to make a colon here.\nAnd then we're going to come down here, and I'm actually going to end up this. So it's\na little bit easier to see down here, right below where I said public, I want to specify\nsome attributes. So essentially, I'm mapping out what a book is going to be and what it's\ngoing to have. So let's think about what are the different attributes of a book? Well,\nthe first and probably the most obvious is going to be the title. And we can represent\nthe title as a string. So I can just say string title. And I'm just declaring these variables,\nI'm not going to give them values. So what's another walnuts thing? Probably the author,\nright. So another attribute of a book would be the book's author. And let's try to think\nof one more. So I think another good one might be maybe let's do pages. So like this would\nbe the number of pages in the book. And I'm sure you can think of a lot more we could\nthink of like publishing date, like a publishing company, you know, you could think of, you\nknow, a version number. There's a lot of different attributes we could store for a book. But\nlet's keep it simple for now. Essentially, what I'm doing here, as I'm mapping out a\nblueprint, so I'm saying this is the blueprint for the book, data type. And a book in our\nprogram can have a title can have an author and can have a number of pages associated\nto it. So this is a more of a complex data type. Really, it's a it's a class. So this\nis basically all we need. So we're essentially just specifying what a book is. We're telling\nc++ what a book is in our program. So now I'm going to come down here and I'm actually\ngoing to create a book. So remember, this is just a blueprint. This is a template, it's\na specification. But this isn't like a physical book, if I want to actually, like have a physical\nbook that I'm going to work with, in my program, I need to create it down here. And we're actually\ngoing to be creating something called an object. So here's a little terminology lesson, a class\nis the specification, it's the blueprint, it's the template of a data type. So this\nbook class is the specification, it's the blueprint of a book inside of our program,\nan object is an actual instance of that blueprint, or it's an actual instance of that class.\nSo an object is an actual book. So I'm going to create an object down here, we'll call\nit a book object. And that means it's, it's an actual book that's going to have an actual\ntitle, and actual author and an actual number of pages associated to it. And we can create,\nyou know, hundreds of these different objects, but just know that a class is the template,\nit's the specification. And an object is an actual instance of that specification. So\nit's an actual book with an actual title, author, and page. So let's go ahead and do\nthat. I'm just going to say book. And again, I'm basically just telling c++, what type\nof data I want to create or what type of data I want to store. And then I'm going to give\nthis a name. So I'm just going to call it book one. So now we have this book inside\nof our program, it's called book one. And what we want to do is start giving it some\nattributes. So I want to say, book, one dot title. And we can actually give this a title.\nSo I can assign a value to book one for the title. So why don't we just say the title\nis like Harry Potter. So this is going to be a Harry Potter book. And I can do the same\nthing for author and four pages. So I can say book, one dot author, and I can just give\nthis an author. So it's JK Rowling. And we're going to give this a number of pages. So I\ncould say book, one dot pages, and this is going to be an integer. So let's say it has\nlike 500 pages. And so now I'm actually able to represent, and I'm able to work with a\nbook inside of my program. So again, this up here is a class. It's a template for what\na book is, this down here is an object, it's a physical book in our program that has actual\nattributes. So it has this is the Harry Potter book, with the JK Rowling author and 500 pages.\nSo I'll show you guys what we can do, we can actually print out this information. So I\ncould say C out. And why don't we print out book one dot title. And so now I'm able to\nstore all of this information inside of this book, one object. So I'm basically able to\nrepresent a book in my program, when I run this program, now, you'll see we're printing\nout the title of the book, which is Harry Potter, I can do the same thing for like pages.\nSo we could print out the number of pages in book one, which is going to be 500. So\nthis is a really cool way for us to actually model a real world entity like a book inside\nof our program. So remember, before, we didn't have a book data type, right, I had nothing\nI could use to represent a book in my program. Now all of a sudden, I have one. So I can\nactually represent a physical book in my program. And we can make as many of these as we wanted.\nSo I'm actually just going to copy this. And let's make another book. So let's say in addition\nto this Harry Potter book, maybe we want to make another one. And I'm just going to call\nthis book two. So I'm going to change all of these. So now all of these are sets of\nBook Two, and I'm going to change all these attributes. Instead of it being a Harry Potter\nbook. Why don't we make it a Lord of the Rings book, and the author is going to be token.\nAnd let's say that this is like 700 pages. So now I have two books in my program, I have\nbook one. And I have Book Two, book one has all of these attributes associated to it,\nBook Two, has all of these attributes associated to it. But both of these books are using this\nsame book template, right? They're using the same book class, this is just a specification\nfor what a book is. And down here, I was able to create individual instances of that specification.\nIn other words, I was able to create individual book objects. So I could also print out stuff\nabout book two. So now I could say like Book Two dot author, and this is going to print\nout book twos author. So now it's token. So just like before, when we have like integers,\nand you know, strings, and stuff like that. Now, in addition to those data types, we also\nhave a book. So I can represent a book, I can use a book, I can store it, I can, you\nknow, modify all its values and stuff like that. And, you know, down here, basically,\nwe're just defining the book and then we're giving it value. So I can say like, book one\ntitle, and I can also change these so if I said book to title down here, I could change\nit so I could change it to like Hunger Games or something. And now, Book Two title is going\nto be updated. So these work just like normal variables would work. And you can see now\nwe're getting Hunger Games. So that's pretty cool. And honestly, this is just a, an introduction\ninto classes and objects. There's a lot more to learn about, there's a lot more to talk\nabout. But hopefully this makes sense, what you want to do is just play around with modeling\nreal world object. So in here, I modeled a book. So I created a book data type, but you\ncould create like a phone data type. If you create a like a keyboard data type, you can\ncreate anything, you know, essentially, you're just taking a real world entity, breaking\nit up into individual attributes like title, author, and pages, and then you can represent\nit in your program. In this tutorial, I'm going to teach you guys how to use constructors\ninside of c++ classes. Now, a constructor is a basically a special function that is\ngoing to get called whenever we create a an object of a class. So let me show you guys,\nbasically how this works. So down here, or actually up here, I have this class, it's\ncalled book. And if you follow along with the course, we created this class in the last\ntutorial, and basically this book class is just sort of a blueprint or a specification\nfor what a book is inside of our program. So you know, a book has a title, has an author\nand has pages awesome. So then down here, we actually created some book objects. And\nan object is just an instance of a class. So we have book one, and book one has a title.\nIt's a Harry Potter book, and an author in pages, and all that stuff. So I'm going to\nshow you guys where constructors come into play. So a constructor, like I said, it's\nessentially just a function that's going to get called whenever we create one of these\nbook objects. So up here, I'm actually going to go ahead and create a constructor. And\nthe way we can create we can create a constructor is just by essentially creating a function\nfor this program. So I'm just gonna say book. And I'm gonna make an open and close parentheses\nand an open and close curly bracket. And essentially, what we have here is a constructor. So this\nis a special function now, which is going to get called whenever we create a book object.\nSo let me prove that to you guys, I'm just going to print something out. And I'll just\nsay, creating objects. And then we also want to print a new line. So down here, I'm creating\ntwo objects, I'm creating book one, and I'm creating Book Two, whenever I create a new\nobject, you guys are going to see that this function up here is going to get called. So\nlet me run this program. And you'll see over here, it says, creating object twice. So it\nsays creating objects. And that was when we made this line of code. And then down here,\nit also says creating object. And that was when we created this second object. So we\ncreated two objects. And this method, or this function got called twice. Hopefully that\nmakes sense. Now another cool thing about this book function is that it can accept parameters.\nSo I can come over here and we can say that this is going to accept a parameter like name.\nAnd over here, I can just print out like, whatever the user passed it. And so now down\nhere, when we create these objects, we can pass values in so I could pass in like Harry\nPotter, that's the name of this book. And we could pass in like, Lord of the Rings.\nThat's the name of this book, right? So now when I run my program, it's going to actually\nbe able to use those parameters. So instead of printing out like, creating object, it's\nprinting out the value that we passed into the constructor. Pretty cool, right? And constructors\nare awesome, because we can use them when we create objects. So let me point something\nout to you guys. And I'm actually just going to get rid of this stuff up here. So only\npoint something out when we wanted to create these objects, right. And when I wanted to\ngive them a bunch of initial information, so when I created book one, and Book Two,\nI had to manually specify what the title was going to be, what the author was going to\nbe and what the pages were going to be. And it kind of took up a lot of time, right, it\ntakes a lot of time to have to manually type out book one dot title, book, one dot author.\nAnd I have to do that for every single object that I create. Well, that gets really, really\ntedious. And imagine if instead of just creating two objects, I wanted to create like 100 or\n1000 objects like that would take up so many lines of code, I mean, just to create one\nof these objects, took up four lines of code. We can actually use these constructors in\norder to initialize our objects with information. So like when I create this book, one instead\nof having to manually specify the title, the author and the pages. Instead, I could just\npass those values into the constructor, and the constructor could initialize the values\nfor us. So let me show you guys how we can do that up here. In our constructor, I'm going\nto specify that this constructor is going to take three values. So this book constructor\nis going to take a string title. And actually, we're just going to call this a title, it's\ngoing to take a string, and we're going to call it a author. And it's going to take an\ninteger, we're just going to call it a pages. And I'm putting this a here, you don't have\nto do that, I'm just doing it. So it's kind of easy for us to see what's going on, a is\njust going to stand for arguments. So this will be like the title, that's an argument.\nAlright, so down here, what I can do is I can actually assign the values of title, author\nand pages to the values that we passed in. So down here, we're assigning the values of\ntitle, author and pages two, all of this information. But instead of having to do it down here,\nI could just do that up here in the constructor. So I could say that the title is going to\nbe equal to a title. So in other words, the title of the object, the title that we want\nto store for this specific book, is going to be equal to the title that gets passed\nin, I can do the same thing for the author. So I could say, author is going to be equal\nto A author, and pages is going to be equal to A pages. And again, you don't have to name\nthese a title, a author a pages, you can name whatever you want. I'm just kind of doing\nthis. So it's more obvious as far as what's going on. So down here, what I can do now\nwhenever I create this object, I need to pass it a title and author and a number of pages.\nSo if I tried to run my program, right, now, you'll see we're getting an error, we're basically\ngetting an error, because we didn't pass in these values. So what I can do is I can actually\ntake the title, I can take the author, and I can take the number of pages, so 500, and\nI can pass them into this constructor, then I can just get rid of all this code, because\nwe don't need it anymore. And I'll do the same thing for the Lord of the Rings book.\nSo I can, and we can pass in the number of pages. And so now we can get rid of all this\nstuff. So we went from having eight lines of code to create two objects. So now we just\nhave two lines of code. And now when I run my program, we should be able to essentially\njust give this object a bunch of initial information. So let's go ahead and print out this stuff.\nSo you can kind of see what happened. So I'm just going to see out while we see our book,\none dot title, and let's see what we get. So we should get Harry Potter, which we do.\nSo we did exactly what we were doing before, except we're able to do it a lot easier and\na lot cleaner now, by using this constructor. So this was a very, very powerful tool for\nus to use. Now, I also do want to point out, we can still modify these. So I could still\nsay like book one title. And I could change the title. So I can change the title to whatever\nI want. And it'll be updated. really all we're doing with this constructor here is we're\njust making it a lot easier. So we're essentially just making it easier for us to initialize\na object with different values. So that's sort of the basics of using constructors.\nAnd I'll show you guys one more thing we can do, you can actually create multiple constructors.\nSo I can create this constructor that will essentially just allow us to take in a title\nand author and a number of pages. But let's say that for some books, we wouldn't want\nto include one of those attributes, I can make another constructor over here. And this\nconstructor, for example, won't take in any parameters. And I can just give these values\nlike initial value. So I can basically just say like title is equal to no title. Author\nis equal to no author. And we could also say like pages is equal to zero. So this is basically\njust giving this object like some initial information if we don't pass anything it and\nso now, what I could do is I can come down here and I can create another book. So I can\nsay, like book, and we'll call this book three. And I now I don't have to pass in this information.\nSo if I want, I can just do that. And we can print out like Book Three dot title, and it's\ngoing to be that title that we gave it and this needs to be capital whoops. So now you\nsee we get no title. So a lot of times, people will create multiple constructors, you're\nbasically giving the user multiple ways that they can create your objects. But I'd say\nthe most common scenario is going to be this where you pass in all of the attributes, and\nthen they basically just get assigned. So that's the basics of constructors. Hopefully\nthat makes sense. constructors are very useful, so you're definitely going to want to use\nthem in your c++ classes. In this tutorial, I'm going to talk to you guys about object\nfunctions in c++. You'll also hear people refer to these sometimes as like instance\nfunctions. And essentially what this is, is it's a function that we can put inside of\none of our classes and then And the different objects of that class can use that function\nin order to either you know, find out information about themselves, or modify information about\nthemselves. So I'm just gonna give you guys a sort of introduction into how to do this.\nOver here, you'll see that I actually set up a class. And this class is called student.\nAnd this is essentially just a template for like what a student is going to be in our\nprogram. And I've said down here that a student is going to have a name, a student is going\nto have a major, and a student is also going to have a GPA. So that information is sort\nof like what defines a student in our program. And then down here, I created a constructor,\nwhich basically just allows whoever's creating these objects owner to pass in some initial\ninformation. And we're passing in the name of major and then also the GPA. So I'm essentially\njust using this constructor as I normally would any other constructor. So this is our\nstudent class. And then down here, in my main method, you'll see that I actually have a\ncouple students. So I created a student called student one, his name is Jim, he's a business\nmajor, and his GPA is 2.4. And then I have another student student two, her name is Pam.\nShe's an art major, and she has a GPA of 3.6. So these are now two students that I'm working\nwith. And I'm sort of representing inside of my programs. That's awesome. So let me\nshow you guys, how we can use these different object functions. Let's say that we wanted\na way to figure out whether or not one of these students was on the honor roll. Right.\nSo let's say that at the school that these students attend, there's an honor roll, right,\nand let's say that the rules are being on the honor roll as you need to have a GPA of\n3.5 or above. So if you have a GPA of 3.5 or greater, that means that you're on the\nhonor roll. And let's say that we wanted to have an easy way to figure out whether or\nnot a specific student was on the honor roll. Well, what I could do is I could actually\ncreate a function up here in my student class, which each of the objects can use to tell\nif they were on the honor roll or not. So what I'm going to do is I'm going to go down\nhere below the constructor, and I can basically just create a function like I normally would,\nso we can give this a return type. And I'm going to give this a Boolean return type.\nAnd I'm going to name this function has honors, and this function is basically going to return\na true or a false value, it will return true if the student has honors right? No return\ntrue, if the student has a GPA of 3.5 or greater. If they don't, it's going to return false.\nSo over here, we're not going to have to take in any information, we don't need any parameters,\nI'm going to make an open and closed curly bracket. Now down here inside of this function,\nwe need to figure out if the object has honors. So I can just use an if statement, I'm just\ngonna say if, and I'm basically just gonna say if GPA is greater than 3.5. Or actually,\nif GPA is greater than or equal to 3.5, then we're gonna come down here, and we can just\nreturn true, because if this code gets executed, that means that they have a GPA of 3.5 or\ngreater. And then otherwise, if that's not the case, we can just return false. So that's\nessentially all this little function is going to do. It's very simple if they have a GPA\n3.5 or greater, turn true, otherwise, return false. Now, what's cool about this function\nis each of the objects that I create can call this function, and depending on their specific\nGPA, it's going to return a different answer. So for example, let's go ahead and call this\non our first student gym. So I can just say, C out I just want to print out the answer.\nAnd I can just say, student, one dot has honors. So now if I want to figure out whether or\nnot Jim has honors, I can just call this function, I can say student one dot has honors. And\nnow this is going to print out whether or not Jim has honors. So you'll see over here,\nwe're printing out a zero. And just a tidbit. Whenever you print out Boolean values, if\nit's a false, it's going to get printed out as a zero. If it's a true, it's going to get\nprinted out as a one. So the fact that we're seeing a zero here means that student one\ndoesn't have honors. And we can do the same thing for Pam. So we can do the same thing\nwith our other students. I could say student to dot has honors. And now this should be\ntrue because Pam has a GPA of 3.6. So Pam is going to have honors. What's cool about\ndoing this is that this function is going to be using different information depending\non which object is calling it. So when the gym object calls it, the GPA is Jim's GPA.\nWhen the PAM object calls it, the GPA is Pam's GPA. So we can define a general function over\nhere in our class. And depending on the object that calls it, it's going to be giving or\ndoing different things. So the GPA is going to be different, depending on if Jim's calling\nit or if Pam is calling it and that's kind of why these are cool so you can make awesome\nThese little functions. And generally people will make these to get information about the\nobject. So for example, figure out whether or not they have honors, or modify values.\nAnd in future tutorials, we're going to look at functions which are going to be modifying\nthe values in our classes. But hopefully that kind of gives you an idea of what you can\ndo with these. So you know, I did a lot of cases, you're going to want to have different\nfunctions inside of your classes that are going to do stuff. Now I do want to just point\nout one more reason why these are cool. So let's say that I have this program written.\nAnd, you know, I'm using all these different students. And maybe I have a program that\nlike, calculates who's on the honor roll or something. Well, let's say that one day, the\nDean of the School comes to me and he's like, Hey, Mike, we're going to change the qualification\nfor honors. So now, instead of everybody with a 3.5, and greater is going to have honors,\nwe're just going to say everybody with a 2.0 and greater is going to have honors, in order\nfor me to make that change in my program. In other words, in order for me to update\nthat information, all I have to do is go over here and change this to 2.0. And now all of\nthe code in my program is still going to work. And these has honors are still going to work.\nBut now the bar for having honors is going to be lowered. So I can say student one has\nhonors. And now this is going to be true, because we changed the qualification. So now\nwe get a one. And that's kind of why these are powerful, you can kind of adjust different\ninformation and you know, control different things about the overall class and about every\ninstance of the class using these functions. So hopefully that is clear. Hopefully, you\nhave an idea now of what you can do with these different objects functions. In this tutorial,\nI'm going to talk to you guys about getters and setters in c++ classes. Now, getters and\nsetters are extremely useful. And basically, they allow you to control the access to the\ndifferent attributes and different elements inside of your c++ classes. So I'm going to\nshow you guys the basics of using c++. In order to do that, we're going to use a little\nexample. So up here, I have a class that I created, it's called movie. And this is basically\njust like allowing us to represent a movie inside of our program. So I have a few different\nattributes, the movie is going to have a title, it's going to have a director, it's also going\nto have a rating. So those are three different attributes of a movie, right, we can basically\nsay like, this is our movie, this is what it's going to be, that's what it's going to\nhave. And down here we have a constructor. So I'm just passing in the title, the director,\nand then also the rating. And then over here, we're assigning those values to the values\ninside of the object. This is all pretty standard stuff. And if you've been following along\nwith the course up to this point, this should kind of make sense. You know what I'm doing\nover here, I'm essentially just defining a class, movie data type. And down here, I actually\ncreated a movie. So I created a movie, and it's called Avengers and the title is The\nAvengers director is Joss Whedon. And the rating is pG 13. So um, I'm creating an actual\nmovie. And you'll see down here, I can print out the rating. So why don't we run our program,\nwe'll just sort of get on the same level. So over here, I have pG 13. So it's printing\nout the rating, everything works, everything looks good. Now, here's the thing, a lot of\ntimes in c++, when we're creating something like a class up here, like this movie, we're\ngoing to want to be able to control what information can be stored for a particular movie. And\nlet me give you an example. So down here, I have this rating as pG 13. Right. And generally\nfor movies, there's, you know, a certain number of ratings that you can have, so it'd be like\ng PG, PG, 13, R, and then nr, right, so not rated. So just for our purposes, let's say\nthat these are all the ratings that you can give to move PG, PG, PG, 13, Rn, nr, right?\nI'm sure there's some more that we could think of. But let's just say that those are the\nratings that we're going to say are valid for a movie, those are the ratings that are\ngoing to be allowed for a particular movie. Well, over here, I'm inserting pG 13. But\nlet's say I wanted to instead enter in something else. There's nothing stopping me from just\nentering in nonsense like dog, but there's nothing that's stopping me from just typing\nin some nonsense rating there. And then running the program and being able to store it inside\nof my movie, right I In other words, I can set the rating equal to dog, even though that's\nnot technically like one of the official ratings that we can have. And there's a lot of circumstances\nwhere there's going to be things like this, for example, you know, valid ratings that\nyou're going to want to enforce. In other words, like when you're writing this program,\nyou might not want an object, you might not want a movie object to be created. That's\nnot using a valid rating. Like you wouldn't want this to be able to happen down here.\nYou wouldn't want them to be able to put a rating in as dogs. So I'm gonna show you guys\nhow we can And essentially just enforce that how we could make it so that the user can\nonly create an object a movie object with a valid rating. And to do that, we can use\nsomething called getters and setters. Now, the first thing that I'm going to do, after\nI turn that back, is I'm going to head up here into my class. So up here in my movie\nclass, and I want to show you guys, one thing you'll see up here, I have this keyword public.\nAnd essentially, when I say public, and I put all this stuff underneath public, what\nthat means is that all of this stuff is public. And basically, when something's public, it\nmeans that any other program any other code can access it. So essentially, any code outside\nof this class is able to access the title of the movie, the director of the rating and\nthe constructor. So down here, I'm able to print out Avengers dot rating, because rating\nis public, right? So I can print this out, because it's underneath this little public\nkeyword. But there's another keyword that we can use in c++, which is called private.\nAnd I can do the same thing as I did with public, I can just say private, and any attributes,\nany variables, any functions, anything that I put underneath this private keyword, is\nactually going to be private. So for example, if I was to take this string rating, and I\nwas to put this under here, under this private, what this means is now only code inside of\nthis movie class is able to access the rating attribute, only code that's inside the movie\ncan access the rating. So if I was to come down here now and try to print out Avengers\ndot rating, I'm not going to be able to do that anymore. And you're going to see that\nwe're going to get an error. So you can see this highlights in red basically telling us\nthat you can't print out Avengers dot rating, because it's private, so I no longer have\naccess to the rating inside of my main function. Now one thing I will point out is I have access\nto the rating here in the constructor. That's because the rating variable, the rating attribute\nis in the same class as this constructor, so it's able to access it. But this main function\nisn't able to access it in any code inside the main function can't, because it's not\ninside of that class. So that's basically the difference between public and private.\nAnd we can leverage public and private in order to control what ratings are able to\nget set for this movie. So let me show you guys how we can do this, the first thing I\nwant to do is, underneath this public block, I'm going to create a public function, and\nI'm going to call it set rating. So actually, this is going to be void. And I'm just going\nto call it set rating. And this is going to take as a parameter, it's going to take one\nvalue, it's going to be a string, a rating. So this is going to take a rating as a parameter\ndown here, inside of this set rating function, I'm basically going to say rating is equal\nto A rating. So now whenever I want to give a value to the rating, I'm going to make it\nso we have to go through this set rating function. So over here, instead of saying rating is\nequal to A rating, on set, I'm just going to say, set rating, and I'm going to pass\nin a rating. And so now whenever we set the rating, it's going to go through this set\nrating function. And for example, if I wanted to modify the rating down here, so if I wanted\nto say like Avengers dot rating is equal to dog, I'm not going to be able to do this again,\nbecause rating is private, so I can't access it over here. But if I want to modify the\nrating, I can just go through this set rating function, because it's public. So over here,\nif I wanted to modify the rating, instead of saying Avengers dot rating, I could say\nAvengers dot set rating, and I can pass into this as a parameter, dog. Alright, so now\nanytime we're setting the rating, either up here in the constructor, or down here in the\nactual program, we have to go through this set rating function. And that's going to be\nreally useful. So essentially, what we can do now is we can set up some rules. So I can\nset up some rules inside of this set rating function for what ratings are going to be\nvalid. So I'm going to go ahead and do that. Essentially, what I'll do is I'll create an\nif statement. And if the rating that gets passed in is one of the valid ratings like\ng PG, PG, 13, r nr, then we'll let them set it. Otherwise, we'll be able to essentially\nlike throw an error or we'll be able to say like, Hey, this is an invalid rating. So down\nhere, I'm just going to create an if statement. And I'm just gonna say if. And I'm basically\njust going to check to see if the rating is one of the valid rating so we can check to\nsee if a rating is equal to G or a rating is equal to P And I can keep doing this for\neach of the valid ratings. So I'll keep doing this over here. And I'm just gonna say, or\na rating is equal to pG 13. Or a rating is equal to R. And then there's one more, which\nis going to be or a rating is equal to nr. So basically, what I'm doing is I'm creating\nthis long winded if statement. And it's checking all of these conditions. So it's checking\nto see if a rating is G, or if it's equal to PG, or if it's equal to pG 13, or R or\nFinally, nr. Now, if it's equal to one of those, right, if it's equal to one of those\nvalid ratings, then we can just go ahead and set it normally. So I could say like rating\nis equal to A rating, right? Because they entered in a valid rating, so it's going to\nbe fine. But here's the thing, if they didn't enter in a valid rating, that means that we're\nnot going to be able to set it as the rating that they entered, so I can say else. And\notherwise, why don't we just go ahead and set rating equal to an R. So we'll say that\nif they entered in an invalid rating, like they tried to set an invalid rating, for the\nrating for the movie, we're just going to go ahead and set it to nr because they didn't\nenter in a valid rating. So it's just going to be not rated. So here's the thing. Now\nwhenever we want to set the rating, we have to go through this set rating function. So\nfor example, I can come over here and I can say Avengers, set rating and dog. And then\nif I printed out the rating, it's actually gonna say nr, because they entered in an invalid\nrating, it's just going to default to nr. But here's the other problem is when I can't\nactually print out the rating. So I can't Access Avengers dot rating, because it's private,\nremember, so what we can do is we can create another function up here, and this one is\ngoing to be a string, so it's going to return a string. And I'm just going to call it get\nrating. And it's not going to take any parameters, it's just going to return rating, so it'll\njust return the rating. And so now if I wanted to print this out, I could say Avengers dot\nget rating, and I'll be able to print it out. So let's go ahead and see what happens. So\ndown here, I set Avengers rating equal to dog. That's an invalid rating. So now when\nI get the rating, and I print it out, we should just print out nr. And actually looks like\nI have a typo here. So I forgot to put a double equals in there. Let me see if I did that\nover here, too. Nope. Okay, so we should be able to run this now. Yeah, so down here,\nyou'll see that we're printing out an R. So I tried to set the rating u equal to dog,\nthat was an invalid rating. So when I went to get it, it's just giving me an R. And that's\ngoing to work for anything. So for example, over here, when I just first created this,\nI set pG 13. That's a valid rating, right, that is one of the official ratings that we\ncan use. So when I run this, it's going to have that it'll have a rating of pG 13. But\nif I tried to set this to like pG 15, or something, that's not a valid rating, right. So when\nI run the program, it's going to basically say that it's not rated because we didn't\nenter in a valid rating. And you know, you can essentially do whatever you wanted there.\nThe point that I'm trying to make though, is that there's going to be certain times\nwhere you want to control what values are, you know how the user can interact with the\nattributes of a class or of an object. In our case, we wanted to be able to restrict\nwhat types of ratings were able to be stored inside of a movie. So I was able to set the\nattribute equal to private, which meant nobody could access it directly. They couldn't just\nsay like, hey, the rating is equal to this, or the ratings equal to that. Instead, if\nthey wanted to set a rating, they had to go through the set rating function. And they\nhad to go through our little if statement here. And that is an awesome way to control\naccess to the individual elements, or the individual attributes in a specific object.\nIn this tutorial, I'm going to talk to you guys about inheritance in c++. inheritance\nis basically where we can define a class. And then we can define other classes. And\nthose classes can extend the functionality or they can inherit all the functionality,\nall the attributes of that original class. So the easiest way for me to explain this\nis just to kind of show you guys an example. So over here in my program, I created a class\nand it's called the chef class. Basically, this class is like modeling like a chef in\nour program. And there's a couple different functions that the chef class can perform.\nThe chef can make chicken, the chef can make salad and the chef can make a special dish.\nBasically each of these functions just prints out like what it's doing. So this one says\nthe chef makes chicken the chef makes salad. Chef makes barbecue ribs. Very simple class.\nAnd down here you'll see I'm actually creating an instance of this Chef class, and called\nchef and down here I'm telling the chef to make chicken. So let's run the program. And\nwe'll see what happens. So when I run the program, you'll see, it prints out the chef\nmakes chicken. Awesome. So we have this chef class. And let's say that I'm running my program.\nAnd I'm thinking to myself, like, Hmm, I think in addition to representing just a normal\ngeneric chef, I also want to represent an Italian chef. So what I'm going to do is I'm\ngoing to go over and I'll actually just create another class. So I'm just going to say class.\nAnd instead of creating a chef class, I'm going to create an Italian chef class. So\nI'll say, Italian chef. And let's say for our purposes, when we're creating this Italian\nchef class, we want the Italian chef to be able to do everything that the normal chef\ncan do. So this Italian chef can make chicken can also make salad and can also make a special\ndish. But in addition to that, the Italian chef will be able to do a bunch of other stuff,\nwell, we can actually use inheritance in order to build this Italian chef. Because the Italian\nchef is going to be able to do everything that the normal chef could do, like make chicken,\nmake salad and make a special dish, I can actually inherit all of these functions. From\nthe chef class in my new Italian chef class, I'll show you guys how to do that, it's actually\nsuper easy. All we have to do is come down here. And I'm just going to make a colon.\nAnd then I can just say public and chef. So this is referring to the class that I want\nto inherit from. And now what's cool about this is this Italian chef is going to have\naccess to all of the functionality up here in this chef class. So it's basically going\nto inherit all of those functions. So I'll show you if I was to come down here and create\nan Italian chef. So if I just said, Italian chef, we'll just call it Italian chef. I could\nthen say Italian chef dot make chicken. And even though I didn't specify anything up here,\neven though this class is technically empty, even though I didn't specify a make chicken\nfunction, or make salad or make special dish function up here, I'm still able to call make\nchicken on Italian chef. So if I was to run this program, now, you'll see it says the\nchef makes chicken. So I'm able to call that function on the normal chef and the Italian\nchef, essentially what's happening is the Italian chef down here is inheriting all of\nthis functionality. So actually, just to sort of demonstrate this even further, if I came\ndown here and I change this to chef makes yummy chicken. Now when I run my program,\nagain, you'll see that the Italian chef is also going to be able to make yummy chicken.\nSo it's basically inheriting this function from the chef class. And what's cool about\ninheritance is that not only can we inherit all that in functionality, but we could extend\non it. So the Italian chef isn't just going to be able to do everything the chef does.\nItalian chef can also do other stuff. So the Italian chef could also like make pasta. And\ndown here, we can just basically print out like the chef makes pasta. So in addition\nto being able to make everything that the normal chef can make, this Italian chef can\nalso make pasta. So I can come down here and say make pasta. But it's important to note\nthat this normal chef can't make pasta. So if I tried to call pop make pasta on the normal\nchef, you'll see we're going to get an error. So you'll see over here, it's not going to\nbe able to run the program. And actually, it looks like I had an error up here. So this\nshould be a lesson sign. Alright, so now we'll get an error down by the other chef. Yeah,\nso now we're getting this error, which is basically saying this, this chef can't make\npasta, but the chef could make chicken. And now that you'll see the Italian chef is gonna\nmake pasta and the normal chefs gonna make chicken. And actually one more thing I forgot,\nwe need to put public over here. I keep forgetting to do that. So I'm gonna say public. And then\nthis is basically going to specify that this function is going to be public. So now we\nshould be able to run our program. And you'll see it says the chef makes yummy chicken and\nthe chef makes pasta. So both of our chefs are able to do different things. And that's\npretty cool. And the other cool thing I can do with inheritance is I can actually override\ncertain functions. So you'll notice up here, the normal chef has this make special dish\nfunction. And this chef is making barbecue ribs as a special dish. But let's say that\nthe Italian chef was going to have a different special dish. Well, I can do something called\noverriding a function. So I can actually copy this function from up here. And I can paste\nit down here into my Italian chef. And essentially now this is going to override the function\nfrom up here. So instead I'm making barbecue ribs we could have him make like chicken parm.\nSo now this Italian chef is going to be making chicken parm while the normal chef will make\nbarbecue ribs. So if I came down here and I said make special dish on the normal chef\nand I said, Make spicy special dish on the Italian chef. Now these are going to be two\ndifferent things because the Italian chef overrode that original function. So chef makes\nchicken parm and the chef makes barbecue ribs. So that's kind of how overriding can be useful.\nLike if you're inheriting a function and you want to change, like what it's doing, or modify\nwhat it's doing in the other class, you can do that. Now, just a quick terminology. So\nwe would call this chef class, a superclass. And then we would call this Italian chef class\na subclass, because the Italian chef is inheriting from the chef class, which is the superclass\nand that is essentially, the basics of inheritance is you're essentially creating a class and\nyou're inheriting all the functionality from another class inside of it. And then you can\ndo things like add extra functions, you can add on to it, or you can override the functions\nthat you inherit. Hey, thanks for watching. If you enjoyed the video, please leave a like\nand subscribe."
        }
    ],
    "programming": [],
    "coding": [],
    "language_learning": [],
    "sustainable": [],
    "eco_friendly": [],
    "tech_reviews": [],
    "gadgets": [],
    "lifestyle_vlog": [],
    "daily_vlog": [],
    "travel_vlog": [],
    "science_experiments": [],
    "space": [],
    "engineering": [],
    "robotics": [],
    "podcasting": [],
    "fashion_design": [],
    "travel_tips": [],
    "fitness_challenges": [],
    "art": [],
    "crafts": [],
    "self_improvement": [],
    "mindset": [],
    "gaming_guides": [],
    "reality_tv": [],
    "celeb_news": [],
    "news_analysis": [],
    "sports_highlights": [],
    "interviews": [],
    "tech_tutorials": [],
    "vfx": [],
    "animation_tutorials": [],
    "3d_design": [],
    "photography": [],
    "filmmaking": [],
    "investigative_journalism": [],
    "documentary_filmmaking": [],
    "comedy_sketches": [],
    "standup_comedy": [],
    "rants": [],
    "motivational_speeches": [],
    "lifestyle_hacks": [],
    "travel_guides": [],
    "home_decor": [],
    "gardening_tips": [],
    "cooking_recipes": [],
    "baking_tutorials": [],
    "wine_reviews": [],
    "beer_reviews": [],
    "celebrity": [],
    "makeup": [],
    "hairstyling": [],
    "skincare": [],
    "yoga": [],
    "meditation": [],
    "mindfulness": [],
    "basketball": [],
    "football": [],
    "soccer": [],
    "baseball": [],
    "hockey": [],
    "cricket": [],
    "rugby": [],
    "boxing": [],
    "mma": [],
    "digital_marketing": [],
    "social_media_tips": [],
    "social_innovation": [],
    "music_instruments": [],
    "vlogging_tutorials": [],
    "entrepreneurship_tips": []
}